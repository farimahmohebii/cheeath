/*
This is an autogenerated file, generated using the EzPC compiler.
*/


#include "library_fixed.h"
#include <iostream>
using namespace std;

int party = 0;
int port = 32000;
string address = "127.0.0.1";
int num_threads = 4;
int32_t bitlength = 41;
int32_t kScale = 12;

































void TanhImpl(int32_t LUTBITS, int32_t size, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, uint64_t* A, uint64_t* B){
TanH( (int32_t)1, size, sA, sB, bwA, bwB, A, B);
}


void SigmoidImpl(int32_t LUTBITS, int32_t size, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, uint64_t* A, uint64_t* B){
Sigmoid( (int32_t)1, size, sA, sB, bwA, bwB, A, B);
}


void SqrtImpl(int32_t LUTBITS, int32_t size, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, uint32_t inverse, uint64_t* A, uint64_t* B){
Sqrt( (int32_t)1, size, sA, sB, bwA, bwB, inverse, A, B);
}

void MatAddBroadCast2(int32_t a1, int32_t a2, int32_t b1, int32_t s1, int32_t s2, uint64_t* A, uint64_t* B, uint64_t* outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
Arr2DIdxRowM(outArr,s1,s2,i1,i2) = SecretAdd(Arr2DIdxRowM(A,s1,s2,i1,i2), Arr1DIdxRowM(B,s2,i2));
}
}
}

void MatAdd2(int32_t a1, int32_t a2, int32_t b1, int32_t b2, int32_t s1, int32_t s2, uint64_t* A, uint64_t* B, uint64_t* outArr){

int32_t aIdx1 =  (int32_t)0;

int32_t aIdx2 =  (int32_t)0;

int32_t bIdx1 =  (int32_t)0;

int32_t bIdx2 =  (int32_t)0;
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
aIdx1 = (a1 ==  (int32_t)1) ?  (int32_t)0 : i1;
bIdx1 = (b1 ==  (int32_t)1) ?  (int32_t)0 : i1;
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
aIdx2 = (a2 ==  (int32_t)1) ?  (int32_t)0 : i2;
bIdx2 = (b2 ==  (int32_t)1) ?  (int32_t)0 : i2;
Arr2DIdxRowM(outArr,s1,s2,i1,i2) = SecretAdd(Arr2DIdxRowM(A,a1,a2,aIdx1,aIdx2), Arr2DIdxRowM(B,b1,b2,bIdx1,bIdx2));
}
}
}

void MatAddBroadCast4(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t b1, int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint64_t* A, uint64_t* B, uint64_t* outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
Arr4DIdxRowM(outArr,s1,s2,s3,s4,i1,i2,i3,i4) = SecretAdd(Arr4DIdxRowM(A,s1,s2,s3,s4,i1,i2,i3,i4), Arr1DIdxRowM(B,s4,i4));
}
}
}
}
}

void MatAddBroadCast5(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t b1, int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, uint64_t* A, uint64_t* B, uint64_t* outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){
Arr5DIdxRowM(outArr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5) = SecretAdd(Arr5DIdxRowM(A,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5), Arr1DIdxRowM(B,s5,i5));
}
}
}
}
}
}

void MatAdd4(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t b1, int32_t b2, int32_t b3, int32_t b4, int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint64_t* A, uint64_t* B, uint64_t* outArr){

int32_t aIdx1 =  (int32_t)0;

int32_t aIdx2 =  (int32_t)0;

int32_t aIdx3 =  (int32_t)0;

int32_t aIdx4 =  (int32_t)0;

int32_t bIdx1 =  (int32_t)0;

int32_t bIdx2 =  (int32_t)0;

int32_t bIdx3 =  (int32_t)0;

int32_t bIdx4 =  (int32_t)0;
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
aIdx1 = (a1 ==  (int32_t)1) ?  (int32_t)0 : i1;
bIdx1 = (b1 ==  (int32_t)1) ?  (int32_t)0 : i1;
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
aIdx2 = (a2 ==  (int32_t)1) ?  (int32_t)0 : i2;
bIdx2 = (b2 ==  (int32_t)1) ?  (int32_t)0 : i2;
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
aIdx3 = (a3 ==  (int32_t)1) ?  (int32_t)0 : i3;
bIdx3 = (b3 ==  (int32_t)1) ?  (int32_t)0 : i3;
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
aIdx4 = (a4 ==  (int32_t)1) ?  (int32_t)0 : i4;
bIdx4 = (b4 ==  (int32_t)1) ?  (int32_t)0 : i4;
Arr4DIdxRowM(outArr,s1,s2,s3,s4,i1,i2,i3,i4) = SecretAdd(Arr4DIdxRowM(A,a1,a2,a3,a4,aIdx1,aIdx2,aIdx3,aIdx4), Arr4DIdxRowM(B,b1,b2,b3,b4,bIdx1,bIdx2,bIdx3,bIdx4));
}
}
}
}
}

void MatAdd5(int32_t a1, int32_t a2, int32_t a3, int32_t a4, int32_t a5, int32_t b1, int32_t b2, int32_t b3, int32_t b4, int32_t b5, int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, uint64_t* A, uint64_t* B, uint64_t* outArr){

int32_t aIdx1 =  (int32_t)0;

int32_t aIdx2 =  (int32_t)0;

int32_t aIdx3 =  (int32_t)0;

int32_t aIdx4 =  (int32_t)0;

int32_t aIdx5 =  (int32_t)0;

int32_t bIdx1 =  (int32_t)0;

int32_t bIdx2 =  (int32_t)0;

int32_t bIdx3 =  (int32_t)0;

int32_t bIdx4 =  (int32_t)0;

int32_t bIdx5 =  (int32_t)0;
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
aIdx1 = (a1 ==  (int32_t)1) ?  (int32_t)0 : i1;
bIdx1 = (b1 ==  (int32_t)1) ?  (int32_t)0 : i1;
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
aIdx2 = (a2 ==  (int32_t)1) ?  (int32_t)0 : i2;
bIdx2 = (b2 ==  (int32_t)1) ?  (int32_t)0 : i2;
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
aIdx3 = (a3 ==  (int32_t)1) ?  (int32_t)0 : i3;
bIdx3 = (b3 ==  (int32_t)1) ?  (int32_t)0 : i3;
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
aIdx4 = (a4 ==  (int32_t)1) ?  (int32_t)0 : i4;
bIdx4 = (b4 ==  (int32_t)1) ?  (int32_t)0 : i4;
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){
aIdx5 = (a5 ==  (int32_t)1) ?  (int32_t)0 : i5;
bIdx5 = (b5 ==  (int32_t)1) ?  (int32_t)0 : i5;
Arr5DIdxRowM(outArr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5) = SecretAdd(Arr5DIdxRowM(A,a1,a2,a3,a4,a5,aIdx1,aIdx2,aIdx3,aIdx4,aIdx5), Arr5DIdxRowM(B,b1,b2,b3,b4,b5,bIdx1,bIdx2,bIdx3,bIdx4,bIdx5));
}
}
}
}
}
}

void CreateTensor1(int32_t s1, int64_t val, int64_t* arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
Arr1DIdxRowM(arr,s1,i1) = val;
}
}

void CreateTensor2(int32_t s1, int32_t s2, int64_t val, int64_t* arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
Arr2DIdxRowM(arr,s1,s2,i1,i2) = val;
}
}
}

void CreateTensor3(int32_t s1, int32_t s2, int32_t s3, int64_t val, int64_t* arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
Arr3DIdxRowM(arr,s1,s2,s3,i1,i2,i3) = val;
}
}
}
}

void CreateTensor4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int64_t val, int64_t* arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
Arr4DIdxRowM(arr,s1,s2,s3,s4,i1,i2,i3,i4) = val;
}
}
}
}
}

void CreateTensor5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, int64_t val, int64_t* arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){
Arr5DIdxRowM(arr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5) = val;
}
}
}
}
}
}

void CopyTensor1(int32_t s1, uint64_t* targetArr, uint64_t* fromArr, uint64_t* ignore){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
Arr1DIdxRowM(targetArr,s1,i1) = Arr1DIdxRowM(fromArr,s1,i1);
}
}

void CopyTensor2(int32_t s1, int32_t s2, uint64_t* targetArr, uint64_t* fromArr, uint64_t* ignore){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
Arr2DIdxRowM(targetArr,s1,s2,i1,i2) = Arr2DIdxRowM(fromArr,s1,s2,i1,i2);
}
}
}

void CopyTensor3(int32_t s1, int32_t s2, int32_t s3, uint64_t* targetArr, uint64_t* fromArr, uint64_t* ignore){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
Arr3DIdxRowM(targetArr,s1,s2,s3,i1,i2,i3) = Arr3DIdxRowM(fromArr,s1,s2,s3,i1,i2,i3);
}
}
}
}

void CopyTensor4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint64_t* targetArr, uint64_t* fromArr, uint64_t* ignore){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
Arr4DIdxRowM(targetArr,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(fromArr,s1,s2,s3,s4,i1,i2,i3,i4);
}
}
}
}
}

void CreateIdentity11(int32_t s1, uint64_t* fromArr, uint64_t* newArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
Arr1DIdxRowM(newArr,s1,i1) = Arr1DIdxRowM(fromArr,s1,i1);
}
}

void CreateIdentity22(int32_t s1, int32_t s2, uint64_t* fromArr, uint64_t* newArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
Arr2DIdxRowM(newArr,s1,s2,i1,i2) = Arr2DIdxRowM(fromArr,s1,s2,i1,i2);
}
}
}

void CreateIdentity33(int32_t s1, int32_t s2, int32_t s3, uint64_t* fromArr, uint64_t* newArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
Arr3DIdxRowM(newArr,s1,s2,s3,i1,i2,i3) = Arr3DIdxRowM(fromArr,s1,s2,s3,i1,i2,i3);
}
}
}
}

void CreateIdentity44(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint64_t* fromArr, uint64_t* newArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
Arr4DIdxRowM(newArr,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(fromArr,s1,s2,s3,s4,i1,i2,i3,i4);
}
}
}
}
}

void CreateCopy2211(int32_t s1, int32_t s2, int32_t inps1, int32_t inps2, uint64_t* inArr, int32_t perDimSize, int32_t* beginIdx, int32_t* sizeIdx, uint64_t* outArr){
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
Arr2DIdxRowM(outArr,s1,s2,i,j) = Arr2DIdxRowM(inArr,inps1,inps2,(Arr1DIdxRowM(beginIdx,perDimSize, (int32_t)0) + i),(Arr1DIdxRowM(beginIdx,perDimSize, (int32_t)1) + j));
}
}
}

void CreateCopy5511(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, int32_t inps1, int32_t inps2, int32_t inps3, int32_t inps4, int32_t inps5, uint64_t* inArr, int32_t perDimSize, int32_t* beginIdx, int32_t* sizeIdx, uint64_t* outArr){
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
for (uint32_t m =  (int32_t)0; m < s5; m++){
Arr5DIdxRowM(outArr,s1,s2,s3,s4,s5,i,j,k,l,m) = Arr5DIdxRowM(inArr,inps1,inps2,inps3,inps4,inps5,(Arr1DIdxRowM(beginIdx,perDimSize, (int32_t)0) + i),(Arr1DIdxRowM(beginIdx,perDimSize, (int32_t)1) + j),(Arr1DIdxRowM(beginIdx,perDimSize, (int32_t)2) + k),(Arr1DIdxRowM(beginIdx,perDimSize, (int32_t)3) + l),(Arr1DIdxRowM(beginIdx,perDimSize, (int32_t)4) + m));
}
}
}
}
}
}

void Concat1T44(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t axis, uint64_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
}
}
}
}
}

void Concat2T222(int32_t s1, int32_t s2, int32_t inp1s1, int32_t inp1s2, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, uint64_t* inp2, int32_t axis, uint64_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr2DIdxRowM(outp,s1,s2,i1,i2) = Arr2DIdxRowM(inp1,inp1s1,inp1s2,i1,i2);
} else {
Arr2DIdxRowM(outp,s1,s2,i1,i2) = Arr2DIdxRowM(inp2,inp2s1,inp2s2,(i1 - inp1s1),i2);
}
} else {
if ((i2 < inp1s2)) {
Arr2DIdxRowM(outp,s1,s2,i1,i2) = Arr2DIdxRowM(inp1,inp1s1,inp1s2,i1,i2);
} else {
Arr2DIdxRowM(outp,s1,s2,i1,i2) = Arr2DIdxRowM(inp2,inp2s1,inp2s2,i1,(i2 - inp1s2));
}
}
}
}
}

void Concat2T444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t axis, uint64_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
}
}
}
}
}
}
}
}
}

void Concat3T4444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t axis, uint64_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
}
}
}
}
}
}
}
}
}
}

void Concat4T44444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t axis, uint64_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
}
}
}
}
}
}
}
}
}
}
}

void Concat5T444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t axis, uint64_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
}
}
}
}
}
}
}
}
}
}
}
}

void Concat6T4444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t axis, uint64_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat7T44444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t axis, uint64_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat8T444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t axis, uint64_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat9T4444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t axis, uint64_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat10T44444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t axis, uint64_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat11T444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t axis, uint64_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat12T4444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t axis, uint64_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat13T44444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, uint64_t* inp13, int32_t axis, uint64_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3),i4);
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,i3,((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat14T444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, uint64_t* inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, uint64_t* inp14, int32_t axis, uint64_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3),i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,i3,((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,i3,(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat15T4444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, uint64_t* inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, uint64_t* inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, uint64_t* inp15, int32_t axis, uint64_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2),i3,i4);
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3),i4);
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3),i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,i3,((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4));
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,i3,(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,i3,((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat16T44444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, uint64_t* inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, uint64_t* inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, uint64_t* inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, uint64_t* inp16, int32_t axis, uint64_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2),i3,i4);
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2),i3,i4);
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3),i4);
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3),i4);
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3),i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,i3,((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4));
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,i3,(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4));
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,i3,((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,i3,(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat17T444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, uint64_t* inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, uint64_t* inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, uint64_t* inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, uint64_t* inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, uint64_t* inp17, int32_t axis, uint64_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2),i3,i4);
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2),i3,i4);
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2),i3,i4);
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3),i4);
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3),i4);
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3),i4);
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3),i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,i3,((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4));
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,i3,(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4));
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,i3,((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4));
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,i3,(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,i3,((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat18T4444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, uint64_t* inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, uint64_t* inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, uint64_t* inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, uint64_t* inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, uint64_t* inp17, int32_t inp18s1, int32_t inp18s2, int32_t inp18s3, int32_t inp18s4, uint64_t* inp18, int32_t axis, uint64_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,(((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2),i3,i4);
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2),i3,i4);
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2),i3,i4);
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,(((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3),i4);
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3),i4);
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3),i4);
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3),i4);
} else {
if ((i3 < ((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,(((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3),i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,i3,((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4));
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,i3,(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4));
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,i3,((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4));
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,i3,(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4));
} else {
if ((i4 < ((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,i3,((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,i3,(((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat19T44444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, uint64_t* inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, uint64_t* inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, uint64_t* inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, uint64_t* inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, uint64_t* inp17, int32_t inp18s1, int32_t inp18s2, int32_t inp18s3, int32_t inp18s4, uint64_t* inp18, int32_t inp19s1, int32_t inp19s2, int32_t inp19s3, int32_t inp19s4, uint64_t* inp19, int32_t axis, uint64_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,(((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2),i3,i4);
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2),i3,i4);
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2),i3,i4);
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,(((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3),i4);
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3),i4);
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3),i4);
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3),i4);
} else {
if ((i3 < ((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3),i4);
} else {
if ((i3 < (((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,(((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3),i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,i3,((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4));
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,i3,(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4));
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,i3,((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4));
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,i3,(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4));
} else {
if ((i4 < ((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,i3,((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4));
} else {
if ((i4 < (((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,i3,(((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,i3,((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat20T444444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, uint64_t* inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, uint64_t* inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, uint64_t* inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, uint64_t* inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, uint64_t* inp17, int32_t inp18s1, int32_t inp18s2, int32_t inp18s3, int32_t inp18s4, uint64_t* inp18, int32_t inp19s1, int32_t inp19s2, int32_t inp19s3, int32_t inp19s4, uint64_t* inp19, int32_t inp20s1, int32_t inp20s2, int32_t inp20s3, int32_t inp20s4, uint64_t* inp20, int32_t axis, uint64_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,(((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,(((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2),i3,i4);
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2),i3,i4);
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2),i3,i4);
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,(((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,(((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3),i4);
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3),i4);
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3),i4);
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3),i4);
} else {
if ((i3 < ((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3),i4);
} else {
if ((i3 < (((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,(((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3),i4);
} else {
if ((i3 < ((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,i2,(((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3),i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,i3,((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4));
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,i3,(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4));
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,i3,((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4));
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,i3,(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4));
} else {
if ((i4 < ((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,i3,((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4));
} else {
if ((i4 < (((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,i3,(((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4));
} else {
if ((i4 < ((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,i3,((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,i2,i3,(((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat21T4444444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, uint64_t* inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, uint64_t* inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, uint64_t* inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, uint64_t* inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, uint64_t* inp17, int32_t inp18s1, int32_t inp18s2, int32_t inp18s3, int32_t inp18s4, uint64_t* inp18, int32_t inp19s1, int32_t inp19s2, int32_t inp19s3, int32_t inp19s4, uint64_t* inp19, int32_t inp20s1, int32_t inp20s2, int32_t inp20s3, int32_t inp20s4, uint64_t* inp20, int32_t inp21s1, int32_t inp21s2, int32_t inp21s3, int32_t inp21s4, uint64_t* inp21, int32_t axis, uint64_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,(((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,(((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2),i3,i4);
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2),i3,i4);
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2),i3,i4);
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,(((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,(((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3),i4);
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3),i4);
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3),i4);
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3),i4);
} else {
if ((i3 < ((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3),i4);
} else {
if ((i3 < (((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,(((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3),i4);
} else {
if ((i3 < ((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3),i4);
} else {
if ((i3 < (((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,i2,(((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,i2,((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3),i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,i3,((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4));
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,i3,(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4));
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,i3,((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4));
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,i3,(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4));
} else {
if ((i4 < ((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,i3,((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4));
} else {
if ((i4 < (((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,i3,(((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4));
} else {
if ((i4 < ((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,i3,((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4));
} else {
if ((i4 < (((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,i2,i3,(((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,i2,i3,((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat22T44444444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, uint64_t* inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, uint64_t* inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, uint64_t* inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, uint64_t* inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, uint64_t* inp17, int32_t inp18s1, int32_t inp18s2, int32_t inp18s3, int32_t inp18s4, uint64_t* inp18, int32_t inp19s1, int32_t inp19s2, int32_t inp19s3, int32_t inp19s4, uint64_t* inp19, int32_t inp20s1, int32_t inp20s2, int32_t inp20s3, int32_t inp20s4, uint64_t* inp20, int32_t inp21s1, int32_t inp21s2, int32_t inp21s3, int32_t inp21s4, uint64_t* inp21, int32_t inp22s1, int32_t inp22s2, int32_t inp22s3, int32_t inp22s4, uint64_t* inp22, int32_t axis, uint64_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,(((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,(((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,(((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2),i3,i4);
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2),i3,i4);
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2),i3,i4);
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,(((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,(((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,i1,(((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3),i4);
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3),i4);
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3),i4);
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3),i4);
} else {
if ((i3 < ((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3),i4);
} else {
if ((i3 < (((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,(((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3),i4);
} else {
if ((i3 < ((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3),i4);
} else {
if ((i3 < (((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,i2,(((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3),i4);
} else {
if ((i3 < ((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,i2,((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,i1,i2,(((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3),i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,i3,((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4));
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,i3,(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4));
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,i3,((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4));
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,i3,(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4));
} else {
if ((i4 < ((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,i3,((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4));
} else {
if ((i4 < (((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,i3,(((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4));
} else {
if ((i4 < ((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,i3,((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4));
} else {
if ((i4 < (((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,i2,i3,(((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4));
} else {
if ((i4 < ((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,i2,i3,((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,i1,i2,i3,(((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat23T444444444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, uint64_t* inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, uint64_t* inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, uint64_t* inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, uint64_t* inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, uint64_t* inp17, int32_t inp18s1, int32_t inp18s2, int32_t inp18s3, int32_t inp18s4, uint64_t* inp18, int32_t inp19s1, int32_t inp19s2, int32_t inp19s3, int32_t inp19s4, uint64_t* inp19, int32_t inp20s1, int32_t inp20s2, int32_t inp20s3, int32_t inp20s4, uint64_t* inp20, int32_t inp21s1, int32_t inp21s2, int32_t inp21s3, int32_t inp21s4, uint64_t* inp21, int32_t inp22s1, int32_t inp22s2, int32_t inp22s3, int32_t inp22s4, uint64_t* inp22, int32_t inp23s1, int32_t inp23s2, int32_t inp23s3, int32_t inp23s4, uint64_t* inp23, int32_t axis, uint64_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,(((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,(((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1) + inp22s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,(((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp23,inp23s1,inp23s2,inp23s3,inp23s4,((((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1) - inp22s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2),i3,i4);
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2),i3,i4);
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2),i3,i4);
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,(((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,(((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2) + inp22s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,i1,(((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp23,inp23s1,inp23s2,inp23s3,inp23s4,i1,((((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2) - inp22s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3),i4);
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3),i4);
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3),i4);
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3),i4);
} else {
if ((i3 < ((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3),i4);
} else {
if ((i3 < (((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,(((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3),i4);
} else {
if ((i3 < ((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3),i4);
} else {
if ((i3 < (((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,i2,(((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3),i4);
} else {
if ((i3 < ((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,i2,((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3),i4);
} else {
if ((i3 < (((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3) + inp22s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,i1,i2,(((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp23,inp23s1,inp23s2,inp23s3,inp23s4,i1,i2,((((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3) - inp22s3),i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,i3,((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4));
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,i3,(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4));
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,i3,((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4));
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,i3,(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4));
} else {
if ((i4 < ((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,i3,((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4));
} else {
if ((i4 < (((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,i3,(((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4));
} else {
if ((i4 < ((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,i3,((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4));
} else {
if ((i4 < (((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,i2,i3,(((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4));
} else {
if ((i4 < ((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,i2,i3,((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4));
} else {
if ((i4 < (((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4) + inp22s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,i1,i2,i3,(((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp23,inp23s1,inp23s2,inp23s3,inp23s4,i1,i2,i3,((((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4) - inp22s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat24T4444444444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, uint64_t* inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, uint64_t* inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, uint64_t* inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, uint64_t* inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, uint64_t* inp17, int32_t inp18s1, int32_t inp18s2, int32_t inp18s3, int32_t inp18s4, uint64_t* inp18, int32_t inp19s1, int32_t inp19s2, int32_t inp19s3, int32_t inp19s4, uint64_t* inp19, int32_t inp20s1, int32_t inp20s2, int32_t inp20s3, int32_t inp20s4, uint64_t* inp20, int32_t inp21s1, int32_t inp21s2, int32_t inp21s3, int32_t inp21s4, uint64_t* inp21, int32_t inp22s1, int32_t inp22s2, int32_t inp22s3, int32_t inp22s4, uint64_t* inp22, int32_t inp23s1, int32_t inp23s2, int32_t inp23s3, int32_t inp23s4, uint64_t* inp23, int32_t inp24s1, int32_t inp24s2, int32_t inp24s3, int32_t inp24s4, uint64_t* inp24, int32_t axis, uint64_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,(((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,(((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1) + inp22s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,(((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1) + inp22s1) + inp23s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp23,inp23s1,inp23s2,inp23s3,inp23s4,((((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1) - inp22s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp24,inp24s1,inp24s2,inp24s3,inp24s4,(((((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1) - inp22s1) - inp23s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2),i3,i4);
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2),i3,i4);
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2),i3,i4);
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,(((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,(((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2) + inp22s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,i1,(((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2) + inp22s2) + inp23s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp23,inp23s1,inp23s2,inp23s3,inp23s4,i1,((((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2) - inp22s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp24,inp24s1,inp24s2,inp24s3,inp24s4,i1,(((((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2) - inp22s2) - inp23s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3),i4);
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3),i4);
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3),i4);
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3),i4);
} else {
if ((i3 < ((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3),i4);
} else {
if ((i3 < (((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,(((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3),i4);
} else {
if ((i3 < ((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3),i4);
} else {
if ((i3 < (((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,i2,(((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3),i4);
} else {
if ((i3 < ((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,i2,((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3),i4);
} else {
if ((i3 < (((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3) + inp22s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,i1,i2,(((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3),i4);
} else {
if ((i3 < ((((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3) + inp22s3) + inp23s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp23,inp23s1,inp23s2,inp23s3,inp23s4,i1,i2,((((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3) - inp22s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp24,inp24s1,inp24s2,inp24s3,inp24s4,i1,i2,(((((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3) - inp22s3) - inp23s3),i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,i3,((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4));
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,i3,(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4));
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,i3,((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4));
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,i3,(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4));
} else {
if ((i4 < ((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,i3,((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4));
} else {
if ((i4 < (((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,i3,(((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4));
} else {
if ((i4 < ((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,i3,((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4));
} else {
if ((i4 < (((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,i2,i3,(((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4));
} else {
if ((i4 < ((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,i2,i3,((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4));
} else {
if ((i4 < (((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4) + inp22s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,i1,i2,i3,(((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4));
} else {
if ((i4 < ((((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4) + inp22s4) + inp23s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp23,inp23s1,inp23s2,inp23s3,inp23s4,i1,i2,i3,((((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4) - inp22s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp24,inp24s1,inp24s2,inp24s3,inp24s4,i1,i2,i3,(((((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4) - inp22s4) - inp23s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Concat25T44444444444444444444444444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, uint64_t* inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, uint64_t* inp2, int32_t inp3s1, int32_t inp3s2, int32_t inp3s3, int32_t inp3s4, uint64_t* inp3, int32_t inp4s1, int32_t inp4s2, int32_t inp4s3, int32_t inp4s4, uint64_t* inp4, int32_t inp5s1, int32_t inp5s2, int32_t inp5s3, int32_t inp5s4, uint64_t* inp5, int32_t inp6s1, int32_t inp6s2, int32_t inp6s3, int32_t inp6s4, uint64_t* inp6, int32_t inp7s1, int32_t inp7s2, int32_t inp7s3, int32_t inp7s4, uint64_t* inp7, int32_t inp8s1, int32_t inp8s2, int32_t inp8s3, int32_t inp8s4, uint64_t* inp8, int32_t inp9s1, int32_t inp9s2, int32_t inp9s3, int32_t inp9s4, uint64_t* inp9, int32_t inp10s1, int32_t inp10s2, int32_t inp10s3, int32_t inp10s4, uint64_t* inp10, int32_t inp11s1, int32_t inp11s2, int32_t inp11s3, int32_t inp11s4, uint64_t* inp11, int32_t inp12s1, int32_t inp12s2, int32_t inp12s3, int32_t inp12s4, uint64_t* inp12, int32_t inp13s1, int32_t inp13s2, int32_t inp13s3, int32_t inp13s4, uint64_t* inp13, int32_t inp14s1, int32_t inp14s2, int32_t inp14s3, int32_t inp14s4, uint64_t* inp14, int32_t inp15s1, int32_t inp15s2, int32_t inp15s3, int32_t inp15s4, uint64_t* inp15, int32_t inp16s1, int32_t inp16s2, int32_t inp16s3, int32_t inp16s4, uint64_t* inp16, int32_t inp17s1, int32_t inp17s2, int32_t inp17s3, int32_t inp17s4, uint64_t* inp17, int32_t inp18s1, int32_t inp18s2, int32_t inp18s3, int32_t inp18s4, uint64_t* inp18, int32_t inp19s1, int32_t inp19s2, int32_t inp19s3, int32_t inp19s4, uint64_t* inp19, int32_t inp20s1, int32_t inp20s2, int32_t inp20s3, int32_t inp20s4, uint64_t* inp20, int32_t inp21s1, int32_t inp21s2, int32_t inp21s3, int32_t inp21s4, uint64_t* inp21, int32_t inp22s1, int32_t inp22s2, int32_t inp22s3, int32_t inp22s4, uint64_t* inp22, int32_t inp23s1, int32_t inp23s2, int32_t inp23s3, int32_t inp23s4, uint64_t* inp23, int32_t inp24s1, int32_t inp24s2, int32_t inp24s3, int32_t inp24s4, uint64_t* inp24, int32_t inp25s1, int32_t inp25s2, int32_t inp25s3, int32_t inp25s4, uint64_t* inp25, int32_t axis, uint64_t* outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i1 < (inp1s1 + inp2s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,(i1 - inp1s1),i2,i3,i4);
} else {
if ((i1 < ((inp1s1 + inp2s1) + inp3s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,((i1 - inp1s1) - inp2s1),i2,i3,i4);
} else {
if ((i1 < (((inp1s1 + inp2s1) + inp3s1) + inp4s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,(((i1 - inp1s1) - inp2s1) - inp3s1),i2,i3,i4);
} else {
if ((i1 < ((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1),i2,i3,i4);
} else {
if ((i1 < (((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,(((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1),i2,i3,i4);
} else {
if ((i1 < ((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1),i2,i3,i4);
} else {
if ((i1 < (((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,(((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1),i2,i3,i4);
} else {
if ((i1 < ((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1),i2,i3,i4);
} else {
if ((i1 < (((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,(((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,(((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,(((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,(((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,(((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,(((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1) + inp22s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,(((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1),i2,i3,i4);
} else {
if ((i1 < ((((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1) + inp22s1) + inp23s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp23,inp23s1,inp23s2,inp23s3,inp23s4,((((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1) - inp22s1),i2,i3,i4);
} else {
if ((i1 < (((((((((((((((((((((((inp1s1 + inp2s1) + inp3s1) + inp4s1) + inp5s1) + inp6s1) + inp7s1) + inp8s1) + inp9s1) + inp10s1) + inp11s1) + inp12s1) + inp13s1) + inp14s1) + inp15s1) + inp16s1) + inp17s1) + inp18s1) + inp19s1) + inp20s1) + inp21s1) + inp22s1) + inp23s1) + inp24s1))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp24,inp24s1,inp24s2,inp24s3,inp24s4,(((((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1) - inp22s1) - inp23s1),i2,i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp25,inp25s1,inp25s2,inp25s3,inp25s4,((((((((((((((((((((((((i1 - inp1s1) - inp2s1) - inp3s1) - inp4s1) - inp5s1) - inp6s1) - inp7s1) - inp8s1) - inp9s1) - inp10s1) - inp11s1) - inp12s1) - inp13s1) - inp14s1) - inp15s1) - inp16s1) - inp17s1) - inp18s1) - inp19s1) - inp20s1) - inp21s1) - inp22s1) - inp23s1) - inp24s1),i2,i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i2 < (inp1s2 + inp2s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,(i2 - inp1s2),i3,i4);
} else {
if ((i2 < ((inp1s2 + inp2s2) + inp3s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,((i2 - inp1s2) - inp2s2),i3,i4);
} else {
if ((i2 < (((inp1s2 + inp2s2) + inp3s2) + inp4s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,(((i2 - inp1s2) - inp2s2) - inp3s2),i3,i4);
} else {
if ((i2 < ((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2),i3,i4);
} else {
if ((i2 < (((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,(((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2),i3,i4);
} else {
if ((i2 < ((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2),i3,i4);
} else {
if ((i2 < (((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,(((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2),i3,i4);
} else {
if ((i2 < ((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2),i3,i4);
} else {
if ((i2 < (((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,(((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2),i3,i4);
} else {
if ((i2 < ((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2),i3,i4);
} else {
if ((i2 < (((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,(((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2),i3,i4);
} else {
if ((i2 < ((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2),i3,i4);
} else {
if ((i2 < (((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,(((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2),i3,i4);
} else {
if ((i2 < ((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2),i3,i4);
} else {
if ((i2 < (((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,(((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,(((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,(((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2) + inp22s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,i1,(((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2),i3,i4);
} else {
if ((i2 < ((((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2) + inp22s2) + inp23s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp23,inp23s1,inp23s2,inp23s3,inp23s4,i1,((((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2) - inp22s2),i3,i4);
} else {
if ((i2 < (((((((((((((((((((((((inp1s2 + inp2s2) + inp3s2) + inp4s2) + inp5s2) + inp6s2) + inp7s2) + inp8s2) + inp9s2) + inp10s2) + inp11s2) + inp12s2) + inp13s2) + inp14s2) + inp15s2) + inp16s2) + inp17s2) + inp18s2) + inp19s2) + inp20s2) + inp21s2) + inp22s2) + inp23s2) + inp24s2))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp24,inp24s1,inp24s2,inp24s3,inp24s4,i1,(((((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2) - inp22s2) - inp23s2),i3,i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp25,inp25s1,inp25s2,inp25s3,inp25s4,i1,((((((((((((((((((((((((i2 - inp1s2) - inp2s2) - inp3s2) - inp4s2) - inp5s2) - inp6s2) - inp7s2) - inp8s2) - inp9s2) - inp10s2) - inp11s2) - inp12s2) - inp13s2) - inp14s2) - inp15s2) - inp16s2) - inp17s2) - inp18s2) - inp19s2) - inp20s2) - inp21s2) - inp22s2) - inp23s2) - inp24s2),i3,i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i3 < (inp1s3 + inp2s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,(i3 - inp1s3),i4);
} else {
if ((i3 < ((inp1s3 + inp2s3) + inp3s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,((i3 - inp1s3) - inp2s3),i4);
} else {
if ((i3 < (((inp1s3 + inp2s3) + inp3s3) + inp4s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,(((i3 - inp1s3) - inp2s3) - inp3s3),i4);
} else {
if ((i3 < ((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3),i4);
} else {
if ((i3 < (((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,(((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3),i4);
} else {
if ((i3 < ((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3),i4);
} else {
if ((i3 < (((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,(((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3),i4);
} else {
if ((i3 < ((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3),i4);
} else {
if ((i3 < (((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,(((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3),i4);
} else {
if ((i3 < ((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3),i4);
} else {
if ((i3 < (((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,(((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3),i4);
} else {
if ((i3 < ((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3),i4);
} else {
if ((i3 < (((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,(((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3),i4);
} else {
if ((i3 < ((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3),i4);
} else {
if ((i3 < (((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,(((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3),i4);
} else {
if ((i3 < ((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3),i4);
} else {
if ((i3 < (((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,(((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3),i4);
} else {
if ((i3 < ((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3),i4);
} else {
if ((i3 < (((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,i2,(((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3),i4);
} else {
if ((i3 < ((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,i2,((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3),i4);
} else {
if ((i3 < (((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3) + inp22s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,i1,i2,(((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3),i4);
} else {
if ((i3 < ((((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3) + inp22s3) + inp23s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp23,inp23s1,inp23s2,inp23s3,inp23s4,i1,i2,((((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3) - inp22s3),i4);
} else {
if ((i3 < (((((((((((((((((((((((inp1s3 + inp2s3) + inp3s3) + inp4s3) + inp5s3) + inp6s3) + inp7s3) + inp8s3) + inp9s3) + inp10s3) + inp11s3) + inp12s3) + inp13s3) + inp14s3) + inp15s3) + inp16s3) + inp17s3) + inp18s3) + inp19s3) + inp20s3) + inp21s3) + inp22s3) + inp23s3) + inp24s3))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp24,inp24s1,inp24s2,inp24s3,inp24s4,i1,i2,(((((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3) - inp22s3) - inp23s3),i4);
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp25,inp25s1,inp25s2,inp25s3,inp25s4,i1,i2,((((((((((((((((((((((((i3 - inp1s3) - inp2s3) - inp3s3) - inp4s3) - inp5s3) - inp6s3) - inp7s3) - inp8s3) - inp9s3) - inp10s3) - inp11s3) - inp12s3) - inp13s3) - inp14s3) - inp15s3) - inp16s3) - inp17s3) - inp18s3) - inp19s3) - inp20s3) - inp21s3) - inp22s3) - inp23s3) - inp24s3),i4);
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
} else {
if ((i4 < inp1s4)) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp1,inp1s1,inp1s2,inp1s3,inp1s4,i1,i2,i3,i4);
} else {
if ((i4 < (inp1s4 + inp2s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp2,inp2s1,inp2s2,inp2s3,inp2s4,i1,i2,i3,(i4 - inp1s4));
} else {
if ((i4 < ((inp1s4 + inp2s4) + inp3s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp3,inp3s1,inp3s2,inp3s3,inp3s4,i1,i2,i3,((i4 - inp1s4) - inp2s4));
} else {
if ((i4 < (((inp1s4 + inp2s4) + inp3s4) + inp4s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp4,inp4s1,inp4s2,inp4s3,inp4s4,i1,i2,i3,(((i4 - inp1s4) - inp2s4) - inp3s4));
} else {
if ((i4 < ((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp5,inp5s1,inp5s2,inp5s3,inp5s4,i1,i2,i3,((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4));
} else {
if ((i4 < (((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp6,inp6s1,inp6s2,inp6s3,inp6s4,i1,i2,i3,(((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4));
} else {
if ((i4 < ((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp7,inp7s1,inp7s2,inp7s3,inp7s4,i1,i2,i3,((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4));
} else {
if ((i4 < (((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp8,inp8s1,inp8s2,inp8s3,inp8s4,i1,i2,i3,(((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4));
} else {
if ((i4 < ((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp9,inp9s1,inp9s2,inp9s3,inp9s4,i1,i2,i3,((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4));
} else {
if ((i4 < (((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp10,inp10s1,inp10s2,inp10s3,inp10s4,i1,i2,i3,(((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4));
} else {
if ((i4 < ((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp11,inp11s1,inp11s2,inp11s3,inp11s4,i1,i2,i3,((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4));
} else {
if ((i4 < (((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp12,inp12s1,inp12s2,inp12s3,inp12s4,i1,i2,i3,(((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4));
} else {
if ((i4 < ((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp13,inp13s1,inp13s2,inp13s3,inp13s4,i1,i2,i3,((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4));
} else {
if ((i4 < (((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp14,inp14s1,inp14s2,inp14s3,inp14s4,i1,i2,i3,(((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4));
} else {
if ((i4 < ((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp15,inp15s1,inp15s2,inp15s3,inp15s4,i1,i2,i3,((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4));
} else {
if ((i4 < (((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp16,inp16s1,inp16s2,inp16s3,inp16s4,i1,i2,i3,(((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4));
} else {
if ((i4 < ((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp17,inp17s1,inp17s2,inp17s3,inp17s4,i1,i2,i3,((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4));
} else {
if ((i4 < (((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp18,inp18s1,inp18s2,inp18s3,inp18s4,i1,i2,i3,(((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4));
} else {
if ((i4 < ((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp19,inp19s1,inp19s2,inp19s3,inp19s4,i1,i2,i3,((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4));
} else {
if ((i4 < (((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp20,inp20s1,inp20s2,inp20s3,inp20s4,i1,i2,i3,(((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4));
} else {
if ((i4 < ((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp21,inp21s1,inp21s2,inp21s3,inp21s4,i1,i2,i3,((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4));
} else {
if ((i4 < (((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4) + inp22s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp22,inp22s1,inp22s2,inp22s3,inp22s4,i1,i2,i3,(((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4));
} else {
if ((i4 < ((((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4) + inp22s4) + inp23s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp23,inp23s1,inp23s2,inp23s3,inp23s4,i1,i2,i3,((((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4) - inp22s4));
} else {
if ((i4 < (((((((((((((((((((((((inp1s4 + inp2s4) + inp3s4) + inp4s4) + inp5s4) + inp6s4) + inp7s4) + inp8s4) + inp9s4) + inp10s4) + inp11s4) + inp12s4) + inp13s4) + inp14s4) + inp15s4) + inp16s4) + inp17s4) + inp18s4) + inp19s4) + inp20s4) + inp21s4) + inp22s4) + inp23s4) + inp24s4))) {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp24,inp24s1,inp24s2,inp24s3,inp24s4,i1,i2,i3,(((((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4) - inp22s4) - inp23s4));
} else {
Arr4DIdxRowM(outp,s1,s2,s3,s4,i1,i2,i3,i4) = Arr4DIdxRowM(inp25,inp25s1,inp25s2,inp25s3,inp25s4,i1,i2,i3,((((((((((((((((((((((((i4 - inp1s4) - inp2s4) - inp3s4) - inp4s4) - inp5s4) - inp6s4) - inp7s4) - inp8s4) - inp9s4) - inp10s4) - inp11s4) - inp12s4) - inp13s4) - inp14s4) - inp15s4) - inp16s4) - inp17s4) - inp18s4) - inp19s4) - inp20s4) - inp21s4) - inp22s4) - inp23s4) - inp24s4));
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

void Split44(int32_t O1, int32_t O2, int32_t O3, int32_t O4, int32_t I1, int32_t I2, int32_t I3, int32_t I4, uint64_t* inp, int32_t axis, int32_t curCount, int32_t total, uint64_t* out){
for (uint32_t o1 =  (int32_t)0; o1 < O1; o1++){
for (uint32_t o2 =  (int32_t)0; o2 < O2; o2++){
for (uint32_t o3 =  (int32_t)0; o3 < O3; o3++){
for (uint32_t o4 =  (int32_t)0; o4 < O4; o4++){

int32_t i1 = o1;

int32_t i2 = o2;

int32_t i3 = o3;

int32_t i4 = o4;
if ((axis ==  (int32_t)0)) {
i1 = (((I1 / total) * curCount) + o1);
}
if ((axis ==  (int32_t)1)) {
i2 = (((I2 / total) * curCount) + o2);
}
if ((axis ==  (int32_t)2)) {
i3 = (((I3 / total) * curCount) + o3);
}
if ((axis ==  (int32_t)3)) {
i4 = (((I4 / total) * curCount) + o4);
}
Arr4DIdxRowM(out,O1,O2,O3,O4,o1,o2,o3,o4) = Arr4DIdxRowM(inp,I1,I2,I3,I4,i1,i2,i3,i4);
}
}
}
}
}

void Conv2DReshapeFilter(int32_t FH, int32_t FW, int32_t CI, int32_t CO, uint64_t* inputArr, uint64_t* outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

int32_t linIdx = ((((fh * FW) * CI) + (fw * CI)) + ci);
Arr2DIdxRowM(outputArr,CO,((FH * FW) * CI),co,linIdx) = Arr4DIdxRowM(inputArr,FH,FW,CI,CO,fh,fw,ci,co);
}
}
}
}
}

void Conv2DReshapeMatMulOP(int32_t N, int32_t finalH, int32_t finalW, int32_t CO, uint64_t* inputArr, uint64_t* outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t h =  (int32_t)0; h < finalH; h++){
for (uint32_t w =  (int32_t)0; w < finalW; w++){
Arr4DIdxRowM(outputArr,N,finalH,finalW,CO,n,h,w,co) = Arr2DIdxRowM(inputArr,CO,((N * finalH) * finalW),co,((((n * finalH) * finalW) + (h * finalW)) + w));
}
}
}
}
}

void Conv2DReshapeInput(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, uint64_t* inputArr, uint64_t* outputArr){

int32_t linIdxFilterMult =  (int32_t)0;
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerH = ( (int32_t)0 - zPadHLeft);

int32_t extremeRightBottomCornerH = ((H -  (int32_t)1) + zPadHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadWLeft);

int32_t extremeRightBottomCornerW = ((W -  (int32_t)1) + zPadWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){
if ((((curPosH <  (int32_t)0) || (curPosH >= H)) || ((curPosW <  (int32_t)0) || (curPosW >= W)))) {
val = funcSSCons( (int64_t)0);
} else {
val = Arr4DIdxRowM(inputArr,N,H,W,CI,n,curPosH,curPosW,ci);
}
Arr2DIdxRowM(outputArr,RRows,RCols,((((fh * FW) * CI) + (fw * CI)) + ci),linIdxFilterMult) = val;
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW + strideW);
}

leftTopCornerH = (leftTopCornerH + strideH);
}

}
}

void Conv2D(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, uint64_t* inputArr, uint64_t* filterArr, uint64_t* outArr){

int32_t reshapedFilterRows = CO;

int32_t reshapedFilterCols = ((FH * FW) * CI);

int32_t reshapedIPRows = ((FH * FW) * CI);

int32_t newH = ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) +  (int32_t)1);

int32_t newW = ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) +  (int32_t)1);

int32_t reshapedIPCols = ((N * newH) * newW);

uint64_t* filterReshaped = make_array<uint64_t>(reshapedFilterRows, reshapedFilterCols);

uint64_t* inputReshaped = make_array<uint64_t>(reshapedIPRows, reshapedIPCols);

uint64_t* matmulOP = make_array<uint64_t>(reshapedFilterRows, reshapedIPCols);
Conv2DReshapeFilter(FH, FW, CI, CO, filterArr, filterReshaped);
Conv2DReshapeInput(N, H, W, CI, FH, FW, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
Conv2DReshapeMatMulOP(N, newH, newW, CO, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void Conv2DLoopInner(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t outH, int32_t outW, int32_t G, uint64_t* inputArr, uint64_t* filterArr, uint64_t* outArr){

int32_t GIS = (CI / G);

int32_t GOS = (CO / G);
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t cog =  (int32_t)0; cog < GOS; cog++){
for (uint32_t cig =  (int32_t)0; cig < GIS; cig++){
for (uint32_t g =  (int32_t)0; g < G; g++){
for (uint32_t h =  (int32_t)0; h < outH; h++){
for (uint32_t w =  (int32_t)0; w < outW; w++){

uint64_t val = funcSSCons( (int64_t)0);

int32_t ci = ((GIS * g) + cig);

int32_t co = ((GOS * g) + cog);

int32_t curPosH = ((strideH * h) - zPadHLeft);
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){

int32_t curPosW = ((strideW * w) - zPadWLeft);
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
if (((((curPosH >=  (int32_t)0) && (curPosW >=  (int32_t)0)) && (curPosH < H)) && (curPosW < W))) {
val = SecretAdd(val, SecretMult(Arr4DIdxRowM(inputArr,N,H,W,CI,n,curPosH,curPosW,ci), Arr4DIdxRowM(filterArr,FH,FW,(CI / G),CO,fh,fw,(ci / G),co)));
}
curPosW = (curPosW +  (int32_t)1);
}
curPosH = (curPosH +  (int32_t)1);
}
Arr4DIdxRowM(outArr,N,outH,outW,CO,n,h,w,co) = SecretAdd(Arr4DIdxRowM(outArr,N,outH,outW,CO,n,h,w,co), val);
}
}
}
}
}
}
}

void Conv2DLoop(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t G, uint64_t* inputArr, uint64_t* filterArr, uint64_t* outArr){

int32_t outH = ((((H - FH) + (zPadHLeft + zPadHRight)) / strideH) +  (int32_t)1);

int32_t outW = ((((W - FW) + (zPadWLeft + zPadWRight)) / strideW) +  (int32_t)1);
Conv2DLoopInner(N, H, W, CI, FH, FW, CO, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, outH, outW, G, inputArr, filterArr, outArr);
}

void Conv2DReshapeFilterGroup(int32_t FH, int32_t FW, int32_t CI, int32_t CO, int32_t g, int32_t G, uint64_t* inputArr, uint64_t* outputArr){

int32_t CIG = (CI / G);

int32_t COG = (CO / G);

int32_t startCO = (g * COG);
for (uint32_t co =  (int32_t)0; co < COG; co++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CIG; ci++){

int32_t linIdx = ((((fh * FW) * CIG) + (fw * CIG)) + ci);
Arr2DIdxRowM(outputArr,(CO / G),((FH * FW) * (CI / G)),co,linIdx) = Arr4DIdxRowM(inputArr,FH,FW,(CI / G),CO,fh,fw,ci,(co + startCO));
}
}
}
}
}

void Conv2DReshapeMatMulOPGroup(int32_t N, int32_t finalH, int32_t finalW, int32_t CO, int32_t g, int32_t G, uint64_t* inputArr, uint64_t* outputArr){

int32_t COG = (CO / G);

int32_t startCO = (g * COG);
for (uint32_t co =  (int32_t)0; co < COG; co++){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t h =  (int32_t)0; h < finalH; h++){
for (uint32_t w =  (int32_t)0; w < finalW; w++){
Arr4DIdxRowM(outputArr,N,finalH,finalW,CO,n,h,w,(co + startCO)) = Arr2DIdxRowM(inputArr,(CO / G),((N * finalH) * finalW),co,((((n * finalH) * finalW) + (h * finalW)) + w));
}
}
}
}
}

void Conv2DReshapeInputGroup(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t g, int32_t G, int32_t RRows, int32_t RCols, uint64_t* inputArr, uint64_t* outputArr){

int32_t linIdxFilterMult =  (int32_t)0;

int32_t CIG = (CI / G);
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerH = ( (int32_t)0 - zPadHLeft);

int32_t extremeRightBottomCornerH = ((H -  (int32_t)1) + zPadHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadWLeft);

int32_t extremeRightBottomCornerW = ((W -  (int32_t)1) + zPadWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);

int32_t startCI = (g * CIG);
for (uint32_t ci =  (int32_t)0; ci < CIG; ci++){
if ((((curPosH <  (int32_t)0) || (curPosH >= H)) || ((curPosW <  (int32_t)0) || (curPosW >= W)))) {
val = funcSSCons( (int64_t)0);
} else {
val = Arr4DIdxRowM(inputArr,N,H,W,CI,n,curPosH,curPosW,(ci + startCI));
}
Arr2DIdxRowM(outputArr,RRows,RCols,((((fh * FW) * CIG) + (fw * CIG)) + ci),linIdxFilterMult) = val;
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW + strideW);
}

leftTopCornerH = (leftTopCornerH + strideH);
}

}
}

void Conv2DGroup(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t G, uint64_t* inputArr, uint64_t* filterArr, uint64_t* outArr){

int32_t CIG = (CI / G);

int32_t reshapedFilterRows = (CO / G);

int32_t reshapedFilterCols = ((FH * FW) * CIG);

int32_t reshapedIPRows = ((FH * FW) * CIG);

int32_t outH = ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) +  (int32_t)1);

int32_t outW = ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) +  (int32_t)1);

int32_t reshapedIPCols = ((N * outH) * outW);
for (uint32_t g =  (int32_t)0; g < G; g++){

uint64_t* inputReshaped = make_array<uint64_t>(reshapedIPRows, reshapedIPCols);

uint64_t* matmulOP = make_array<uint64_t>(reshapedFilterRows, reshapedIPCols);

uint64_t* filterReshaped = make_array<uint64_t>(reshapedFilterRows, reshapedFilterCols);
Conv2DReshapeFilterGroup(FH, FW, CI, CO, g, G, filterArr, filterReshaped);
Conv2DReshapeInputGroup(N, H, W, CI, FH, FW, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, g, G, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
Conv2DReshapeMatMulOPGroup(N, outH, outW, CO, g, G, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}
}

void Conv3DReshapeFilter(int32_t FD, int32_t FH, int32_t FW, int32_t CI, int32_t CO, uint64_t* inputArr, uint64_t* outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t fd =  (int32_t)0; fd < FD; fd++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

int32_t linIdx = ((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci);
Arr2DIdxRowM(outputArr,CO,(((FD * FH) * FW) * CI),co,linIdx) = Arr5DIdxRowM(inputArr,FD,FH,FW,CI,CO,fd,fh,fw,ci,co);
}
}
}
}
}
}

void Conv3DReshapeMatMulOP(int32_t N, int32_t finalD, int32_t finalH, int32_t finalW, int32_t CO, uint64_t* inputArr, uint64_t* outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t d =  (int32_t)0; d < finalD; d++){
for (uint32_t h =  (int32_t)0; h < finalH; h++){
for (uint32_t w =  (int32_t)0; w < finalW; w++){
Arr5DIdxRowM(outputArr,N,finalD,finalH,finalW,CO,n,d,h,w,co) = Arr2DIdxRowM(inputArr,CO,(((N * finalD) * finalH) * finalW),co,((((((n * finalD) * finalH) * finalW) + ((d * finalH) * finalW)) + (h * finalW)) + w));
}
}
}
}
}
}

void Conv3DReshapeInput(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, uint64_t* inputArr, uint64_t* outputArr){

int32_t linIdxFilterMult =  (int32_t)0;
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerD = ( (int32_t)0 - zPadDLeft);

int32_t extremeRightBottomCornerD = ((D -  (int32_t)1) + zPadDRight);
while ((((leftTopCornerD + FD) -  (int32_t)1) <= extremeRightBottomCornerD)) {

int32_t leftTopCornerH = ( (int32_t)0 - zPadHLeft);

int32_t extremeRightBottomCornerH = ((H -  (int32_t)1) + zPadHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadWLeft);

int32_t extremeRightBottomCornerW = ((W -  (int32_t)1) + zPadWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fd =  (int32_t)0; fd < FD; fd++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosD = (leftTopCornerD + fd);

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){
if (((((curPosD <  (int32_t)0) || (curPosD >= D)) || ((curPosH <  (int32_t)0) || (curPosH >= H))) || ((curPosW <  (int32_t)0) || (curPosW >= W)))) {
val = funcSSCons( (int64_t)0);
} else {
val = Arr5DIdxRowM(inputArr,N,D,H,W,CI,n,curPosD,curPosH,curPosW,ci);
}
Arr2DIdxRowM(outputArr,RRows,RCols,((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci),linIdxFilterMult) = val;
}
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW + strideW);
}

leftTopCornerH = (leftTopCornerH + strideH);
}

leftTopCornerD = (leftTopCornerD + strideD);
}

}
}

void Conv3D(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, uint64_t* inputArr, uint64_t* filterArr, uint64_t* outArr){

int32_t reshapedFilterRows = CO;

int32_t reshapedFilterCols = (((FD * FH) * FW) * CI);

int32_t reshapedIPRows = (((FD * FH) * FW) * CI);

int32_t newD = ((((D + (zPadDLeft + zPadDRight)) - FD) / strideD) +  (int32_t)1);

int32_t newH = ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) +  (int32_t)1);

int32_t newW = ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) +  (int32_t)1);

int32_t reshapedIPCols = (((N * newD) * newH) * newW);

uint64_t* filterReshaped = make_array<uint64_t>(reshapedFilterRows, reshapedFilterCols);

uint64_t* inputReshaped = make_array<uint64_t>(reshapedIPRows, reshapedIPCols);

uint64_t* matmulOP = make_array<uint64_t>(reshapedFilterRows, reshapedIPCols);
Conv3DReshapeFilter(FD, FH, FW, CI, CO, filterArr, filterReshaped);
Conv3DReshapeInput(N, D, H, W, CI, FD, FH, FW, zPadDLeft, zPadDRight, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideD, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
Conv3DReshapeMatMulOP(N, newD, newH, newW, CO, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void Conv3DLoopInner(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, int32_t outD, int32_t outH, int32_t outW, uint64_t* inputArr, uint64_t* filterArr, uint64_t* outArr){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t d =  (int32_t)0; d < outD; d++){
for (uint32_t h =  (int32_t)0; h < outH; h++){
for (uint32_t w =  (int32_t)0; w < outW; w++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t fd = (d * strideD); fd < ((d * strideD) + FD); fd++){
for (uint32_t fh = (h * strideH); fh < ((h * strideH) + FH); fh++){
for (uint32_t fw = (w * strideW); fw < ((w * strideW) + FW); fw++){

int32_t curPosD = (fd - zPadDLeft);

int32_t curPosH = (fh - zPadHLeft);

int32_t curPosW = (fw - zPadWLeft);
if (((((((curPosD >=  (int32_t)0) && (curPosH >=  (int32_t)0)) && (curPosW >=  (int32_t)0)) && (curPosD < D)) && (curPosH < H)) && (curPosW < W))) {

int32_t curFilterPosD = (fd - (d * strideD));

int32_t curFilterPosH = (fh - (h * strideH));

int32_t curFilterPosW = (fw - (w * strideW));
val = SecretAdd(val, SecretMult(Arr5DIdxRowM(inputArr,N,D,H,W,CI,n,curPosD,curPosH,curPosW,ci), Arr5DIdxRowM(filterArr,FD,FH,FW,CI,CO,curFilterPosD,curFilterPosH,curFilterPosW,ci,co)));
}
}
}
}
Arr5DIdxRowM(outArr,N,outD,outH,outW,CO,n,d,h,w,co) = SecretAdd(Arr5DIdxRowM(outArr,N,outD,outH,outW,CO,n,d,h,w,co), val);
}
}
}
}
}
}
}

void Conv3DLoop(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, uint64_t* inputArr, uint64_t* filterArr, uint64_t* outArr){

int32_t outD = ((((D - FD) + (zPadDLeft + zPadDRight)) / strideD) +  (int32_t)1);

int32_t outH = ((((H - FH) + (zPadHLeft + zPadHRight)) / strideH) +  (int32_t)1);

int32_t outW = ((((W - FW) + (zPadWLeft + zPadWRight)) / strideW) +  (int32_t)1);
Conv3DLoopInner(N, D, H, W, CI, FD, FH, FW, CO, zPadDLeft, zPadDRight, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideD, strideH, strideW, outD, outH, outW, inputArr, filterArr, outArr);
}

void ConvTranspose2DReshapeMatMulOP(int32_t N, int32_t finalH, int32_t finalW, int32_t CO, uint64_t* inputArr, uint64_t* outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t h =  (int32_t)0; h < finalH; h++){
for (uint32_t w =  (int32_t)0; w < finalW; w++){
Arr4DIdxRowM(outputArr,N,finalH,finalW,CO,n,h,w,co) = Arr2DIdxRowM(inputArr,CO,((N * finalH) * finalW),co,((((n * finalH) * finalW) + (h * finalW)) + w));
}
}
}
}
}

void ConvTranspose2DReshapeFilter(int32_t FH, int32_t FW, int32_t CO, int32_t CI, uint64_t* inputArr, uint64_t* outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

int32_t linIdx = ((((fh * FW) * CI) + (fw * CI)) + ci);
Arr2DIdxRowM(outputArr,CO,((FH * FW) * CI),co,linIdx) = Arr4DIdxRowM(inputArr,FH,FW,CO,CI,((FH -  (int32_t)1) - fh),((FW -  (int32_t)1) - fw),co,ci);
}
}
}
}
}

void ConvTranspose2DReshapeInput(int32_t N, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FH, int32_t FW, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, uint64_t* inputArr, uint64_t* outputArr){

int32_t linIdxFilterMult =  (int32_t)0;
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerH = ( (int32_t)0 - zPadTrHLeft);

int32_t HPrimeTilde = (HPrime + ((HPrime -  (int32_t)1) * (strideH -  (int32_t)1)));

int32_t extremeRightBottomCornerH = ((HPrimeTilde -  (int32_t)1) + zPadTrHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadTrWLeft);

int32_t WPrimeTilde = (WPrime + ((WPrime -  (int32_t)1) * (strideW -  (int32_t)1)));

int32_t extremeRightBottomCornerW = ((WPrimeTilde -  (int32_t)1) + zPadTrWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){
if ((((curPosH <  (int32_t)0) || (curPosH >= HPrimeTilde)) || ((curPosW <  (int32_t)0) || (curPosW >= WPrimeTilde)))) {
val = funcSSCons( (int64_t)0);
} else {
if ((((curPosH % strideH) ==  (int32_t)0) && ((curPosW % strideW) ==  (int32_t)0))) {

int32_t idxInputH = (curPosH / strideH);

int32_t idxInputW = (curPosW / strideW);
val = Arr4DIdxRowM(inputArr,N,HPrime,WPrime,CI,n,idxInputH,idxInputW,ci);
} else {
val = funcSSCons( (int64_t)0);
}
}
Arr2DIdxRowM(outputArr,RRows,RCols,((((fh * FW) * CI) + (fw * CI)) + ci),linIdxFilterMult) = val;
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW +  (int32_t)1);
}

leftTopCornerH = (leftTopCornerH +  (int32_t)1);
}

}
}

void ConvTranspose2D(int32_t N, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t H, int32_t W, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideH, int32_t strideW, uint64_t* inputArr, uint64_t* filterArr, uint64_t* outArr){

int32_t reshapedFilterRows = CO;

int32_t reshapedFilterCols = ((FH * FW) * CI);

int32_t reshapedIPRows = ((FH * FW) * CI);

int32_t reshapedIPCols = ((N * H) * W);

uint64_t* filterReshaped = make_array<uint64_t>(reshapedFilterRows, reshapedFilterCols);

uint64_t* inputReshaped = make_array<uint64_t>(reshapedIPRows, reshapedIPCols);

uint64_t* matmulOP = make_array<uint64_t>(reshapedFilterRows, reshapedIPCols);
ConvTranspose2DReshapeFilter(FH, FW, CO, CI, filterArr, filterReshaped);
ConvTranspose2DReshapeInput(N, HPrime, WPrime, CI, FH, FW, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
ConvTranspose2DReshapeMatMulOP(N, H, W, CO, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void ConvTranspose3DReshapeFilter(int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t CI, uint64_t* inputArr, uint64_t* outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t fd =  (int32_t)0; fd < FD; fd++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

int32_t linIdx = ((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci);
Arr2DIdxRowM(outputArr,CO,(((FD * FH) * FW) * CI),co,linIdx) = Arr5DIdxRowM(inputArr,FD,FH,FW,CO,CI,((FD -  (int32_t)1) - fd),((FH -  (int32_t)1) - fh),((FW -  (int32_t)1) - fw),co,ci);
}
}
}
}
}
}

void ConvTranspose3DReshapeInput(int32_t N, int32_t DPrime, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t zPadTrDLeft, int32_t zPadTrDRight, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideD, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, uint64_t* inputArr, uint64_t* outputArr){

int32_t linIdxFilterMult =  (int32_t)0;
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerD = ( (int32_t)0 - zPadTrDLeft);

int32_t DPrimeTilde = (DPrime + ((DPrime -  (int32_t)1) * (strideD -  (int32_t)1)));

int32_t extremeRightBottomCornerD = ((DPrimeTilde -  (int32_t)1) + zPadTrDRight);
while ((((leftTopCornerD + FD) -  (int32_t)1) <= extremeRightBottomCornerD)) {

int32_t leftTopCornerH = ( (int32_t)0 - zPadTrHLeft);

int32_t HPrimeTilde = (HPrime + ((HPrime -  (int32_t)1) * (strideH -  (int32_t)1)));

int32_t extremeRightBottomCornerH = ((HPrimeTilde -  (int32_t)1) + zPadTrHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadTrWLeft);

int32_t WPrimeTilde = (WPrime + ((WPrime -  (int32_t)1) * (strideW -  (int32_t)1)));

int32_t extremeRightBottomCornerW = ((WPrimeTilde -  (int32_t)1) + zPadTrWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fd =  (int32_t)0; fd < FD; fd++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosD = (leftTopCornerD + fd);

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){
if (((((curPosD <  (int32_t)0) || (curPosD >= DPrimeTilde)) || ((curPosH <  (int32_t)0) || (curPosH >= HPrimeTilde))) || ((curPosW <  (int32_t)0) || (curPosW >= WPrimeTilde)))) {
val = funcSSCons( (int64_t)0);
} else {
if (((((curPosD % strideD) ==  (int32_t)0) && ((curPosH % strideH) ==  (int32_t)0)) && ((curPosW % strideW) ==  (int32_t)0))) {

int32_t idxInputD = (curPosD / strideD);

int32_t idxInputH = (curPosH / strideH);

int32_t idxInputW = (curPosW / strideW);
val = Arr5DIdxRowM(inputArr,N,DPrime,HPrime,WPrime,CI,n,idxInputD,idxInputH,idxInputW,ci);
} else {
val = funcSSCons( (int64_t)0);
}
}
Arr2DIdxRowM(outputArr,RRows,RCols,((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci),linIdxFilterMult) = val;
}
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW +  (int32_t)1);
}

leftTopCornerH = (leftTopCornerH +  (int32_t)1);
}

leftTopCornerD = (leftTopCornerD +  (int32_t)1);
}

}
}

void ConvTranspose3D(int32_t N, int32_t DPrime, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t D, int32_t H, int32_t W, int32_t zPadTrDLeft, int32_t zPadTrDRight, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideD, int32_t strideH, int32_t strideW, uint64_t* inputArr, uint64_t* filterArr, uint64_t* outArr){

int32_t reshapedFilterRows = CO;

int32_t reshapedFilterCols = (((FD * FH) * FW) * CI);

int32_t reshapedIPRows = (((FD * FH) * FW) * CI);

int32_t reshapedIPCols = (((N * D) * H) * W);

uint64_t* filterReshaped = make_array<uint64_t>(reshapedFilterRows, reshapedFilterCols);

uint64_t* inputReshaped = make_array<uint64_t>(reshapedIPRows, reshapedIPCols);

uint64_t* matmulOP = make_array<uint64_t>(reshapedFilterRows, reshapedIPCols);
ConvTranspose3DReshapeFilter(FD, FH, FW, CO, CI, filterArr, filterReshaped);
ConvTranspose3DReshapeInput(N, DPrime, HPrime, WPrime, CI, FD, FH, FW, zPadTrDLeft, zPadTrDRight, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideD, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
Conv3DReshapeMatMulOP(N, D, H, W, CO, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void ConvTranspose3DLoopInner(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, int32_t outD, int32_t outH, int32_t outW, uint64_t* inputArr, uint64_t* filterArr, uint64_t* outArr){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t d =  (int32_t)0; d < outD; d++){
for (uint32_t h =  (int32_t)0; h < outH; h++){
for (uint32_t w =  (int32_t)0; w < outW; w++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t fd = d; fd < (d + FD); fd++){
for (uint32_t fh = h; fh < (h + FH); fh++){
for (uint32_t fw = w; fw < (w + FW); fw++){

int32_t curPosD = ((fd - zPadDLeft) / strideD);

int32_t curPosH = ((fh - zPadHLeft) / strideH);

int32_t curPosW = ((fw - zPadWLeft) / strideW);
if ((((((((((curPosD >=  (int32_t)0) && (curPosH >=  (int32_t)0)) && (curPosW >=  (int32_t)0)) && (curPosD < D)) && (curPosH < H)) && (curPosW < W)) && (((fd - zPadDLeft) % strideD) ==  (int32_t)0)) && (((fh - zPadHLeft) % strideH) ==  (int32_t)0)) && (((fw - zPadWLeft) % strideW) ==  (int32_t)0))) {

int32_t curFilterPosD = (((FD + d) - fd) -  (int32_t)1);

int32_t curFilterPosH = (((FH + h) - fh) -  (int32_t)1);

int32_t curFilterPosW = (((FW + w) - fw) -  (int32_t)1);
val = SecretAdd(val, SecretMult(Arr5DIdxRowM(inputArr,N,D,H,W,CI,n,curPosD,curPosH,curPosW,ci), Arr5DIdxRowM(filterArr,FD,FH,FW,CO,CI,curFilterPosD,curFilterPosH,curFilterPosW,co,ci)));
}
}
}
}
Arr5DIdxRowM(outArr,N,outD,outH,outW,CO,n,d,h,w,co) = SecretAdd(Arr5DIdxRowM(outArr,N,outD,outH,outW,CO,n,d,h,w,co), val);
}
}
}
}
}
}
}

void ConvTranspose3DLoop(int32_t N, int32_t DPrime, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t D, int32_t H, int32_t W, int32_t zPadTrDLeft, int32_t zPadTrDRight, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideD, int32_t strideH, int32_t strideW, uint64_t* inputArr, uint64_t* filterArr, uint64_t* outArr){
ConvTranspose3DLoopInner(N, DPrime, HPrime, WPrime, CI, FD, FH, FW, CO, zPadTrDLeft, zPadTrDRight, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideD, strideH, strideW, D, H, W, inputArr, filterArr, outArr);
}

void Transpose2(int32_t s1, int32_t s2, uint64_t* inArr, uint64_t* outArr){
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
Arr2DIdxRowM(outArr,s1,s2,i,j) = Arr2DIdxRowM(inArr,s2,s1,j,i);
}
}
}

void Pad442(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inps1, int32_t inps2, int32_t inps3, int32_t inps4, uint64_t* inpArr, int32_t pads1, int32_t pads2, int32_t* paddings, uint64_t* outArr){

int32_t lbounds1 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)0, (int32_t)0);

int32_t rbounds1excl = (s1 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)0, (int32_t)1));

int32_t lbounds2 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)1, (int32_t)0);

int32_t rbounds2excl = (s2 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)1, (int32_t)1));

int32_t lbounds3 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)2, (int32_t)0);

int32_t rbounds3excl = (s3 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)2, (int32_t)1));

int32_t lbounds4 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)3, (int32_t)0);

int32_t rbounds4excl = (s4 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)3, (int32_t)1));
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
if (((((((((i >= lbounds1) && (i < rbounds1excl)) && (j >= lbounds2)) && (j < rbounds2excl)) && (k >= lbounds3)) && (k < rbounds3excl)) && (l >= lbounds4)) && (l < rbounds4excl))) {
Arr4DIdxRowM(outArr,s1,s2,s3,s4,i,j,k,l) = Arr4DIdxRowM(inpArr,inps1,inps2,inps3,inps4,(i - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)0, (int32_t)0)),(j - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)1, (int32_t)0)),(k - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)2, (int32_t)0)),(l - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)3, (int32_t)0)));
} else {
Arr4DIdxRowM(outArr,s1,s2,s3,s4,i,j,k,l) = funcSSCons( (int64_t)0);
}
}
}
}
}
}

void Pad552(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, int32_t inps1, int32_t inps2, int32_t inps3, int32_t inps4, int32_t inps5, uint64_t* inpArr, int32_t pads1, int32_t pads2, int32_t* paddings, uint64_t* outArr){

int32_t lbounds1 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)0, (int32_t)0);

int32_t rbounds1excl = (s1 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)0, (int32_t)1));

int32_t lbounds2 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)1, (int32_t)0);

int32_t rbounds2excl = (s2 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)1, (int32_t)1));

int32_t lbounds3 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)2, (int32_t)0);

int32_t rbounds3excl = (s3 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)2, (int32_t)1));

int32_t lbounds4 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)3, (int32_t)0);

int32_t rbounds4excl = (s4 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)3, (int32_t)1));

int32_t lbounds5 = Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)4, (int32_t)0);

int32_t rbounds5excl = (s5 - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)4, (int32_t)1));
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
for (uint32_t m =  (int32_t)0; m < s5; m++){
if (((((((((((i >= lbounds1) && (i < rbounds1excl)) && (j >= lbounds2)) && (j < rbounds2excl)) && (k >= lbounds3)) && (k < rbounds3excl)) && (l >= lbounds4)) && (l < rbounds4excl)) && (m >= lbounds5)) && (m < rbounds5excl))) {
Arr5DIdxRowM(outArr,s1,s2,s3,s4,s5,i,j,k,l,m) = Arr5DIdxRowM(inpArr,inps1,inps2,inps3,inps4,inps5,(i - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)0, (int32_t)0)),(j - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)1, (int32_t)0)),(k - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)2, (int32_t)0)),(l - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)3, (int32_t)0)),(m - Arr2DIdxRowM(paddings,pads1,pads2, (int32_t)4, (int32_t)0)));
} else {
Arr5DIdxRowM(outArr,s1,s2,s3,s4,s5,i,j,k,l,m) = funcSSCons( (int64_t)0);
}
}
}
}
}
}
}

void PadONNX441(int32_t o1, int32_t o2, int32_t o3, int32_t o4, int32_t i1, int32_t i2, int32_t i3, int32_t i4, uint64_t* inpArr, int32_t pads, int32_t* paddings, uint64_t* outArr){

int32_t lbounds1 = Arr1DIdxRowM(paddings,pads, (int32_t)0);

int32_t rbounds1excl = (o1 - Arr1DIdxRowM(paddings,pads, (int32_t)4));

int32_t lbounds2 = Arr1DIdxRowM(paddings,pads, (int32_t)1);

int32_t rbounds2excl = (o2 - Arr1DIdxRowM(paddings,pads, (int32_t)5));

int32_t lbounds3 = Arr1DIdxRowM(paddings,pads, (int32_t)2);

int32_t rbounds3excl = (o3 - Arr1DIdxRowM(paddings,pads, (int32_t)6));

int32_t lbounds4 = Arr1DIdxRowM(paddings,pads, (int32_t)3);

int32_t rbounds4excl = (o4 - Arr1DIdxRowM(paddings,pads, (int32_t)7));
for (uint32_t i =  (int32_t)0; i < o1; i++){
for (uint32_t j =  (int32_t)0; j < o2; j++){
for (uint32_t k =  (int32_t)0; k < o3; k++){
for (uint32_t l =  (int32_t)0; l < o4; l++){
if (((((((((i >= lbounds1) && (i < rbounds1excl)) && (j >= lbounds2)) && (j < rbounds2excl)) && (k >= lbounds3)) && (k < rbounds3excl)) && (l >= lbounds4)) && (l < rbounds4excl))) {
Arr4DIdxRowM(outArr,o1,o2,o3,o4,i,j,k,l) = Arr4DIdxRowM(inpArr,i1,i2,i3,i4,(i - Arr1DIdxRowM(paddings,pads, (int32_t)0)),(j - Arr1DIdxRowM(paddings,pads, (int32_t)1)),(k - Arr1DIdxRowM(paddings,pads, (int32_t)2)),(l - Arr1DIdxRowM(paddings,pads, (int32_t)3)));
} else {
Arr4DIdxRowM(outArr,o1,o2,o3,o4,i,j,k,l) = funcSSCons( (int64_t)0);
}
}
}
}
}
}

void Squeeze24(int32_t s1, int32_t s2, int32_t dim1, int32_t dim2, int32_t ins1, int32_t ins2, int32_t ins3, int32_t ins4, uint64_t* inArr, uint64_t* outArr){
for (uint32_t i =  (int32_t)0; i < ins1; i++){
for (uint32_t j =  (int32_t)0; j < ins2; j++){
for (uint32_t k =  (int32_t)0; k < ins3; k++){
for (uint32_t l =  (int32_t)0; l < ins4; l++){

int32_t linIdx = ((((((i * ins2) * ins3) * ins4) + ((j * ins3) * ins4)) + (k * ins4)) + l);

int32_t outIdx1 = (linIdx / s2);

int32_t outIdx2 = (linIdx % s2);
Arr2DIdxRowM(outArr,s1,s2,outIdx1,outIdx2) = Arr4DIdxRowM(inArr,ins1,ins2,ins3,ins4,i,j,k,l);
}
}
}
}
}

void Squeeze34(int32_t s1, int32_t s2, int32_t s3, int32_t dim, int32_t ins1, int32_t ins2, int32_t ins3, int32_t ins4, uint64_t* inArr, uint64_t* outArr){
for (uint32_t i =  (int32_t)0; i < ins1; i++){
for (uint32_t j =  (int32_t)0; j < ins2; j++){
for (uint32_t k =  (int32_t)0; k < ins3; k++){
for (uint32_t l =  (int32_t)0; l < ins4; l++){

int32_t linIdx = ((((((i * ins2) * ins3) * ins4) + ((j * ins3) * ins4)) + (k * ins4)) + l);

int32_t outIdx1 = (linIdx / (s2 * s3));

int32_t outIdx2 = ((linIdx - ((outIdx1 * s2) * s3)) / s3);

int32_t outIdx3 = ((linIdx - ((outIdx1 * s2) * s3)) - (outIdx2 * s3));
Arr3DIdxRowM(outArr,s1,s2,s3,outIdx1,outIdx2,outIdx3) = Arr4DIdxRowM(inArr,ins1,ins2,ins3,ins4,i,j,k,l);
}
}
}
}
}

void Squeeze23(int32_t s1, int32_t s2, int32_t dim, int32_t ins1, int32_t ins2, int32_t ins3, uint64_t* inArr, uint64_t* outArr){
for (uint32_t i =  (int32_t)0; i < ins1; i++){
for (uint32_t j =  (int32_t)0; j < ins2; j++){
for (uint32_t k =  (int32_t)0; k < ins3; k++){

int32_t linIdx = ((((i * ins2) * ins3) + (j * ins3)) + k);

int32_t outIdx1 = (linIdx / s2);

int32_t outIdx2 = (linIdx % s2);
Arr2DIdxRowM(outArr,s1,s2,outIdx1,outIdx2) = Arr3DIdxRowM(inArr,ins1,ins2,ins3,i,j,k);
}
}
}
}

void FusedBatchNorm4411(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint64_t* inArr, uint64_t* multArr, uint64_t* biasArr, int32_t multExprScaleDownSf, int32_t biasExprScaleUpSf, uint64_t* outputArr){

int32_t inpSize = (((s1 * s2) * s3) * s4);

uint64_t* inArrReshaped = make_array<uint64_t>(inpSize);

uint64_t* multArrReshaped = make_array<uint64_t>(inpSize);

uint64_t* multExprAns = make_array<uint64_t>(inpSize);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr1DIdxRowM(inArrReshaped,inpSize,linIdx) = Arr4DIdxRowM(inArr,s1,s2,s3,s4,i1,i2,i3,i4);
Arr1DIdxRowM(multArrReshaped,inpSize,linIdx) = Arr1DIdxRowM(multArr,s4,i4);
}
}
}
}
ElemWiseActModelVectorMult(inpSize, inArrReshaped, multArrReshaped, multExprAns);
if ((multExprScaleDownSf >  (int32_t)0)) {
ScaleDown(inpSize, multExprAns, multExprScaleDownSf);
}

uint64_t* biasArrScaledUp = make_array<uint64_t>(s4);
for (uint32_t ii =  (int32_t)0; ii < s4; ii++){
Arr1DIdxRowM(biasArrScaledUp,s4,ii) = Arr1DIdxRowM(biasArr,s4,ii);
}
if ((biasExprScaleUpSf >  (int32_t)0)) {
ScaleUp(s4, biasArrScaledUp, biasExprScaleUpSf);
}
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr4DIdxRowM(outputArr,s1,s2,s3,s4,i1,i2,i3,i4) = SecretAdd(Arr1DIdxRowM(multExprAns,inpSize,linIdx), Arr1DIdxRowM(biasArrScaledUp,s4,i4));
}
}
}
}
ClearMemSecret1(inpSize, inArrReshaped);
ClearMemSecret1(inpSize, multArrReshaped);
ClearMemSecret1(inpSize, multExprAns);
ClearMemSecret1(s4, biasArrScaledUp);
}

void FusedBatchNorm5511(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, uint64_t* inArr, uint64_t* multArr, uint64_t* biasArr, int32_t multExprScaleDownSf, int32_t biasExprScaleUpSf, uint64_t* outputArr){

int32_t inpSize = ((((s1 * s2) * s3) * s4) * s5);

uint64_t* inArrReshaped = make_array<uint64_t>(inpSize);

uint64_t* multArrReshaped = make_array<uint64_t>(inpSize);

uint64_t* multExprAns = make_array<uint64_t>(inpSize);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
Arr1DIdxRowM(inArrReshaped,inpSize,linIdx) = Arr5DIdxRowM(inArr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5);
Arr1DIdxRowM(multArrReshaped,inpSize,linIdx) = Arr1DIdxRowM(multArr,s5,i5);
}
}
}
}
}
ElemWiseActModelVectorMult(inpSize, inArrReshaped, multArrReshaped, multExprAns);
if ((multExprScaleDownSf >  (int32_t)0)) {
ScaleDown(inpSize, multExprAns, multExprScaleDownSf);
}

uint64_t* biasArrScaledUp = make_array<uint64_t>(s5);
for (uint32_t ii =  (int32_t)0; ii < s5; ii++){
Arr1DIdxRowM(biasArrScaledUp,s5,ii) = Arr1DIdxRowM(biasArr,s5,ii);
}
if ((biasExprScaleUpSf >  (int32_t)0)) {
ScaleUp(s5, biasArrScaledUp, biasExprScaleUpSf);
}
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
Arr5DIdxRowM(outputArr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5) = SecretAdd(Arr1DIdxRowM(multExprAns,inpSize,linIdx), Arr1DIdxRowM(biasArrScaledUp,s5,i5));
}
}
}
}
}
ClearMemSecret1(inpSize, inArrReshaped);
ClearMemSecret1(inpSize, multArrReshaped);
ClearMemSecret1(inpSize, multExprAns);
ClearMemSecret1(s5, biasArrScaledUp);
}

void ElemWiseMul2(int32_t s1, int32_t s2, uint64_t* arr1, uint64_t* arr2, uint64_t* outArr){

int32_t inpSize = (s1 * s2);

uint64_t* arr1Reshaped = make_array<uint64_t>(inpSize);

uint64_t* arr2Reshaped = make_array<uint64_t>(inpSize);

uint64_t* outArrReshaped = make_array<uint64_t>(inpSize);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
Arr1DIdxRowM(arr1Reshaped,inpSize,linIdx) = Arr2DIdxRowM(arr1,s1,s2,i1,i2);
Arr1DIdxRowM(arr2Reshaped,inpSize,linIdx) = Arr2DIdxRowM(arr2,s1,s2,i1,i2);
}
}
ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped, outArrReshaped);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
Arr2DIdxRowM(outArr,s1,s2,i1,i2) = Arr1DIdxRowM(outArrReshaped,inpSize,linIdx);
}
}
ClearMemSecret1(inpSize, arr1Reshaped);
ClearMemSecret1(inpSize, arr2Reshaped);
ClearMemSecret1(inpSize, outArrReshaped);
}

void ElemWiseMul4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint64_t* arr1, uint64_t* arr2, uint64_t* outArr){

int32_t inpSize = (((s1 * s2) * s3) * s4);

uint64_t* arr1Reshaped = make_array<uint64_t>(inpSize);

uint64_t* arr2Reshaped = make_array<uint64_t>(inpSize);

uint64_t* outArrReshaped = make_array<uint64_t>(inpSize);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr1DIdxRowM(arr1Reshaped,inpSize,linIdx) = Arr4DIdxRowM(arr1,s1,s2,s3,s4,i1,i2,i3,i4);
Arr1DIdxRowM(arr2Reshaped,inpSize,linIdx) = Arr4DIdxRowM(arr2,s1,s2,s3,s4,i1,i2,i3,i4);
}
}
}
}
ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped, outArrReshaped);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr4DIdxRowM(outArr,s1,s2,s3,s4,i1,i2,i3,i4) = Arr1DIdxRowM(outArrReshaped,inpSize,linIdx);
}
}
}
}
ClearMemSecret1(inpSize, arr1Reshaped);
ClearMemSecret1(inpSize, arr2Reshaped);
ClearMemSecret1(inpSize, outArrReshaped);
}

void ElemWiseMul5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, uint64_t* arr1, uint64_t* arr2, uint64_t* outArr){

int32_t inpSize = ((((s1 * s2) * s3) * s4) * s5);

uint64_t* arr1Reshaped = make_array<uint64_t>(inpSize);

uint64_t* arr2Reshaped = make_array<uint64_t>(inpSize);

uint64_t* outArrReshaped = make_array<uint64_t>(inpSize);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
Arr1DIdxRowM(arr1Reshaped,inpSize,linIdx) = Arr5DIdxRowM(arr1,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5);
Arr1DIdxRowM(arr2Reshaped,inpSize,linIdx) = Arr5DIdxRowM(arr2,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5);
}
}
}
}
}
ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped, outArrReshaped);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
Arr5DIdxRowM(outArr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5) = Arr1DIdxRowM(outArrReshaped,inpSize,linIdx);
}
}
}
}
}
ClearMemSecret1(inpSize, arr1Reshaped);
ClearMemSecret1(inpSize, arr2Reshaped);
ClearMemSecret1(inpSize, outArrReshaped);
}

void ReduceMean24(int32_t outS1, int32_t outS2, int32_t inS1, int32_t inS2, int32_t inS3, int32_t inS4, uint64_t* inputArr, int32_t* axes, uint64_t* outputArr){

int32_t divisor = (inS2 * inS3);

int32_t outputSize = (outS1 * outS2);

uint64_t* sumArr = make_array<uint64_t>(outputSize);

uint64_t* outputArrReshaped = make_array<uint64_t>(outputSize);
for (uint32_t i1 =  (int32_t)0; i1 < outS1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < outS2; i2++){

uint64_t summ = funcSSCons( (int64_t)0);
for (uint32_t i =  (int32_t)0; i < inS2; i++){
for (uint32_t j =  (int32_t)0; j < inS3; j++){
summ = SecretAdd(summ, Arr4DIdxRowM(inputArr,inS1,inS2,inS3,inS4,i1,i,j,i2));
}
}
Arr1DIdxRowM(sumArr,outputSize,((i1 * outS2) + i2)) = summ;
}
}
ElemWiseVectorPublicDiv(outputSize, sumArr, divisor, outputArrReshaped);
for (uint32_t i1 =  (int32_t)0; i1 < outS1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < outS2; i2++){
Arr2DIdxRowM(outputArr,outS1,outS2,i1,i2) = Arr1DIdxRowM(outputArrReshaped,outputSize,((i1 * outS2) + i2));
}
}
ClearMemSecret1(outputSize, sumArr);
ClearMemSecret1(outputSize, outputArrReshaped);
}

void ReduceMeanONNX24(int32_t outS1, int32_t outS2, int32_t inS1, int32_t inS2, int32_t inS3, int32_t inS4, uint64_t* inputArr, int32_t axis1, int32_t axis2, uint64_t* outputArr){

int32_t divisor = (inS3 * inS4);

int32_t outputSize = (outS1 * outS2);

uint64_t* sumArr = make_array<uint64_t>(outputSize);

uint64_t* outputArrReshaped = make_array<uint64_t>(outputSize);
for (uint32_t i1 =  (int32_t)0; i1 < outS1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < outS2; i2++){

uint64_t summ = funcSSCons( (int64_t)0);
for (uint32_t i =  (int32_t)0; i < inS3; i++){
for (uint32_t j =  (int32_t)0; j < inS4; j++){
summ = SecretAdd(summ, Arr4DIdxRowM(inputArr,inS1,inS2,inS3,inS4,i1,i2,i,j));
}
}
Arr1DIdxRowM(sumArr,outputSize,((i1 * outS2) + i2)) = summ;
}
}
ElemWiseVectorPublicDiv(outputSize, sumArr, divisor, outputArrReshaped);
for (uint32_t i1 =  (int32_t)0; i1 < outS1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < outS2; i2++){
Arr2DIdxRowM(outputArr,outS1,outS2,i1,i2) = Arr1DIdxRowM(outputArrReshaped,outputSize,((i1 * outS2) + i2));
}
}
ClearMemSecret1(outputSize, sumArr);
ClearMemSecret1(outputSize, outputArrReshaped);
}

void ArgMax1(int32_t outArrS1, int32_t inArrS1, int32_t inArrS2, uint64_t* inArr, int32_t dim, uint64_t* outArr){
ArgMax(inArrS1, inArrS2, inArr, outArr);
}

void ArgMax3(int32_t outs1, int32_t outs2, int32_t outs3, int32_t ins1, int32_t ins2, int32_t ins3, int32_t ins4, uint64_t* inArr, int32_t dim, uint64_t* outArr){

int32_t size = ((ins1 * ins2) * ins3);

uint64_t* reshapedInArr = make_array<uint64_t>(size, ins4);

uint64_t* reshapedOutArr = make_array<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < ins1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < ins2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < ins3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < ins4; i4++){

int32_t linIdx = ((((i1 * ins2) * ins3) + (i2 * ins3)) + i3);
Arr2DIdxRowM(reshapedInArr,size,ins4,linIdx,i4) = Arr4DIdxRowM(inArr,ins1,ins2,ins3,ins4,i1,i2,i3,i4);
}
}
}
}
ArgMax(size, ins4, reshapedInArr, reshapedOutArr);
for (uint32_t i1 =  (int32_t)0; i1 < ins1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < ins2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < ins3; i3++){

int32_t linIdx = ((((i1 * ins2) * ins3) + (i2 * ins3)) + i3);
Arr3DIdxRowM(outArr,outs1,outs2,outs3,i1,i2,i3) = Arr1DIdxRowM(reshapedOutArr,size,linIdx);
}
}
}
ClearMemSecret2(size, ins4, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void Relu1(int32_t s1, uint64_t* inArr, uint64_t* outArr, int32_t sf, uint32_t doTruncation){
Relu(s1, inArr, outArr, sf, doTruncation);
}

void Relu2(int32_t s1, int32_t s2, uint64_t* inArr, uint64_t* outArr, int32_t sf, uint32_t doTruncation){

int32_t size = (s1 * s2);

uint64_t* reshapedInArr = make_array<uint64_t>(size);

uint64_t* reshapedOutArr = make_array<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
Arr1DIdxRowM(reshapedInArr,size,linIdx) = Arr2DIdxRowM(inArr,s1,s2,i1,i2);
}
}
Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
Arr2DIdxRowM(outArr,s1,s2,i1,i2) = Arr1DIdxRowM(reshapedOutArr,size,linIdx);
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void Relu4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint64_t* inArr, uint64_t* outArr, int32_t sf, uint32_t doTruncation){

int32_t size = (((s1 * s2) * s3) * s4);

uint64_t* reshapedInArr = make_array<uint64_t>(size);

uint64_t* reshapedOutArr = make_array<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr1DIdxRowM(reshapedInArr,size,linIdx) = Arr4DIdxRowM(inArr,s1,s2,s3,s4,i1,i2,i3,i4);
}
}
}
}
Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr4DIdxRowM(outArr,s1,s2,s3,s4,i1,i2,i3,i4) = Arr1DIdxRowM(reshapedOutArr,size,linIdx);
}
}
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void Relu5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, uint64_t* inArr, uint64_t* outArr, int32_t sf, uint32_t doTruncation){

int32_t size = ((((s1 * s2) * s3) * s4) * s5);

uint64_t* reshapedInArr = make_array<uint64_t>(size);

uint64_t* reshapedOutArr = make_array<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
Arr1DIdxRowM(reshapedInArr,size,linIdx) = Arr5DIdxRowM(inArr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5);
}
}
}
}
}
Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
Arr5DIdxRowM(outArr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5) = Arr1DIdxRowM(reshapedOutArr,size,linIdx);
}
}
}
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void HardSigmoid1(int32_t s1, uint64_t* inArr, uint64_t* outArr, int32_t sf, uint32_t doTruncation){
HardSigmoid(s1, inArr, outArr, sf, doTruncation);
}

void HardSigmoid2(int32_t s1, int32_t s2, uint64_t* inArr, uint64_t* outArr, int32_t sf, uint32_t doTruncation){

int32_t size = (s1 * s2);

uint64_t* reshapedInArr = make_array<uint64_t>(size);

uint64_t* reshapedOutArr = make_array<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
Arr1DIdxRowM(reshapedInArr,size,linIdx) = Arr2DIdxRowM(inArr,s1,s2,i1,i2);
}
}
HardSigmoid(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
Arr2DIdxRowM(outArr,s1,s2,i1,i2) = Arr1DIdxRowM(reshapedOutArr,size,linIdx);
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void HardSigmoid3(int32_t s1, int32_t s2, int32_t s3, uint64_t* inArr, uint64_t* outArr, int32_t sf, uint32_t doTruncation){

int32_t size = ((s1 * s2) * s3);

uint64_t* reshapedInArr = make_array<uint64_t>(size);

uint64_t* reshapedOutArr = make_array<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){

int32_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
Arr1DIdxRowM(reshapedInArr,size,linIdx) = Arr3DIdxRowM(inArr,s1,s2,s3,i1,i2,i3);
}
}
}
HardSigmoid(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){

int32_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
Arr3DIdxRowM(outArr,s1,s2,s3,i1,i2,i3) = Arr1DIdxRowM(reshapedOutArr,size,linIdx);
}
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void HardSigmoid4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint64_t* inArr, uint64_t* outArr, int32_t sf, uint32_t doTruncation){

int32_t size = (((s1 * s2) * s3) * s4);

uint64_t* reshapedInArr = make_array<uint64_t>(size);

uint64_t* reshapedOutArr = make_array<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr1DIdxRowM(reshapedInArr,size,linIdx) = Arr4DIdxRowM(inArr,s1,s2,s3,s4,i1,i2,i3,i4);
}
}
}
}
HardSigmoid(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr4DIdxRowM(outArr,s1,s2,s3,s4,i1,i2,i3,i4) = Arr1DIdxRowM(reshapedOutArr,size,linIdx);
}
}
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void Floor2(int32_t s1, int32_t s2, uint64_t* inArr, uint64_t* outArr, int32_t sf){

int32_t size = (s1 * s2);

uint64_t* reshapedInArr = make_array<uint64_t>(size);

uint64_t* reshapedOutArr = make_array<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
Arr1DIdxRowM(reshapedInArr,size,linIdx) = Arr2DIdxRowM(inArr,s1,s2,i1,i2);
}
}
Floor(size, reshapedInArr, reshapedOutArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
Arr2DIdxRowM(outArr,s1,s2,i1,i2) = Arr1DIdxRowM(reshapedOutArr,size,linIdx);
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void ScaleUp1(int32_t s1, uint64_t* arr, int32_t sf){
ScaleUp(s1, arr, sf);
}

void ScaleUp2(int32_t s1, int32_t s2, uint64_t* arr, int32_t sf){

int32_t size = (s1 * s2);

uint64_t* reshapedArr = make_array<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
Arr1DIdxRowM(reshapedArr,size,linIdx) = Arr2DIdxRowM(arr,s1,s2,i1,i2);
}
}
ScaleUp(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
Arr2DIdxRowM(arr,s1,s2,i1,i2) = Arr1DIdxRowM(reshapedArr,size,linIdx);
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleUp3(int32_t s1, int32_t s2, int32_t s3, uint64_t* arr, int32_t sf){

int32_t size = ((s1 * s2) * s3);

uint64_t* reshapedArr = make_array<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){

int32_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
Arr1DIdxRowM(reshapedArr,size,linIdx) = Arr3DIdxRowM(arr,s1,s2,s3,i1,i2,i3);
}
}
}
ScaleUp(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){

int32_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
Arr3DIdxRowM(arr,s1,s2,s3,i1,i2,i3) = Arr1DIdxRowM(reshapedArr,size,linIdx);
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleUp4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint64_t* arr, int32_t sf){

int32_t size = (((s1 * s2) * s3) * s4);

uint64_t* reshapedArr = make_array<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr1DIdxRowM(reshapedArr,size,linIdx) = Arr4DIdxRowM(arr,s1,s2,s3,s4,i1,i2,i3,i4);
}
}
}
}
ScaleUp(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr4DIdxRowM(arr,s1,s2,s3,s4,i1,i2,i3,i4) = Arr1DIdxRowM(reshapedArr,size,linIdx);
}
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleUp5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, uint64_t* arr, int32_t sf){

int32_t size = ((((s1 * s2) * s3) * s4) * s5);

uint64_t* reshapedArr = make_array<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
Arr1DIdxRowM(reshapedArr,size,linIdx) = Arr5DIdxRowM(arr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5);
}
}
}
}
}
ScaleUp(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
Arr5DIdxRowM(arr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5) = Arr1DIdxRowM(reshapedArr,size,linIdx);
}
}
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleDown1(int32_t s1, uint64_t* arr, int32_t sf){
ScaleDown(s1, arr, sf);
}

void ScaleDown2(int32_t s1, int32_t s2, uint64_t* arr, int32_t sf){

int32_t size = (s1 * s2);

uint64_t* reshapedArr = make_array<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
Arr1DIdxRowM(reshapedArr,size,linIdx) = Arr2DIdxRowM(arr,s1,s2,i1,i2);
}
}
ScaleDown(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
Arr2DIdxRowM(arr,s1,s2,i1,i2) = Arr1DIdxRowM(reshapedArr,size,linIdx);
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleDown3(int32_t s1, int32_t s2, int32_t s3, uint64_t* arr, int32_t sf){

int32_t size = ((s1 * s2) * s3);

uint64_t* reshapedArr = make_array<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){

int32_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
Arr1DIdxRowM(reshapedArr,size,linIdx) = Arr3DIdxRowM(arr,s1,s2,s3,i1,i2,i3);
}
}
}
ScaleDown(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){

int32_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
Arr3DIdxRowM(arr,s1,s2,s3,i1,i2,i3) = Arr1DIdxRowM(reshapedArr,size,linIdx);
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleDown4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint64_t* arr, int32_t sf){

int32_t size = (((s1 * s2) * s3) * s4);

uint64_t* reshapedArr = make_array<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr1DIdxRowM(reshapedArr,size,linIdx) = Arr4DIdxRowM(arr,s1,s2,s3,s4,i1,i2,i3,i4);
}
}
}
}
ScaleDown(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
Arr4DIdxRowM(arr,s1,s2,s3,s4,i1,i2,i3,i4) = Arr1DIdxRowM(reshapedArr,size,linIdx);
}
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleDown5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, uint64_t* arr, int32_t sf){

int32_t size = ((((s1 * s2) * s3) * s4) * s5);

uint64_t* reshapedArr = make_array<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
Arr1DIdxRowM(reshapedArr,size,linIdx) = Arr5DIdxRowM(arr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5);
}
}
}
}
}
ScaleDown(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
Arr5DIdxRowM(arr,s1,s2,s3,s4,s5,i1,i2,i3,i4,i5) = Arr1DIdxRowM(reshapedArr,size,linIdx);
}
}
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void Tanh1(int32_t s1, uint64_t* inp, uint64_t* out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, int32_t LUTBITS){
TanhImpl(LUTBITS, s1, sA, sB, bwA, bwB, inp, out);
}

void Tanh2(int32_t s1, int32_t s2, uint64_t* inp, uint64_t* out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, int32_t LUTBITS){

int32_t size = (s1 * s2);

uint64_t* inpCopy = make_array<uint64_t>(size);

uint64_t* outCopy = make_array<uint64_t>(size);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
Arr1DIdxRowM(inpCopy,size,((i * s1) + j)) = Arr2DIdxRowM(inp,s1,s2,i,j);
}
}
TanhImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
Arr2DIdxRowM(out,s1,s2,i,j) = Arr1DIdxRowM(outCopy,size,((i * s2) + j));
}
}
}

void Tanh3(int32_t s1, int32_t s2, int32_t s3, uint64_t* inp, uint64_t* out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, int32_t LUTBITS){

int32_t size = ((s1 * s2) * s3);

uint64_t* inpCopy = make_array<uint64_t>(size);

uint64_t* outCopy = make_array<uint64_t>(size);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
Arr1DIdxRowM(inpCopy,size,((((i * s2) * s3) + (j * s3)) + k)) = Arr3DIdxRowM(inp,s1,s2,s3,i,j,k);
}
}
}
TanhImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
Arr3DIdxRowM(out,s1,s2,s3,i,j,k) = Arr1DIdxRowM(outCopy,size,((((i * s2) * s3) + (j * s3)) + k));
}
}
}
}

void Tanh4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint64_t* inp, uint64_t* out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, int32_t LUTBITS){

int32_t size = (((s1 * s2) * s3) * s4);

uint64_t* inpCopy = make_array<uint64_t>(size);

uint64_t* outCopy = make_array<uint64_t>(size);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
Arr1DIdxRowM(inpCopy,size,((((((i * s2) * s3) * s4) + ((j * s3) * s4)) + (k * s4)) + l)) = Arr4DIdxRowM(inp,s1,s2,s3,s4,i,j,k,l);
}
}
}
}
TanhImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
Arr4DIdxRowM(out,s1,s2,s3,s4,i,j,k,l) = Arr1DIdxRowM(inpCopy,size,((((((i * s2) * s3) * s4) + ((j * s3) * s4)) + (k * s4)) + l));
}
}
}
}
}

void Sigmoid1(int32_t s1, uint64_t* inp, uint64_t* out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, int32_t LUTBITS){
SigmoidImpl(LUTBITS, s1, sA, sB, bwA, bwB, inp, out);
}

void Sigmoid2(int32_t s1, int32_t s2, uint64_t* inp, uint64_t* out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, int32_t LUTBITS){

int32_t size = (s1 * s2);

uint64_t* inpCopy = make_array<uint64_t>(size);

uint64_t* outCopy = make_array<uint64_t>(size);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
Arr1DIdxRowM(inpCopy,size,((i * s1) + j)) = Arr2DIdxRowM(inp,s1,s2,i,j);
}
}
SigmoidImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
Arr2DIdxRowM(out,s1,s2,i,j) = Arr1DIdxRowM(outCopy,size,((i * s2) + j));
}
}
}

void Sigmoid3(int32_t s1, int32_t s2, int32_t s3, uint64_t* inp, uint64_t* out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, int32_t LUTBITS){

int32_t size = ((s1 * s2) * s3);

uint64_t* inpCopy = make_array<uint64_t>(size);

uint64_t* outCopy = make_array<uint64_t>(size);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
Arr1DIdxRowM(inpCopy,size,((((i * s2) * s3) + (j * s3)) + k)) = Arr3DIdxRowM(inp,s1,s2,s3,i,j,k);
}
}
}
SigmoidImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
Arr3DIdxRowM(out,s1,s2,s3,i,j,k) = Arr1DIdxRowM(outCopy,size,((((i * s2) * s3) + (j * s3)) + k));
}
}
}
}

void Sigmoid4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint64_t* inp, uint64_t* out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, int32_t LUTBITS){

int32_t size = (((s1 * s2) * s3) * s4);

uint64_t* inpCopy = make_array<uint64_t>(size);

uint64_t* outCopy = make_array<uint64_t>(size);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
Arr1DIdxRowM(inpCopy,size,((((((i * s2) * s3) * s4) + ((j * s3) * s4)) + (k * s4)) + l)) = Arr4DIdxRowM(inp,s1,s2,s3,s4,i,j,k,l);
}
}
}
}
SigmoidImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
Arr4DIdxRowM(out,s1,s2,s3,s4,i,j,k,l) = Arr1DIdxRowM(inpCopy,size,((((((i * s2) * s3) * s4) + ((j * s3) * s4)) + (k * s4)) + l));
}
}
}
}
}

void Sqrt1(int32_t s1, uint64_t* inp, uint64_t* out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, uint32_t inverse, int32_t LUTBITS){
SqrtImpl(LUTBITS, s1, sA, sB, bwA, bwB, inverse, inp, out);
}

void Sqrt2(int32_t s1, int32_t s2, uint64_t* inp, uint64_t* out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, uint32_t inverse, int32_t LUTBITS){

int32_t size = (s1 * s2);

uint64_t* inpCopy = make_array<uint64_t>(size);

uint64_t* outCopy = make_array<uint64_t>(size);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
Arr1DIdxRowM(inpCopy,size,((i * s1) + j)) = Arr2DIdxRowM(inp,s1,s2,i,j);
}
}
SqrtImpl(LUTBITS, size, sA, sB, bwA, bwB, inverse, inpCopy, outCopy);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
Arr2DIdxRowM(out,s1,s2,i,j) = Arr1DIdxRowM(outCopy,size,((i * s2) + j));
}
}
}

void Sqrt3(int32_t s1, int32_t s2, int32_t s3, uint64_t* inp, uint64_t* out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, uint32_t inverse, int32_t LUTBITS){

int32_t size = ((s1 * s2) * s3);

uint64_t* inpCopy = make_array<uint64_t>(size);

uint64_t* outCopy = make_array<uint64_t>(size);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
Arr1DIdxRowM(inpCopy,size,((((i * s2) * s3) + (j * s3)) + k)) = Arr3DIdxRowM(inp,s1,s2,s3,i,j,k);
}
}
}
SqrtImpl(LUTBITS, size, sA, sB, bwA, bwB, inverse, inpCopy, outCopy);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
Arr3DIdxRowM(out,s1,s2,s3,i,j,k) = Arr1DIdxRowM(outCopy,size,((((i * s2) * s3) + (j * s3)) + k));
}
}
}
}

void Sqrt4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, uint64_t* inp, uint64_t* out, int32_t sA, int32_t sB, int32_t bwA, int32_t bwB, uint32_t inverse, int32_t LUTBITS){

int32_t size = (((s1 * s2) * s3) * s4);

uint64_t* inpCopy = make_array<uint64_t>(size);

uint64_t* outCopy = make_array<uint64_t>(size);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
Arr1DIdxRowM(inpCopy,size,((((((i * s2) * s3) * s4) + ((j * s3) * s4)) + (k * s4)) + l)) = Arr4DIdxRowM(inp,s1,s2,s3,s4,i,j,k,l);
}
}
}
}
SqrtImpl(LUTBITS, size, sA, sB, bwA, bwB, inverse, inpCopy, outCopy);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
Arr4DIdxRowM(out,s1,s2,s3,s4,i,j,k,l) = Arr1DIdxRowM(inpCopy,size,((((((i * s2) * s3) * s4) + ((j * s3) * s4)) + (k * s4)) + l));
}
}
}
}
}


int main(int argc, char** argv)
{
ArgMapping amap;
amap.arg("r", party, "Role of party: ALICE/SERVER = 1; BOB/CLIENT = 2");
amap.arg("p", port, "Port Number");
amap.arg("ip", address, "IP Address of server (ALICE)");
amap.arg("nt", num_threads, "Number of Threads");
amap.arg("ell", bitlength, "Uniform Bitwidth");
amap.arg("k", kScale, "bits of scale");
amap.parse(argc, argv);

assert(party==SERVER || party==CLIENT);



uint64_t* tmp0 = make_array<uint64_t>( (int32_t)1,  (int32_t)3,  (int32_t)224,  (int32_t)224);
/* Variable to read the clear value corresponding to the input variable tmp0 at (9027,1-9027,46) */
uint64_t __tmp_in_tmp0;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)224; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)224; i3++){
if ((party == CLIENT)) {
cin >> __tmp_in_tmp0;
}
Arr4DIdxRowM(tmp0, (int32_t)1, (int32_t)3, (int32_t)224, (int32_t)224,i0,i1,i2,i3) = (party == CLIENT) ? __tmp_in_tmp0 : 0;
}
}
}
}

uint64_t* tmp1 = make_array<uint64_t>( (int32_t)1000,  (int32_t)1280);
/* Variable to read the clear value corresponding to the input variable tmp1 at (9030,1-9030,42) */
uint64_t __tmp_in_tmp1;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1000; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1280; i1++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp1;
}
Arr2DIdxRowM(tmp1, (int32_t)1000, (int32_t)1280,i0,i1) = (party == SERVER) ? __tmp_in_tmp1 : 0;
}
}

uint64_t* tmp2 = make_array<uint64_t>( (int32_t)1000);
/* Variable to read the clear value corresponding to the input variable tmp2 at (9033,1-9033,36) */
uint64_t __tmp_in_tmp2;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1000; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp2;
}
Arr1DIdxRowM(tmp2, (int32_t)1000,i0) = (party == SERVER) ? __tmp_in_tmp2 : 0;
}

uint64_t* tmp3 = make_array<uint64_t>( (int32_t)32,  (int32_t)3,  (int32_t)3,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp3 at (9036,1-9036,43) */
uint64_t __tmp_in_tmp3;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)32; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)3; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp3;
}
Arr4DIdxRowM(tmp3, (int32_t)32, (int32_t)3, (int32_t)3, (int32_t)3,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp3 : 0;
}
}
}
}

uint64_t* tmp4 = make_array<uint64_t>( (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp4 at (9039,1-9039,34) */
uint64_t __tmp_in_tmp4;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)32; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp4;
}
Arr1DIdxRowM(tmp4, (int32_t)32,i0) = (party == SERVER) ? __tmp_in_tmp4 : 0;
}

uint64_t* tmp5 = make_array<uint64_t>( (int32_t)32,  (int32_t)1,  (int32_t)3,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp5 at (9042,1-9042,43) */
uint64_t __tmp_in_tmp5;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)32; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)3; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp5;
}
Arr4DIdxRowM(tmp5, (int32_t)32, (int32_t)1, (int32_t)3, (int32_t)3,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp5 : 0;
}
}
}
}

uint64_t* tmp6 = make_array<uint64_t>( (int32_t)32);
/* Variable to read the clear value corresponding to the input variable tmp6 at (9045,1-9045,34) */
uint64_t __tmp_in_tmp6;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)32; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp6;
}
Arr1DIdxRowM(tmp6, (int32_t)32,i0) = (party == SERVER) ? __tmp_in_tmp6 : 0;
}

uint64_t* tmp7 = make_array<uint64_t>( (int32_t)16,  (int32_t)32,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp7 at (9048,1-9048,44) */
uint64_t __tmp_in_tmp7;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)16; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)32; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp7;
}
Arr4DIdxRowM(tmp7, (int32_t)16, (int32_t)32, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp7 : 0;
}
}
}
}

uint64_t* tmp8 = make_array<uint64_t>( (int32_t)16);
/* Variable to read the clear value corresponding to the input variable tmp8 at (9051,1-9051,34) */
uint64_t __tmp_in_tmp8;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)16; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp8;
}
Arr1DIdxRowM(tmp8, (int32_t)16,i0) = (party == SERVER) ? __tmp_in_tmp8 : 0;
}

uint64_t* tmp9 = make_array<uint64_t>( (int32_t)48,  (int32_t)16,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp9 at (9054,1-9054,44) */
uint64_t __tmp_in_tmp9;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)48; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)16; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp9;
}
Arr4DIdxRowM(tmp9, (int32_t)48, (int32_t)16, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp9 : 0;
}
}
}
}

uint64_t* tmp10 = make_array<uint64_t>( (int32_t)48);
/* Variable to read the clear value corresponding to the input variable tmp10 at (9057,1-9057,35) */
uint64_t __tmp_in_tmp10;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)48; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp10;
}
Arr1DIdxRowM(tmp10, (int32_t)48,i0) = (party == SERVER) ? __tmp_in_tmp10 : 0;
}

uint64_t* tmp11 = make_array<uint64_t>( (int32_t)48,  (int32_t)1,  (int32_t)3,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp11 at (9060,1-9060,44) */
uint64_t __tmp_in_tmp11;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)48; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)3; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp11;
}
Arr4DIdxRowM(tmp11, (int32_t)48, (int32_t)1, (int32_t)3, (int32_t)3,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp11 : 0;
}
}
}
}

uint64_t* tmp12 = make_array<uint64_t>( (int32_t)48);
/* Variable to read the clear value corresponding to the input variable tmp12 at (9063,1-9063,35) */
uint64_t __tmp_in_tmp12;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)48; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp12;
}
Arr1DIdxRowM(tmp12, (int32_t)48,i0) = (party == SERVER) ? __tmp_in_tmp12 : 0;
}

uint64_t* tmp13 = make_array<uint64_t>( (int32_t)24,  (int32_t)48,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp13 at (9066,1-9066,45) */
uint64_t __tmp_in_tmp13;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)24; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)48; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp13;
}
Arr4DIdxRowM(tmp13, (int32_t)24, (int32_t)48, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp13 : 0;
}
}
}
}

uint64_t* tmp14 = make_array<uint64_t>( (int32_t)24);
/* Variable to read the clear value corresponding to the input variable tmp14 at (9069,1-9069,35) */
uint64_t __tmp_in_tmp14;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)24; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp14;
}
Arr1DIdxRowM(tmp14, (int32_t)24,i0) = (party == SERVER) ? __tmp_in_tmp14 : 0;
}

uint64_t* tmp15 = make_array<uint64_t>( (int32_t)72,  (int32_t)24,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp15 at (9072,1-9072,45) */
uint64_t __tmp_in_tmp15;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)72; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)24; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp15;
}
Arr4DIdxRowM(tmp15, (int32_t)72, (int32_t)24, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp15 : 0;
}
}
}
}

uint64_t* tmp16 = make_array<uint64_t>( (int32_t)72);
/* Variable to read the clear value corresponding to the input variable tmp16 at (9075,1-9075,35) */
uint64_t __tmp_in_tmp16;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)72; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp16;
}
Arr1DIdxRowM(tmp16, (int32_t)72,i0) = (party == SERVER) ? __tmp_in_tmp16 : 0;
}

uint64_t* tmp17 = make_array<uint64_t>( (int32_t)72,  (int32_t)1,  (int32_t)3,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp17 at (9078,1-9078,44) */
uint64_t __tmp_in_tmp17;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)72; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)3; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp17;
}
Arr4DIdxRowM(tmp17, (int32_t)72, (int32_t)1, (int32_t)3, (int32_t)3,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp17 : 0;
}
}
}
}

uint64_t* tmp18 = make_array<uint64_t>( (int32_t)72);
/* Variable to read the clear value corresponding to the input variable tmp18 at (9081,1-9081,35) */
uint64_t __tmp_in_tmp18;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)72; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp18;
}
Arr1DIdxRowM(tmp18, (int32_t)72,i0) = (party == SERVER) ? __tmp_in_tmp18 : 0;
}

uint64_t* tmp19 = make_array<uint64_t>( (int32_t)24,  (int32_t)72,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp19 at (9084,1-9084,45) */
uint64_t __tmp_in_tmp19;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)24; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)72; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp19;
}
Arr4DIdxRowM(tmp19, (int32_t)24, (int32_t)72, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp19 : 0;
}
}
}
}

uint64_t* tmp20 = make_array<uint64_t>( (int32_t)24);
/* Variable to read the clear value corresponding to the input variable tmp20 at (9087,1-9087,35) */
uint64_t __tmp_in_tmp20;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)24; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp20;
}
Arr1DIdxRowM(tmp20, (int32_t)24,i0) = (party == SERVER) ? __tmp_in_tmp20 : 0;
}

uint64_t* tmp21 = make_array<uint64_t>( (int32_t)72,  (int32_t)24,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp21 at (9090,1-9090,45) */
uint64_t __tmp_in_tmp21;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)72; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)24; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp21;
}
Arr4DIdxRowM(tmp21, (int32_t)72, (int32_t)24, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp21 : 0;
}
}
}
}

uint64_t* tmp22 = make_array<uint64_t>( (int32_t)72);
/* Variable to read the clear value corresponding to the input variable tmp22 at (9093,1-9093,35) */
uint64_t __tmp_in_tmp22;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)72; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp22;
}
Arr1DIdxRowM(tmp22, (int32_t)72,i0) = (party == SERVER) ? __tmp_in_tmp22 : 0;
}

uint64_t* tmp23 = make_array<uint64_t>( (int32_t)72,  (int32_t)1,  (int32_t)3,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp23 at (9096,1-9096,44) */
uint64_t __tmp_in_tmp23;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)72; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)3; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp23;
}
Arr4DIdxRowM(tmp23, (int32_t)72, (int32_t)1, (int32_t)3, (int32_t)3,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp23 : 0;
}
}
}
}

uint64_t* tmp24 = make_array<uint64_t>( (int32_t)72);
/* Variable to read the clear value corresponding to the input variable tmp24 at (9099,1-9099,35) */
uint64_t __tmp_in_tmp24;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)72; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp24;
}
Arr1DIdxRowM(tmp24, (int32_t)72,i0) = (party == SERVER) ? __tmp_in_tmp24 : 0;
}

uint64_t* tmp25 = make_array<uint64_t>( (int32_t)24,  (int32_t)72,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp25 at (9102,1-9102,45) */
uint64_t __tmp_in_tmp25;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)24; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)72; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp25;
}
Arr4DIdxRowM(tmp25, (int32_t)24, (int32_t)72, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp25 : 0;
}
}
}
}

uint64_t* tmp26 = make_array<uint64_t>( (int32_t)24);
/* Variable to read the clear value corresponding to the input variable tmp26 at (9105,1-9105,35) */
uint64_t __tmp_in_tmp26;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)24; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp26;
}
Arr1DIdxRowM(tmp26, (int32_t)24,i0) = (party == SERVER) ? __tmp_in_tmp26 : 0;
}

uint64_t* tmp27 = make_array<uint64_t>( (int32_t)72,  (int32_t)24,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp27 at (9108,1-9108,45) */
uint64_t __tmp_in_tmp27;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)72; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)24; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp27;
}
Arr4DIdxRowM(tmp27, (int32_t)72, (int32_t)24, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp27 : 0;
}
}
}
}

uint64_t* tmp28 = make_array<uint64_t>( (int32_t)72);
/* Variable to read the clear value corresponding to the input variable tmp28 at (9111,1-9111,35) */
uint64_t __tmp_in_tmp28;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)72; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp28;
}
Arr1DIdxRowM(tmp28, (int32_t)72,i0) = (party == SERVER) ? __tmp_in_tmp28 : 0;
}

uint64_t* tmp29 = make_array<uint64_t>( (int32_t)72,  (int32_t)1,  (int32_t)5,  (int32_t)5);
/* Variable to read the clear value corresponding to the input variable tmp29 at (9114,1-9114,44) */
uint64_t __tmp_in_tmp29;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)72; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)5; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)5; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp29;
}
Arr4DIdxRowM(tmp29, (int32_t)72, (int32_t)1, (int32_t)5, (int32_t)5,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp29 : 0;
}
}
}
}

uint64_t* tmp30 = make_array<uint64_t>( (int32_t)72);
/* Variable to read the clear value corresponding to the input variable tmp30 at (9117,1-9117,35) */
uint64_t __tmp_in_tmp30;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)72; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp30;
}
Arr1DIdxRowM(tmp30, (int32_t)72,i0) = (party == SERVER) ? __tmp_in_tmp30 : 0;
}

uint64_t* tmp31 = make_array<uint64_t>( (int32_t)40,  (int32_t)72,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp31 at (9120,1-9120,45) */
uint64_t __tmp_in_tmp31;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)40; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)72; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp31;
}
Arr4DIdxRowM(tmp31, (int32_t)40, (int32_t)72, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp31 : 0;
}
}
}
}

uint64_t* tmp32 = make_array<uint64_t>( (int32_t)40);
/* Variable to read the clear value corresponding to the input variable tmp32 at (9123,1-9123,35) */
uint64_t __tmp_in_tmp32;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)40; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp32;
}
Arr1DIdxRowM(tmp32, (int32_t)40,i0) = (party == SERVER) ? __tmp_in_tmp32 : 0;
}

uint64_t* tmp33 = make_array<uint64_t>( (int32_t)120,  (int32_t)40,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp33 at (9126,1-9126,46) */
uint64_t __tmp_in_tmp33;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)120; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)40; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp33;
}
Arr4DIdxRowM(tmp33, (int32_t)120, (int32_t)40, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp33 : 0;
}
}
}
}

uint64_t* tmp34 = make_array<uint64_t>( (int32_t)120);
/* Variable to read the clear value corresponding to the input variable tmp34 at (9129,1-9129,36) */
uint64_t __tmp_in_tmp34;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)120; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp34;
}
Arr1DIdxRowM(tmp34, (int32_t)120,i0) = (party == SERVER) ? __tmp_in_tmp34 : 0;
}

uint64_t* tmp35 = make_array<uint64_t>( (int32_t)120,  (int32_t)1,  (int32_t)5,  (int32_t)5);
/* Variable to read the clear value corresponding to the input variable tmp35 at (9132,1-9132,45) */
uint64_t __tmp_in_tmp35;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)120; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)5; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)5; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp35;
}
Arr4DIdxRowM(tmp35, (int32_t)120, (int32_t)1, (int32_t)5, (int32_t)5,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp35 : 0;
}
}
}
}

uint64_t* tmp36 = make_array<uint64_t>( (int32_t)120);
/* Variable to read the clear value corresponding to the input variable tmp36 at (9135,1-9135,36) */
uint64_t __tmp_in_tmp36;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)120; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp36;
}
Arr1DIdxRowM(tmp36, (int32_t)120,i0) = (party == SERVER) ? __tmp_in_tmp36 : 0;
}

uint64_t* tmp37 = make_array<uint64_t>( (int32_t)40,  (int32_t)120,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp37 at (9138,1-9138,46) */
uint64_t __tmp_in_tmp37;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)40; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)120; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp37;
}
Arr4DIdxRowM(tmp37, (int32_t)40, (int32_t)120, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp37 : 0;
}
}
}
}

uint64_t* tmp38 = make_array<uint64_t>( (int32_t)40);
/* Variable to read the clear value corresponding to the input variable tmp38 at (9141,1-9141,35) */
uint64_t __tmp_in_tmp38;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)40; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp38;
}
Arr1DIdxRowM(tmp38, (int32_t)40,i0) = (party == SERVER) ? __tmp_in_tmp38 : 0;
}

uint64_t* tmp39 = make_array<uint64_t>( (int32_t)120,  (int32_t)40,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp39 at (9144,1-9144,46) */
uint64_t __tmp_in_tmp39;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)120; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)40; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp39;
}
Arr4DIdxRowM(tmp39, (int32_t)120, (int32_t)40, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp39 : 0;
}
}
}
}

uint64_t* tmp40 = make_array<uint64_t>( (int32_t)120);
/* Variable to read the clear value corresponding to the input variable tmp40 at (9147,1-9147,36) */
uint64_t __tmp_in_tmp40;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)120; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp40;
}
Arr1DIdxRowM(tmp40, (int32_t)120,i0) = (party == SERVER) ? __tmp_in_tmp40 : 0;
}

uint64_t* tmp41 = make_array<uint64_t>( (int32_t)120,  (int32_t)1,  (int32_t)5,  (int32_t)5);
/* Variable to read the clear value corresponding to the input variable tmp41 at (9150,1-9150,45) */
uint64_t __tmp_in_tmp41;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)120; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)5; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)5; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp41;
}
Arr4DIdxRowM(tmp41, (int32_t)120, (int32_t)1, (int32_t)5, (int32_t)5,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp41 : 0;
}
}
}
}

uint64_t* tmp42 = make_array<uint64_t>( (int32_t)120);
/* Variable to read the clear value corresponding to the input variable tmp42 at (9153,1-9153,36) */
uint64_t __tmp_in_tmp42;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)120; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp42;
}
Arr1DIdxRowM(tmp42, (int32_t)120,i0) = (party == SERVER) ? __tmp_in_tmp42 : 0;
}

uint64_t* tmp43 = make_array<uint64_t>( (int32_t)40,  (int32_t)120,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp43 at (9156,1-9156,46) */
uint64_t __tmp_in_tmp43;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)40; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)120; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp43;
}
Arr4DIdxRowM(tmp43, (int32_t)40, (int32_t)120, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp43 : 0;
}
}
}
}

uint64_t* tmp44 = make_array<uint64_t>( (int32_t)40);
/* Variable to read the clear value corresponding to the input variable tmp44 at (9159,1-9159,35) */
uint64_t __tmp_in_tmp44;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)40; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp44;
}
Arr1DIdxRowM(tmp44, (int32_t)40,i0) = (party == SERVER) ? __tmp_in_tmp44 : 0;
}

uint64_t* tmp45 = make_array<uint64_t>( (int32_t)240,  (int32_t)40,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp45 at (9162,1-9162,46) */
uint64_t __tmp_in_tmp45;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)240; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)40; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp45;
}
Arr4DIdxRowM(tmp45, (int32_t)240, (int32_t)40, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp45 : 0;
}
}
}
}

uint64_t* tmp46 = make_array<uint64_t>( (int32_t)240);
/* Variable to read the clear value corresponding to the input variable tmp46 at (9165,1-9165,36) */
uint64_t __tmp_in_tmp46;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)240; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp46;
}
Arr1DIdxRowM(tmp46, (int32_t)240,i0) = (party == SERVER) ? __tmp_in_tmp46 : 0;
}

uint64_t* tmp47 = make_array<uint64_t>( (int32_t)240,  (int32_t)1,  (int32_t)5,  (int32_t)5);
/* Variable to read the clear value corresponding to the input variable tmp47 at (9168,1-9168,45) */
uint64_t __tmp_in_tmp47;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)240; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)5; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)5; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp47;
}
Arr4DIdxRowM(tmp47, (int32_t)240, (int32_t)1, (int32_t)5, (int32_t)5,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp47 : 0;
}
}
}
}

uint64_t* tmp48 = make_array<uint64_t>( (int32_t)240);
/* Variable to read the clear value corresponding to the input variable tmp48 at (9171,1-9171,36) */
uint64_t __tmp_in_tmp48;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)240; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp48;
}
Arr1DIdxRowM(tmp48, (int32_t)240,i0) = (party == SERVER) ? __tmp_in_tmp48 : 0;
}

uint64_t* tmp49 = make_array<uint64_t>( (int32_t)80,  (int32_t)240,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp49 at (9174,1-9174,46) */
uint64_t __tmp_in_tmp49;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)80; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)240; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp49;
}
Arr4DIdxRowM(tmp49, (int32_t)80, (int32_t)240, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp49 : 0;
}
}
}
}

uint64_t* tmp50 = make_array<uint64_t>( (int32_t)80);
/* Variable to read the clear value corresponding to the input variable tmp50 at (9177,1-9177,35) */
uint64_t __tmp_in_tmp50;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)80; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp50;
}
Arr1DIdxRowM(tmp50, (int32_t)80,i0) = (party == SERVER) ? __tmp_in_tmp50 : 0;
}

uint64_t* tmp51 = make_array<uint64_t>( (int32_t)480,  (int32_t)80,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp51 at (9180,1-9180,46) */
uint64_t __tmp_in_tmp51;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)80; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp51;
}
Arr4DIdxRowM(tmp51, (int32_t)480, (int32_t)80, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp51 : 0;
}
}
}
}

uint64_t* tmp52 = make_array<uint64_t>( (int32_t)480);
/* Variable to read the clear value corresponding to the input variable tmp52 at (9183,1-9183,36) */
uint64_t __tmp_in_tmp52;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp52;
}
Arr1DIdxRowM(tmp52, (int32_t)480,i0) = (party == SERVER) ? __tmp_in_tmp52 : 0;
}

uint64_t* tmp53 = make_array<uint64_t>( (int32_t)480,  (int32_t)1,  (int32_t)5,  (int32_t)5);
/* Variable to read the clear value corresponding to the input variable tmp53 at (9186,1-9186,45) */
uint64_t __tmp_in_tmp53;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)5; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)5; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp53;
}
Arr4DIdxRowM(tmp53, (int32_t)480, (int32_t)1, (int32_t)5, (int32_t)5,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp53 : 0;
}
}
}
}

uint64_t* tmp54 = make_array<uint64_t>( (int32_t)480);
/* Variable to read the clear value corresponding to the input variable tmp54 at (9189,1-9189,36) */
uint64_t __tmp_in_tmp54;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp54;
}
Arr1DIdxRowM(tmp54, (int32_t)480,i0) = (party == SERVER) ? __tmp_in_tmp54 : 0;
}

uint64_t* tmp55 = make_array<uint64_t>( (int32_t)80,  (int32_t)480,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp55 at (9192,1-9192,46) */
uint64_t __tmp_in_tmp55;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)80; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)480; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp55;
}
Arr4DIdxRowM(tmp55, (int32_t)80, (int32_t)480, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp55 : 0;
}
}
}
}

uint64_t* tmp56 = make_array<uint64_t>( (int32_t)80);
/* Variable to read the clear value corresponding to the input variable tmp56 at (9195,1-9195,35) */
uint64_t __tmp_in_tmp56;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)80; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp56;
}
Arr1DIdxRowM(tmp56, (int32_t)80,i0) = (party == SERVER) ? __tmp_in_tmp56 : 0;
}

uint64_t* tmp57 = make_array<uint64_t>( (int32_t)480,  (int32_t)80,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp57 at (9198,1-9198,46) */
uint64_t __tmp_in_tmp57;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)80; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp57;
}
Arr4DIdxRowM(tmp57, (int32_t)480, (int32_t)80, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp57 : 0;
}
}
}
}

uint64_t* tmp58 = make_array<uint64_t>( (int32_t)480);
/* Variable to read the clear value corresponding to the input variable tmp58 at (9201,1-9201,36) */
uint64_t __tmp_in_tmp58;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp58;
}
Arr1DIdxRowM(tmp58, (int32_t)480,i0) = (party == SERVER) ? __tmp_in_tmp58 : 0;
}

uint64_t* tmp59 = make_array<uint64_t>( (int32_t)480,  (int32_t)1,  (int32_t)5,  (int32_t)5);
/* Variable to read the clear value corresponding to the input variable tmp59 at (9204,1-9204,45) */
uint64_t __tmp_in_tmp59;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)5; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)5; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp59;
}
Arr4DIdxRowM(tmp59, (int32_t)480, (int32_t)1, (int32_t)5, (int32_t)5,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp59 : 0;
}
}
}
}

uint64_t* tmp60 = make_array<uint64_t>( (int32_t)480);
/* Variable to read the clear value corresponding to the input variable tmp60 at (9207,1-9207,36) */
uint64_t __tmp_in_tmp60;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp60;
}
Arr1DIdxRowM(tmp60, (int32_t)480,i0) = (party == SERVER) ? __tmp_in_tmp60 : 0;
}

uint64_t* tmp61 = make_array<uint64_t>( (int32_t)80,  (int32_t)480,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp61 at (9210,1-9210,46) */
uint64_t __tmp_in_tmp61;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)80; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)480; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp61;
}
Arr4DIdxRowM(tmp61, (int32_t)80, (int32_t)480, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp61 : 0;
}
}
}
}

uint64_t* tmp62 = make_array<uint64_t>( (int32_t)80);
/* Variable to read the clear value corresponding to the input variable tmp62 at (9213,1-9213,35) */
uint64_t __tmp_in_tmp62;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)80; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp62;
}
Arr1DIdxRowM(tmp62, (int32_t)80,i0) = (party == SERVER) ? __tmp_in_tmp62 : 0;
}

uint64_t* tmp63 = make_array<uint64_t>( (int32_t)480,  (int32_t)80,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp63 at (9216,1-9216,46) */
uint64_t __tmp_in_tmp63;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)80; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp63;
}
Arr4DIdxRowM(tmp63, (int32_t)480, (int32_t)80, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp63 : 0;
}
}
}
}

uint64_t* tmp64 = make_array<uint64_t>( (int32_t)480);
/* Variable to read the clear value corresponding to the input variable tmp64 at (9219,1-9219,36) */
uint64_t __tmp_in_tmp64;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp64;
}
Arr1DIdxRowM(tmp64, (int32_t)480,i0) = (party == SERVER) ? __tmp_in_tmp64 : 0;
}

uint64_t* tmp65 = make_array<uint64_t>( (int32_t)480,  (int32_t)1,  (int32_t)3,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp65 at (9222,1-9222,45) */
uint64_t __tmp_in_tmp65;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)3; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp65;
}
Arr4DIdxRowM(tmp65, (int32_t)480, (int32_t)1, (int32_t)3, (int32_t)3,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp65 : 0;
}
}
}
}

uint64_t* tmp66 = make_array<uint64_t>( (int32_t)480);
/* Variable to read the clear value corresponding to the input variable tmp66 at (9225,1-9225,36) */
uint64_t __tmp_in_tmp66;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)480; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp66;
}
Arr1DIdxRowM(tmp66, (int32_t)480,i0) = (party == SERVER) ? __tmp_in_tmp66 : 0;
}

uint64_t* tmp67 = make_array<uint64_t>( (int32_t)96,  (int32_t)480,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp67 at (9228,1-9228,46) */
uint64_t __tmp_in_tmp67;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)96; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)480; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp67;
}
Arr4DIdxRowM(tmp67, (int32_t)96, (int32_t)480, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp67 : 0;
}
}
}
}

uint64_t* tmp68 = make_array<uint64_t>( (int32_t)96);
/* Variable to read the clear value corresponding to the input variable tmp68 at (9231,1-9231,35) */
uint64_t __tmp_in_tmp68;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)96; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp68;
}
Arr1DIdxRowM(tmp68, (int32_t)96,i0) = (party == SERVER) ? __tmp_in_tmp68 : 0;
}

uint64_t* tmp69 = make_array<uint64_t>( (int32_t)576,  (int32_t)96,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp69 at (9234,1-9234,46) */
uint64_t __tmp_in_tmp69;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)576; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)96; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp69;
}
Arr4DIdxRowM(tmp69, (int32_t)576, (int32_t)96, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp69 : 0;
}
}
}
}

uint64_t* tmp70 = make_array<uint64_t>( (int32_t)576);
/* Variable to read the clear value corresponding to the input variable tmp70 at (9237,1-9237,36) */
uint64_t __tmp_in_tmp70;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)576; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp70;
}
Arr1DIdxRowM(tmp70, (int32_t)576,i0) = (party == SERVER) ? __tmp_in_tmp70 : 0;
}

uint64_t* tmp71 = make_array<uint64_t>( (int32_t)576,  (int32_t)1,  (int32_t)3,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp71 at (9240,1-9240,45) */
uint64_t __tmp_in_tmp71;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)576; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)3; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp71;
}
Arr4DIdxRowM(tmp71, (int32_t)576, (int32_t)1, (int32_t)3, (int32_t)3,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp71 : 0;
}
}
}
}

uint64_t* tmp72 = make_array<uint64_t>( (int32_t)576);
/* Variable to read the clear value corresponding to the input variable tmp72 at (9243,1-9243,36) */
uint64_t __tmp_in_tmp72;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)576; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp72;
}
Arr1DIdxRowM(tmp72, (int32_t)576,i0) = (party == SERVER) ? __tmp_in_tmp72 : 0;
}

uint64_t* tmp73 = make_array<uint64_t>( (int32_t)96,  (int32_t)576,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp73 at (9246,1-9246,46) */
uint64_t __tmp_in_tmp73;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)96; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)576; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp73;
}
Arr4DIdxRowM(tmp73, (int32_t)96, (int32_t)576, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp73 : 0;
}
}
}
}

uint64_t* tmp74 = make_array<uint64_t>( (int32_t)96);
/* Variable to read the clear value corresponding to the input variable tmp74 at (9249,1-9249,35) */
uint64_t __tmp_in_tmp74;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)96; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp74;
}
Arr1DIdxRowM(tmp74, (int32_t)96,i0) = (party == SERVER) ? __tmp_in_tmp74 : 0;
}

uint64_t* tmp75 = make_array<uint64_t>( (int32_t)576,  (int32_t)96,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp75 at (9252,1-9252,46) */
uint64_t __tmp_in_tmp75;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)576; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)96; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp75;
}
Arr4DIdxRowM(tmp75, (int32_t)576, (int32_t)96, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp75 : 0;
}
}
}
}

uint64_t* tmp76 = make_array<uint64_t>( (int32_t)576);
/* Variable to read the clear value corresponding to the input variable tmp76 at (9255,1-9255,36) */
uint64_t __tmp_in_tmp76;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)576; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp76;
}
Arr1DIdxRowM(tmp76, (int32_t)576,i0) = (party == SERVER) ? __tmp_in_tmp76 : 0;
}

uint64_t* tmp77 = make_array<uint64_t>( (int32_t)576,  (int32_t)1,  (int32_t)5,  (int32_t)5);
/* Variable to read the clear value corresponding to the input variable tmp77 at (9258,1-9258,45) */
uint64_t __tmp_in_tmp77;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)576; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)5; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)5; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp77;
}
Arr4DIdxRowM(tmp77, (int32_t)576, (int32_t)1, (int32_t)5, (int32_t)5,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp77 : 0;
}
}
}
}

uint64_t* tmp78 = make_array<uint64_t>( (int32_t)576);
/* Variable to read the clear value corresponding to the input variable tmp78 at (9261,1-9261,36) */
uint64_t __tmp_in_tmp78;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)576; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp78;
}
Arr1DIdxRowM(tmp78, (int32_t)576,i0) = (party == SERVER) ? __tmp_in_tmp78 : 0;
}

uint64_t* tmp79 = make_array<uint64_t>( (int32_t)192,  (int32_t)576,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp79 at (9264,1-9264,47) */
uint64_t __tmp_in_tmp79;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)576; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp79;
}
Arr4DIdxRowM(tmp79, (int32_t)192, (int32_t)576, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp79 : 0;
}
}
}
}

uint64_t* tmp80 = make_array<uint64_t>( (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp80 at (9267,1-9267,36) */
uint64_t __tmp_in_tmp80;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp80;
}
Arr1DIdxRowM(tmp80, (int32_t)192,i0) = (party == SERVER) ? __tmp_in_tmp80 : 0;
}

uint64_t* tmp81 = make_array<uint64_t>( (int32_t)1152,  (int32_t)192,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp81 at (9270,1-9270,48) */
uint64_t __tmp_in_tmp81;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1152; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)192; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp81;
}
Arr4DIdxRowM(tmp81, (int32_t)1152, (int32_t)192, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp81 : 0;
}
}
}
}

uint64_t* tmp82 = make_array<uint64_t>( (int32_t)1152);
/* Variable to read the clear value corresponding to the input variable tmp82 at (9273,1-9273,37) */
uint64_t __tmp_in_tmp82;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1152; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp82;
}
Arr1DIdxRowM(tmp82, (int32_t)1152,i0) = (party == SERVER) ? __tmp_in_tmp82 : 0;
}

uint64_t* tmp83 = make_array<uint64_t>( (int32_t)1152,  (int32_t)1,  (int32_t)5,  (int32_t)5);
/* Variable to read the clear value corresponding to the input variable tmp83 at (9276,1-9276,46) */
uint64_t __tmp_in_tmp83;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1152; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)5; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)5; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp83;
}
Arr4DIdxRowM(tmp83, (int32_t)1152, (int32_t)1, (int32_t)5, (int32_t)5,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp83 : 0;
}
}
}
}

uint64_t* tmp84 = make_array<uint64_t>( (int32_t)1152);
/* Variable to read the clear value corresponding to the input variable tmp84 at (9279,1-9279,37) */
uint64_t __tmp_in_tmp84;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1152; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp84;
}
Arr1DIdxRowM(tmp84, (int32_t)1152,i0) = (party == SERVER) ? __tmp_in_tmp84 : 0;
}

uint64_t* tmp85 = make_array<uint64_t>( (int32_t)192,  (int32_t)1152,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp85 at (9282,1-9282,48) */
uint64_t __tmp_in_tmp85;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1152; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp85;
}
Arr4DIdxRowM(tmp85, (int32_t)192, (int32_t)1152, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp85 : 0;
}
}
}
}

uint64_t* tmp86 = make_array<uint64_t>( (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp86 at (9285,1-9285,36) */
uint64_t __tmp_in_tmp86;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp86;
}
Arr1DIdxRowM(tmp86, (int32_t)192,i0) = (party == SERVER) ? __tmp_in_tmp86 : 0;
}

uint64_t* tmp87 = make_array<uint64_t>( (int32_t)1152,  (int32_t)192,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp87 at (9288,1-9288,48) */
uint64_t __tmp_in_tmp87;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1152; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)192; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp87;
}
Arr4DIdxRowM(tmp87, (int32_t)1152, (int32_t)192, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp87 : 0;
}
}
}
}

uint64_t* tmp88 = make_array<uint64_t>( (int32_t)1152);
/* Variable to read the clear value corresponding to the input variable tmp88 at (9291,1-9291,37) */
uint64_t __tmp_in_tmp88;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1152; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp88;
}
Arr1DIdxRowM(tmp88, (int32_t)1152,i0) = (party == SERVER) ? __tmp_in_tmp88 : 0;
}

uint64_t* tmp89 = make_array<uint64_t>( (int32_t)1152,  (int32_t)1,  (int32_t)5,  (int32_t)5);
/* Variable to read the clear value corresponding to the input variable tmp89 at (9294,1-9294,46) */
uint64_t __tmp_in_tmp89;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1152; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)5; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)5; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp89;
}
Arr4DIdxRowM(tmp89, (int32_t)1152, (int32_t)1, (int32_t)5, (int32_t)5,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp89 : 0;
}
}
}
}

uint64_t* tmp90 = make_array<uint64_t>( (int32_t)1152);
/* Variable to read the clear value corresponding to the input variable tmp90 at (9297,1-9297,37) */
uint64_t __tmp_in_tmp90;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1152; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp90;
}
Arr1DIdxRowM(tmp90, (int32_t)1152,i0) = (party == SERVER) ? __tmp_in_tmp90 : 0;
}

uint64_t* tmp91 = make_array<uint64_t>( (int32_t)192,  (int32_t)1152,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp91 at (9300,1-9300,48) */
uint64_t __tmp_in_tmp91;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1152; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp91;
}
Arr4DIdxRowM(tmp91, (int32_t)192, (int32_t)1152, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp91 : 0;
}
}
}
}

uint64_t* tmp92 = make_array<uint64_t>( (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp92 at (9303,1-9303,36) */
uint64_t __tmp_in_tmp92;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp92;
}
Arr1DIdxRowM(tmp92, (int32_t)192,i0) = (party == SERVER) ? __tmp_in_tmp92 : 0;
}

uint64_t* tmp93 = make_array<uint64_t>( (int32_t)1152,  (int32_t)192,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp93 at (9306,1-9306,48) */
uint64_t __tmp_in_tmp93;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1152; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)192; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp93;
}
Arr4DIdxRowM(tmp93, (int32_t)1152, (int32_t)192, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp93 : 0;
}
}
}
}

uint64_t* tmp94 = make_array<uint64_t>( (int32_t)1152);
/* Variable to read the clear value corresponding to the input variable tmp94 at (9309,1-9309,37) */
uint64_t __tmp_in_tmp94;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1152; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp94;
}
Arr1DIdxRowM(tmp94, (int32_t)1152,i0) = (party == SERVER) ? __tmp_in_tmp94 : 0;
}

uint64_t* tmp95 = make_array<uint64_t>( (int32_t)1152,  (int32_t)1,  (int32_t)5,  (int32_t)5);
/* Variable to read the clear value corresponding to the input variable tmp95 at (9312,1-9312,46) */
uint64_t __tmp_in_tmp95;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1152; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)5; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)5; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp95;
}
Arr4DIdxRowM(tmp95, (int32_t)1152, (int32_t)1, (int32_t)5, (int32_t)5,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp95 : 0;
}
}
}
}

uint64_t* tmp96 = make_array<uint64_t>( (int32_t)1152);
/* Variable to read the clear value corresponding to the input variable tmp96 at (9315,1-9315,37) */
uint64_t __tmp_in_tmp96;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1152; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp96;
}
Arr1DIdxRowM(tmp96, (int32_t)1152,i0) = (party == SERVER) ? __tmp_in_tmp96 : 0;
}

uint64_t* tmp97 = make_array<uint64_t>( (int32_t)192,  (int32_t)1152,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp97 at (9318,1-9318,48) */
uint64_t __tmp_in_tmp97;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1152; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp97;
}
Arr4DIdxRowM(tmp97, (int32_t)192, (int32_t)1152, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp97 : 0;
}
}
}
}

uint64_t* tmp98 = make_array<uint64_t>( (int32_t)192);
/* Variable to read the clear value corresponding to the input variable tmp98 at (9321,1-9321,36) */
uint64_t __tmp_in_tmp98;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)192; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp98;
}
Arr1DIdxRowM(tmp98, (int32_t)192,i0) = (party == SERVER) ? __tmp_in_tmp98 : 0;
}

uint64_t* tmp99 = make_array<uint64_t>( (int32_t)1152,  (int32_t)192,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp99 at (9324,1-9324,48) */
uint64_t __tmp_in_tmp99;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1152; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)192; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp99;
}
Arr4DIdxRowM(tmp99, (int32_t)1152, (int32_t)192, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp99 : 0;
}
}
}
}

uint64_t* tmp100 = make_array<uint64_t>( (int32_t)1152);
/* Variable to read the clear value corresponding to the input variable tmp100 at (9327,1-9327,38) */
uint64_t __tmp_in_tmp100;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1152; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp100;
}
Arr1DIdxRowM(tmp100, (int32_t)1152,i0) = (party == SERVER) ? __tmp_in_tmp100 : 0;
}

uint64_t* tmp101 = make_array<uint64_t>( (int32_t)1152,  (int32_t)1,  (int32_t)3,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp101 at (9330,1-9330,47) */
uint64_t __tmp_in_tmp101;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1152; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)3; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp101;
}
Arr4DIdxRowM(tmp101, (int32_t)1152, (int32_t)1, (int32_t)3, (int32_t)3,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp101 : 0;
}
}
}
}

uint64_t* tmp102 = make_array<uint64_t>( (int32_t)1152);
/* Variable to read the clear value corresponding to the input variable tmp102 at (9333,1-9333,38) */
uint64_t __tmp_in_tmp102;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1152; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp102;
}
Arr1DIdxRowM(tmp102, (int32_t)1152,i0) = (party == SERVER) ? __tmp_in_tmp102 : 0;
}

uint64_t* tmp103 = make_array<uint64_t>( (int32_t)320,  (int32_t)1152,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp103 at (9336,1-9336,49) */
uint64_t __tmp_in_tmp103;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)320; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1152; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp103;
}
Arr4DIdxRowM(tmp103, (int32_t)320, (int32_t)1152, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp103 : 0;
}
}
}
}

uint64_t* tmp104 = make_array<uint64_t>( (int32_t)320);
/* Variable to read the clear value corresponding to the input variable tmp104 at (9339,1-9339,37) */
uint64_t __tmp_in_tmp104;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)320; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp104;
}
Arr1DIdxRowM(tmp104, (int32_t)320,i0) = (party == SERVER) ? __tmp_in_tmp104 : 0;
}

uint64_t* tmp105 = make_array<uint64_t>( (int32_t)1280,  (int32_t)320,  (int32_t)1,  (int32_t)1);
/* Variable to read the clear value corresponding to the input variable tmp105 at (9342,1-9342,49) */
uint64_t __tmp_in_tmp105;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1280; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)320; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1; i3++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp105;
}
Arr4DIdxRowM(tmp105, (int32_t)1280, (int32_t)320, (int32_t)1, (int32_t)1,i0,i1,i2,i3) = (party == SERVER) ? __tmp_in_tmp105 : 0;
}
}
}
}

uint64_t* tmp106 = make_array<uint64_t>( (int32_t)1280);
/* Variable to read the clear value corresponding to the input variable tmp106 at (9345,1-9345,38) */
uint64_t __tmp_in_tmp106;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1280; i0++){
if ((party == SERVER)) {
cin >> __tmp_in_tmp106;
}
Arr1DIdxRowM(tmp106, (int32_t)1280,i0) = (party == SERVER) ? __tmp_in_tmp106 : 0;
}
StartComputation();

uint64_t* tmp107 = make_array<uint64_t>( (int32_t)1,  (int32_t)224,  (int32_t)224,  (int32_t)3);

int64_t i7;

int64_t i6;

int64_t i5;

int64_t i4;

int64_t i3;

int64_t i2;

int64_t i1;

int64_t i0;
i0 =  (int64_t)0;
i1 =  (int64_t)0;
i2 =  (int64_t)0;
i3 =  (int64_t)0;
for (uint32_t i4 =  (int32_t)0; i4 <  (int32_t)1; i4++){
for (uint32_t i7 =  (int32_t)0; i7 <  (int32_t)3; i7++){
for (uint32_t i5 =  (int32_t)0; i5 <  (int32_t)224; i5++){
for (uint32_t i6 =  (int32_t)0; i6 <  (int32_t)224; i6++){
Arr4DIdxRowM(tmp107, (int32_t)1, (int32_t)224, (int32_t)224, (int32_t)3,i4,i5,i6,i7) = Arr4DIdxRowM(tmp0, (int32_t)1, (int32_t)3, (int32_t)224, (int32_t)224,i0,i1,i2,i3);
i3 = (i3 +  (int64_t)1);
if ((i3 ==  (int64_t)224)) {
i3 =  (int64_t)0;
i2 = (i2 +  (int64_t)1);
if ((i2 ==  (int64_t)224)) {
i2 =  (int64_t)0;
i1 = (i1 +  (int64_t)1);
if ((i1 ==  (int64_t)3)) {
i1 =  (int64_t)0;
i0 = (i0 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)3,  (int32_t)224,  (int32_t)224, tmp0);

uint64_t* tmp109 = make_array<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)32);

int64_t i15;

int64_t i14;

int64_t i13;

int64_t i12;

int64_t i11;

int64_t i10;

int64_t i9;

int64_t i8;
i8 =  (int64_t)0;
i9 =  (int64_t)0;
i10 =  (int64_t)0;
i11 =  (int64_t)0;
for (uint32_t i15 =  (int32_t)0; i15 <  (int32_t)32; i15++){
for (uint32_t i14 =  (int32_t)0; i14 <  (int32_t)3; i14++){
for (uint32_t i12 =  (int32_t)0; i12 <  (int32_t)3; i12++){
for (uint32_t i13 =  (int32_t)0; i13 <  (int32_t)3; i13++){
Arr4DIdxRowM(tmp109, (int32_t)3, (int32_t)3, (int32_t)3, (int32_t)32,i12,i13,i14,i15) = Arr4DIdxRowM(tmp3, (int32_t)32, (int32_t)3, (int32_t)3, (int32_t)3,i8,i9,i10,i11);
i11 = (i11 +  (int64_t)1);
if ((i11 ==  (int64_t)3)) {
i11 =  (int64_t)0;
i10 = (i10 +  (int64_t)1);
if ((i10 ==  (int64_t)3)) {
i10 =  (int64_t)0;
i9 = (i9 +  (int64_t)1);
if ((i9 ==  (int64_t)3)) {
i9 =  (int64_t)0;
i8 = (i8 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)32,  (int32_t)3,  (int32_t)3,  (int32_t)3, tmp3);

uint64_t* tmp111 = make_array<uint64_t>( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)32);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)224,  (int32_t)224,  (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)2,  (int32_t)2,  (int32_t)1, tmp107, tmp109, tmp111);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)3,  (int32_t)32, tmp109);
ClearMemSecret4( (int32_t)1,  (int32_t)224,  (int32_t)224,  (int32_t)3, tmp107);

uint64_t* tmp114 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)32);

int64_t i20;

int64_t i19;

int64_t i18;

int64_t i17;

int64_t i16;
i16 =  (int64_t)0;
for (uint32_t i17 =  (int32_t)0; i17 <  (int32_t)1; i17++){
for (uint32_t i18 =  (int32_t)0; i18 <  (int32_t)1; i18++){
for (uint32_t i19 =  (int32_t)0; i19 <  (int32_t)1; i19++){
for (uint32_t i20 =  (int32_t)0; i20 <  (int32_t)32; i20++){
Arr4DIdxRowM(tmp114, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)32,i17,i18,i19,i20) = Arr1DIdxRowM(tmp4, (int32_t)32,i16);
i16 = (i16 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)32, tmp4);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)32, tmp114,  kScale);

uint64_t* tmp116 = make_array<uint64_t>( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)32);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)112; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)112; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)32; i3++){
Arr4DIdxRowM(tmp116, (int32_t)1, (int32_t)112, (int32_t)112, (int32_t)32,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp111, (int32_t)1, (int32_t)112, (int32_t)112, (int32_t)32,i0,i1,i2,i3), Arr4DIdxRowM(tmp114, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)32,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)32, tmp111);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)32, tmp114);

uint64_t* tmp119 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)112,  (int32_t)112);

int64_t i28;

int64_t i27;

int64_t i26;

int64_t i25;

int64_t i24;

int64_t i23;

int64_t i22;

int64_t i21;
i21 =  (int64_t)0;
i22 =  (int64_t)0;
i23 =  (int64_t)0;
i24 =  (int64_t)0;
for (uint32_t i25 =  (int32_t)0; i25 <  (int32_t)1; i25++){
for (uint32_t i27 =  (int32_t)0; i27 <  (int32_t)112; i27++){
for (uint32_t i28 =  (int32_t)0; i28 <  (int32_t)112; i28++){
for (uint32_t i26 =  (int32_t)0; i26 <  (int32_t)32; i26++){
Arr4DIdxRowM(tmp119, (int32_t)1, (int32_t)32, (int32_t)112, (int32_t)112,i25,i26,i27,i28) = Arr4DIdxRowM(tmp116, (int32_t)1, (int32_t)112, (int32_t)112, (int32_t)32,i21,i22,i23,i24);
i24 = (i24 +  (int64_t)1);
if ((i24 ==  (int64_t)32)) {
i24 =  (int64_t)0;
i23 = (i23 +  (int64_t)1);
if ((i23 ==  (int64_t)112)) {
i23 =  (int64_t)0;
i22 = (i22 +  (int64_t)1);
if ((i22 ==  (int64_t)112)) {
i22 =  (int64_t)0;
i21 = (i21 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)32, tmp116);

uint64_t* tmp121 = make_array<uint64_t>( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)32);

int64_t i36;

int64_t i35;

int64_t i34;

int64_t i33;

int64_t i32;

int64_t i31;

int64_t i30;

int64_t i29;
i29 =  (int64_t)0;
i30 =  (int64_t)0;
i31 =  (int64_t)0;
i32 =  (int64_t)0;
for (uint32_t i33 =  (int32_t)0; i33 <  (int32_t)1; i33++){
for (uint32_t i36 =  (int32_t)0; i36 <  (int32_t)32; i36++){
for (uint32_t i34 =  (int32_t)0; i34 <  (int32_t)112; i34++){
for (uint32_t i35 =  (int32_t)0; i35 <  (int32_t)112; i35++){
Arr4DIdxRowM(tmp121, (int32_t)1, (int32_t)112, (int32_t)112, (int32_t)32,i33,i34,i35,i36) = Arr4DIdxRowM(tmp119, (int32_t)1, (int32_t)32, (int32_t)112, (int32_t)112,i29,i30,i31,i32);
i32 = (i32 +  (int64_t)1);
if ((i32 ==  (int64_t)112)) {
i32 =  (int64_t)0;
i31 = (i31 +  (int64_t)1);
if ((i31 ==  (int64_t)112)) {
i31 =  (int64_t)0;
i30 = (i30 +  (int64_t)1);
if ((i30 ==  (int64_t)32)) {
i30 =  (int64_t)0;
i29 = (i29 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)112,  (int32_t)112, tmp119);

uint64_t* tmp123 = make_array<uint64_t>( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)32);
Relu4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)32, tmp121, tmp123,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)32, tmp121);

uint64_t* tmp125 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)112,  (int32_t)112);

int64_t i44;

int64_t i43;

int64_t i42;

int64_t i41;

int64_t i40;

int64_t i39;

int64_t i38;

int64_t i37;
i37 =  (int64_t)0;
i38 =  (int64_t)0;
i39 =  (int64_t)0;
i40 =  (int64_t)0;
for (uint32_t i41 =  (int32_t)0; i41 <  (int32_t)1; i41++){
for (uint32_t i43 =  (int32_t)0; i43 <  (int32_t)112; i43++){
for (uint32_t i44 =  (int32_t)0; i44 <  (int32_t)112; i44++){
for (uint32_t i42 =  (int32_t)0; i42 <  (int32_t)32; i42++){
Arr4DIdxRowM(tmp125, (int32_t)1, (int32_t)32, (int32_t)112, (int32_t)112,i41,i42,i43,i44) = Arr4DIdxRowM(tmp123, (int32_t)1, (int32_t)112, (int32_t)112, (int32_t)32,i37,i38,i39,i40);
i40 = (i40 +  (int64_t)1);
if ((i40 ==  (int64_t)32)) {
i40 =  (int64_t)0;
i39 = (i39 +  (int64_t)1);
if ((i39 ==  (int64_t)112)) {
i39 =  (int64_t)0;
i38 = (i38 +  (int64_t)1);
if ((i38 ==  (int64_t)112)) {
i38 =  (int64_t)0;
i37 = (i37 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)32, tmp123);

uint64_t* tmp127 = make_array<uint64_t>( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)32);

int64_t i52;

int64_t i51;

int64_t i50;

int64_t i49;

int64_t i48;

int64_t i47;

int64_t i46;

int64_t i45;
i45 =  (int64_t)0;
i46 =  (int64_t)0;
i47 =  (int64_t)0;
i48 =  (int64_t)0;
for (uint32_t i49 =  (int32_t)0; i49 <  (int32_t)1; i49++){
for (uint32_t i52 =  (int32_t)0; i52 <  (int32_t)32; i52++){
for (uint32_t i50 =  (int32_t)0; i50 <  (int32_t)112; i50++){
for (uint32_t i51 =  (int32_t)0; i51 <  (int32_t)112; i51++){
Arr4DIdxRowM(tmp127, (int32_t)1, (int32_t)112, (int32_t)112, (int32_t)32,i49,i50,i51,i52) = Arr4DIdxRowM(tmp125, (int32_t)1, (int32_t)32, (int32_t)112, (int32_t)112,i45,i46,i47,i48);
i48 = (i48 +  (int64_t)1);
if ((i48 ==  (int64_t)112)) {
i48 =  (int64_t)0;
i47 = (i47 +  (int64_t)1);
if ((i47 ==  (int64_t)112)) {
i47 =  (int64_t)0;
i46 = (i46 +  (int64_t)1);
if ((i46 ==  (int64_t)32)) {
i46 =  (int64_t)0;
i45 = (i45 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)112,  (int32_t)112, tmp125);

uint64_t* tmp129 = make_array<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)1,  (int32_t)32);

int64_t i60;

int64_t i59;

int64_t i58;

int64_t i57;

int64_t i56;

int64_t i55;

int64_t i54;

int64_t i53;
i53 =  (int64_t)0;
i54 =  (int64_t)0;
i55 =  (int64_t)0;
i56 =  (int64_t)0;
for (uint32_t i60 =  (int32_t)0; i60 <  (int32_t)32; i60++){
for (uint32_t i59 =  (int32_t)0; i59 <  (int32_t)1; i59++){
for (uint32_t i57 =  (int32_t)0; i57 <  (int32_t)3; i57++){
for (uint32_t i58 =  (int32_t)0; i58 <  (int32_t)3; i58++){
Arr4DIdxRowM(tmp129, (int32_t)3, (int32_t)3, (int32_t)1, (int32_t)32,i57,i58,i59,i60) = Arr4DIdxRowM(tmp5, (int32_t)32, (int32_t)1, (int32_t)3, (int32_t)3,i53,i54,i55,i56);
i56 = (i56 +  (int64_t)1);
if ((i56 ==  (int64_t)3)) {
i56 =  (int64_t)0;
i55 = (i55 +  (int64_t)1);
if ((i55 ==  (int64_t)3)) {
i55 =  (int64_t)0;
i54 = (i54 +  (int64_t)1);
if ((i54 ==  (int64_t)1)) {
i54 =  (int64_t)0;
i53 = (i53 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)32,  (int32_t)1,  (int32_t)3,  (int32_t)3, tmp5);

uint64_t* tmp131 = make_array<uint64_t>( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)32);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)32,  (int32_t)3,  (int32_t)3,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)32, tmp127, tmp129, tmp131);
ClearMemSecret4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)32, tmp127);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)1,  (int32_t)32, tmp129);

uint64_t* tmp134 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)32);

int64_t i65;

int64_t i64;

int64_t i63;

int64_t i62;

int64_t i61;
i61 =  (int64_t)0;
for (uint32_t i62 =  (int32_t)0; i62 <  (int32_t)1; i62++){
for (uint32_t i63 =  (int32_t)0; i63 <  (int32_t)1; i63++){
for (uint32_t i64 =  (int32_t)0; i64 <  (int32_t)1; i64++){
for (uint32_t i65 =  (int32_t)0; i65 <  (int32_t)32; i65++){
Arr4DIdxRowM(tmp134, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)32,i62,i63,i64,i65) = Arr1DIdxRowM(tmp6, (int32_t)32,i61);
i61 = (i61 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)32, tmp6);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)32, tmp134,  kScale);

uint64_t* tmp136 = make_array<uint64_t>( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)32);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)112; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)112; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)32; i3++){
Arr4DIdxRowM(tmp136, (int32_t)1, (int32_t)112, (int32_t)112, (int32_t)32,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp131, (int32_t)1, (int32_t)112, (int32_t)112, (int32_t)32,i0,i1,i2,i3), Arr4DIdxRowM(tmp134, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)32,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)32, tmp131);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)32, tmp134);

uint64_t* tmp139 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)112,  (int32_t)112);

int64_t i73;

int64_t i72;

int64_t i71;

int64_t i70;

int64_t i69;

int64_t i68;

int64_t i67;

int64_t i66;
i66 =  (int64_t)0;
i67 =  (int64_t)0;
i68 =  (int64_t)0;
i69 =  (int64_t)0;
for (uint32_t i70 =  (int32_t)0; i70 <  (int32_t)1; i70++){
for (uint32_t i72 =  (int32_t)0; i72 <  (int32_t)112; i72++){
for (uint32_t i73 =  (int32_t)0; i73 <  (int32_t)112; i73++){
for (uint32_t i71 =  (int32_t)0; i71 <  (int32_t)32; i71++){
Arr4DIdxRowM(tmp139, (int32_t)1, (int32_t)32, (int32_t)112, (int32_t)112,i70,i71,i72,i73) = Arr4DIdxRowM(tmp136, (int32_t)1, (int32_t)112, (int32_t)112, (int32_t)32,i66,i67,i68,i69);
i69 = (i69 +  (int64_t)1);
if ((i69 ==  (int64_t)32)) {
i69 =  (int64_t)0;
i68 = (i68 +  (int64_t)1);
if ((i68 ==  (int64_t)112)) {
i68 =  (int64_t)0;
i67 = (i67 +  (int64_t)1);
if ((i67 ==  (int64_t)112)) {
i67 =  (int64_t)0;
i66 = (i66 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)32, tmp136);

uint64_t* tmp141 = make_array<uint64_t>( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)32);

int64_t i81;

int64_t i80;

int64_t i79;

int64_t i78;

int64_t i77;

int64_t i76;

int64_t i75;

int64_t i74;
i74 =  (int64_t)0;
i75 =  (int64_t)0;
i76 =  (int64_t)0;
i77 =  (int64_t)0;
for (uint32_t i78 =  (int32_t)0; i78 <  (int32_t)1; i78++){
for (uint32_t i81 =  (int32_t)0; i81 <  (int32_t)32; i81++){
for (uint32_t i79 =  (int32_t)0; i79 <  (int32_t)112; i79++){
for (uint32_t i80 =  (int32_t)0; i80 <  (int32_t)112; i80++){
Arr4DIdxRowM(tmp141, (int32_t)1, (int32_t)112, (int32_t)112, (int32_t)32,i78,i79,i80,i81) = Arr4DIdxRowM(tmp139, (int32_t)1, (int32_t)32, (int32_t)112, (int32_t)112,i74,i75,i76,i77);
i77 = (i77 +  (int64_t)1);
if ((i77 ==  (int64_t)112)) {
i77 =  (int64_t)0;
i76 = (i76 +  (int64_t)1);
if ((i76 ==  (int64_t)112)) {
i76 =  (int64_t)0;
i75 = (i75 +  (int64_t)1);
if ((i75 ==  (int64_t)32)) {
i75 =  (int64_t)0;
i74 = (i74 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)112,  (int32_t)112, tmp139);

uint64_t* tmp143 = make_array<uint64_t>( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)32);
Relu4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)32, tmp141, tmp143,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)32, tmp141);

uint64_t* tmp145 = make_array<uint64_t>( (int32_t)1,  (int32_t)32,  (int32_t)112,  (int32_t)112);

int64_t i89;

int64_t i88;

int64_t i87;

int64_t i86;

int64_t i85;

int64_t i84;

int64_t i83;

int64_t i82;
i82 =  (int64_t)0;
i83 =  (int64_t)0;
i84 =  (int64_t)0;
i85 =  (int64_t)0;
for (uint32_t i86 =  (int32_t)0; i86 <  (int32_t)1; i86++){
for (uint32_t i88 =  (int32_t)0; i88 <  (int32_t)112; i88++){
for (uint32_t i89 =  (int32_t)0; i89 <  (int32_t)112; i89++){
for (uint32_t i87 =  (int32_t)0; i87 <  (int32_t)32; i87++){
Arr4DIdxRowM(tmp145, (int32_t)1, (int32_t)32, (int32_t)112, (int32_t)112,i86,i87,i88,i89) = Arr4DIdxRowM(tmp143, (int32_t)1, (int32_t)112, (int32_t)112, (int32_t)32,i82,i83,i84,i85);
i85 = (i85 +  (int64_t)1);
if ((i85 ==  (int64_t)32)) {
i85 =  (int64_t)0;
i84 = (i84 +  (int64_t)1);
if ((i84 ==  (int64_t)112)) {
i84 =  (int64_t)0;
i83 = (i83 +  (int64_t)1);
if ((i83 ==  (int64_t)112)) {
i83 =  (int64_t)0;
i82 = (i82 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)32, tmp143);

uint64_t* tmp147 = make_array<uint64_t>( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)32);

int64_t i97;

int64_t i96;

int64_t i95;

int64_t i94;

int64_t i93;

int64_t i92;

int64_t i91;

int64_t i90;
i90 =  (int64_t)0;
i91 =  (int64_t)0;
i92 =  (int64_t)0;
i93 =  (int64_t)0;
for (uint32_t i94 =  (int32_t)0; i94 <  (int32_t)1; i94++){
for (uint32_t i97 =  (int32_t)0; i97 <  (int32_t)32; i97++){
for (uint32_t i95 =  (int32_t)0; i95 <  (int32_t)112; i95++){
for (uint32_t i96 =  (int32_t)0; i96 <  (int32_t)112; i96++){
Arr4DIdxRowM(tmp147, (int32_t)1, (int32_t)112, (int32_t)112, (int32_t)32,i94,i95,i96,i97) = Arr4DIdxRowM(tmp145, (int32_t)1, (int32_t)32, (int32_t)112, (int32_t)112,i90,i91,i92,i93);
i93 = (i93 +  (int64_t)1);
if ((i93 ==  (int64_t)112)) {
i93 =  (int64_t)0;
i92 = (i92 +  (int64_t)1);
if ((i92 ==  (int64_t)112)) {
i92 =  (int64_t)0;
i91 = (i91 +  (int64_t)1);
if ((i91 ==  (int64_t)32)) {
i91 =  (int64_t)0;
i90 = (i90 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)32,  (int32_t)112,  (int32_t)112, tmp145);

uint64_t* tmp149 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)32,  (int32_t)16);

int64_t i105;

int64_t i104;

int64_t i103;

int64_t i102;

int64_t i101;

int64_t i100;

int64_t i99;

int64_t i98;
i98 =  (int64_t)0;
i99 =  (int64_t)0;
i100 =  (int64_t)0;
i101 =  (int64_t)0;
for (uint32_t i105 =  (int32_t)0; i105 <  (int32_t)16; i105++){
for (uint32_t i104 =  (int32_t)0; i104 <  (int32_t)32; i104++){
for (uint32_t i102 =  (int32_t)0; i102 <  (int32_t)1; i102++){
for (uint32_t i103 =  (int32_t)0; i103 <  (int32_t)1; i103++){
Arr4DIdxRowM(tmp149, (int32_t)1, (int32_t)1, (int32_t)32, (int32_t)16,i102,i103,i104,i105) = Arr4DIdxRowM(tmp7, (int32_t)16, (int32_t)32, (int32_t)1, (int32_t)1,i98,i99,i100,i101);
i101 = (i101 +  (int64_t)1);
if ((i101 ==  (int64_t)1)) {
i101 =  (int64_t)0;
i100 = (i100 +  (int64_t)1);
if ((i100 ==  (int64_t)1)) {
i100 =  (int64_t)0;
i99 = (i99 +  (int64_t)1);
if ((i99 ==  (int64_t)32)) {
i99 =  (int64_t)0;
i98 = (i98 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)16,  (int32_t)32,  (int32_t)1,  (int32_t)1, tmp7);

uint64_t* tmp151 = make_array<uint64_t>( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)16);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)32,  (int32_t)1,  (int32_t)1,  (int32_t)16,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp147, tmp149, tmp151);
ClearMemSecret4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)32, tmp147);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)32,  (int32_t)16, tmp149);

uint64_t* tmp154 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)16);

int64_t i110;

int64_t i109;

int64_t i108;

int64_t i107;

int64_t i106;
i106 =  (int64_t)0;
for (uint32_t i107 =  (int32_t)0; i107 <  (int32_t)1; i107++){
for (uint32_t i108 =  (int32_t)0; i108 <  (int32_t)1; i108++){
for (uint32_t i109 =  (int32_t)0; i109 <  (int32_t)1; i109++){
for (uint32_t i110 =  (int32_t)0; i110 <  (int32_t)16; i110++){
Arr4DIdxRowM(tmp154, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)16,i107,i108,i109,i110) = Arr1DIdxRowM(tmp8, (int32_t)16,i106);
i106 = (i106 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)16, tmp8);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)16, tmp154,  kScale);

uint64_t* tmp156 = make_array<uint64_t>( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)16);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)112; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)112; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)16; i3++){
Arr4DIdxRowM(tmp156, (int32_t)1, (int32_t)112, (int32_t)112, (int32_t)16,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp151, (int32_t)1, (int32_t)112, (int32_t)112, (int32_t)16,i0,i1,i2,i3), Arr4DIdxRowM(tmp154, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)16,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)16, tmp154);
ClearMemSecret4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)16, tmp151);

uint64_t* tmp159 = make_array<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)112,  (int32_t)112);

int64_t i118;

int64_t i117;

int64_t i116;

int64_t i115;

int64_t i114;

int64_t i113;

int64_t i112;

int64_t i111;
i111 =  (int64_t)0;
i112 =  (int64_t)0;
i113 =  (int64_t)0;
i114 =  (int64_t)0;
for (uint32_t i115 =  (int32_t)0; i115 <  (int32_t)1; i115++){
for (uint32_t i117 =  (int32_t)0; i117 <  (int32_t)112; i117++){
for (uint32_t i118 =  (int32_t)0; i118 <  (int32_t)112; i118++){
for (uint32_t i116 =  (int32_t)0; i116 <  (int32_t)16; i116++){
Arr4DIdxRowM(tmp159, (int32_t)1, (int32_t)16, (int32_t)112, (int32_t)112,i115,i116,i117,i118) = Arr4DIdxRowM(tmp156, (int32_t)1, (int32_t)112, (int32_t)112, (int32_t)16,i111,i112,i113,i114);
i114 = (i114 +  (int64_t)1);
if ((i114 ==  (int64_t)16)) {
i114 =  (int64_t)0;
i113 = (i113 +  (int64_t)1);
if ((i113 ==  (int64_t)112)) {
i113 =  (int64_t)0;
i112 = (i112 +  (int64_t)1);
if ((i112 ==  (int64_t)112)) {
i112 =  (int64_t)0;
i111 = (i111 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)16, tmp156);

uint64_t* tmp161 = make_array<uint64_t>( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)16);

int64_t i126;

int64_t i125;

int64_t i124;

int64_t i123;

int64_t i122;

int64_t i121;

int64_t i120;

int64_t i119;
i119 =  (int64_t)0;
i120 =  (int64_t)0;
i121 =  (int64_t)0;
i122 =  (int64_t)0;
for (uint32_t i123 =  (int32_t)0; i123 <  (int32_t)1; i123++){
for (uint32_t i126 =  (int32_t)0; i126 <  (int32_t)16; i126++){
for (uint32_t i124 =  (int32_t)0; i124 <  (int32_t)112; i124++){
for (uint32_t i125 =  (int32_t)0; i125 <  (int32_t)112; i125++){
Arr4DIdxRowM(tmp161, (int32_t)1, (int32_t)112, (int32_t)112, (int32_t)16,i123,i124,i125,i126) = Arr4DIdxRowM(tmp159, (int32_t)1, (int32_t)16, (int32_t)112, (int32_t)112,i119,i120,i121,i122);
i122 = (i122 +  (int64_t)1);
if ((i122 ==  (int64_t)112)) {
i122 =  (int64_t)0;
i121 = (i121 +  (int64_t)1);
if ((i121 ==  (int64_t)112)) {
i121 =  (int64_t)0;
i120 = (i120 +  (int64_t)1);
if ((i120 ==  (int64_t)16)) {
i120 =  (int64_t)0;
i119 = (i119 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)112,  (int32_t)112, tmp159);

uint64_t* tmp163 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)16,  (int32_t)48);

int64_t i134;

int64_t i133;

int64_t i132;

int64_t i131;

int64_t i130;

int64_t i129;

int64_t i128;

int64_t i127;
i127 =  (int64_t)0;
i128 =  (int64_t)0;
i129 =  (int64_t)0;
i130 =  (int64_t)0;
for (uint32_t i134 =  (int32_t)0; i134 <  (int32_t)48; i134++){
for (uint32_t i133 =  (int32_t)0; i133 <  (int32_t)16; i133++){
for (uint32_t i131 =  (int32_t)0; i131 <  (int32_t)1; i131++){
for (uint32_t i132 =  (int32_t)0; i132 <  (int32_t)1; i132++){
Arr4DIdxRowM(tmp163, (int32_t)1, (int32_t)1, (int32_t)16, (int32_t)48,i131,i132,i133,i134) = Arr4DIdxRowM(tmp9, (int32_t)48, (int32_t)16, (int32_t)1, (int32_t)1,i127,i128,i129,i130);
i130 = (i130 +  (int64_t)1);
if ((i130 ==  (int64_t)1)) {
i130 =  (int64_t)0;
i129 = (i129 +  (int64_t)1);
if ((i129 ==  (int64_t)1)) {
i129 =  (int64_t)0;
i128 = (i128 +  (int64_t)1);
if ((i128 ==  (int64_t)16)) {
i128 =  (int64_t)0;
i127 = (i127 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)48,  (int32_t)16,  (int32_t)1,  (int32_t)1, tmp9);

uint64_t* tmp165 = make_array<uint64_t>( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)48);
ScaleDown4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)16, tmp161,  kScale);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)16,  (int32_t)1,  (int32_t)1,  (int32_t)48,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp161, tmp163, tmp165);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)16,  (int32_t)48, tmp163);
ClearMemSecret4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)16, tmp161);

uint64_t* tmp168 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)48);

int64_t i139;

int64_t i138;

int64_t i137;

int64_t i136;

int64_t i135;
i135 =  (int64_t)0;
for (uint32_t i136 =  (int32_t)0; i136 <  (int32_t)1; i136++){
for (uint32_t i137 =  (int32_t)0; i137 <  (int32_t)1; i137++){
for (uint32_t i138 =  (int32_t)0; i138 <  (int32_t)1; i138++){
for (uint32_t i139 =  (int32_t)0; i139 <  (int32_t)48; i139++){
Arr4DIdxRowM(tmp168, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)48,i136,i137,i138,i139) = Arr1DIdxRowM(tmp10, (int32_t)48,i135);
i135 = (i135 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)48, tmp10);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)48, tmp168,  kScale);

uint64_t* tmp170 = make_array<uint64_t>( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)48);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)112; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)112; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)48; i3++){
Arr4DIdxRowM(tmp170, (int32_t)1, (int32_t)112, (int32_t)112, (int32_t)48,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp165, (int32_t)1, (int32_t)112, (int32_t)112, (int32_t)48,i0,i1,i2,i3), Arr4DIdxRowM(tmp168, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)48,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)48, tmp168);
ClearMemSecret4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)48, tmp165);

uint64_t* tmp173 = make_array<uint64_t>( (int32_t)1,  (int32_t)48,  (int32_t)112,  (int32_t)112);

int64_t i147;

int64_t i146;

int64_t i145;

int64_t i144;

int64_t i143;

int64_t i142;

int64_t i141;

int64_t i140;
i140 =  (int64_t)0;
i141 =  (int64_t)0;
i142 =  (int64_t)0;
i143 =  (int64_t)0;
for (uint32_t i144 =  (int32_t)0; i144 <  (int32_t)1; i144++){
for (uint32_t i146 =  (int32_t)0; i146 <  (int32_t)112; i146++){
for (uint32_t i147 =  (int32_t)0; i147 <  (int32_t)112; i147++){
for (uint32_t i145 =  (int32_t)0; i145 <  (int32_t)48; i145++){
Arr4DIdxRowM(tmp173, (int32_t)1, (int32_t)48, (int32_t)112, (int32_t)112,i144,i145,i146,i147) = Arr4DIdxRowM(tmp170, (int32_t)1, (int32_t)112, (int32_t)112, (int32_t)48,i140,i141,i142,i143);
i143 = (i143 +  (int64_t)1);
if ((i143 ==  (int64_t)48)) {
i143 =  (int64_t)0;
i142 = (i142 +  (int64_t)1);
if ((i142 ==  (int64_t)112)) {
i142 =  (int64_t)0;
i141 = (i141 +  (int64_t)1);
if ((i141 ==  (int64_t)112)) {
i141 =  (int64_t)0;
i140 = (i140 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)48, tmp170);

uint64_t* tmp175 = make_array<uint64_t>( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)48);

int64_t i155;

int64_t i154;

int64_t i153;

int64_t i152;

int64_t i151;

int64_t i150;

int64_t i149;

int64_t i148;
i148 =  (int64_t)0;
i149 =  (int64_t)0;
i150 =  (int64_t)0;
i151 =  (int64_t)0;
for (uint32_t i152 =  (int32_t)0; i152 <  (int32_t)1; i152++){
for (uint32_t i155 =  (int32_t)0; i155 <  (int32_t)48; i155++){
for (uint32_t i153 =  (int32_t)0; i153 <  (int32_t)112; i153++){
for (uint32_t i154 =  (int32_t)0; i154 <  (int32_t)112; i154++){
Arr4DIdxRowM(tmp175, (int32_t)1, (int32_t)112, (int32_t)112, (int32_t)48,i152,i153,i154,i155) = Arr4DIdxRowM(tmp173, (int32_t)1, (int32_t)48, (int32_t)112, (int32_t)112,i148,i149,i150,i151);
i151 = (i151 +  (int64_t)1);
if ((i151 ==  (int64_t)112)) {
i151 =  (int64_t)0;
i150 = (i150 +  (int64_t)1);
if ((i150 ==  (int64_t)112)) {
i150 =  (int64_t)0;
i149 = (i149 +  (int64_t)1);
if ((i149 ==  (int64_t)48)) {
i149 =  (int64_t)0;
i148 = (i148 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)48,  (int32_t)112,  (int32_t)112, tmp173);

uint64_t* tmp177 = make_array<uint64_t>( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)48);
Relu4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)48, tmp175, tmp177,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)48, tmp175);

uint64_t* tmp179 = make_array<uint64_t>( (int32_t)1,  (int32_t)48,  (int32_t)112,  (int32_t)112);

int64_t i163;

int64_t i162;

int64_t i161;

int64_t i160;

int64_t i159;

int64_t i158;

int64_t i157;

int64_t i156;
i156 =  (int64_t)0;
i157 =  (int64_t)0;
i158 =  (int64_t)0;
i159 =  (int64_t)0;
for (uint32_t i160 =  (int32_t)0; i160 <  (int32_t)1; i160++){
for (uint32_t i162 =  (int32_t)0; i162 <  (int32_t)112; i162++){
for (uint32_t i163 =  (int32_t)0; i163 <  (int32_t)112; i163++){
for (uint32_t i161 =  (int32_t)0; i161 <  (int32_t)48; i161++){
Arr4DIdxRowM(tmp179, (int32_t)1, (int32_t)48, (int32_t)112, (int32_t)112,i160,i161,i162,i163) = Arr4DIdxRowM(tmp177, (int32_t)1, (int32_t)112, (int32_t)112, (int32_t)48,i156,i157,i158,i159);
i159 = (i159 +  (int64_t)1);
if ((i159 ==  (int64_t)48)) {
i159 =  (int64_t)0;
i158 = (i158 +  (int64_t)1);
if ((i158 ==  (int64_t)112)) {
i158 =  (int64_t)0;
i157 = (i157 +  (int64_t)1);
if ((i157 ==  (int64_t)112)) {
i157 =  (int64_t)0;
i156 = (i156 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)48, tmp177);

uint64_t* tmp181 = make_array<uint64_t>( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)48);

int64_t i171;

int64_t i170;

int64_t i169;

int64_t i168;

int64_t i167;

int64_t i166;

int64_t i165;

int64_t i164;
i164 =  (int64_t)0;
i165 =  (int64_t)0;
i166 =  (int64_t)0;
i167 =  (int64_t)0;
for (uint32_t i168 =  (int32_t)0; i168 <  (int32_t)1; i168++){
for (uint32_t i171 =  (int32_t)0; i171 <  (int32_t)48; i171++){
for (uint32_t i169 =  (int32_t)0; i169 <  (int32_t)112; i169++){
for (uint32_t i170 =  (int32_t)0; i170 <  (int32_t)112; i170++){
Arr4DIdxRowM(tmp181, (int32_t)1, (int32_t)112, (int32_t)112, (int32_t)48,i168,i169,i170,i171) = Arr4DIdxRowM(tmp179, (int32_t)1, (int32_t)48, (int32_t)112, (int32_t)112,i164,i165,i166,i167);
i167 = (i167 +  (int64_t)1);
if ((i167 ==  (int64_t)112)) {
i167 =  (int64_t)0;
i166 = (i166 +  (int64_t)1);
if ((i166 ==  (int64_t)112)) {
i166 =  (int64_t)0;
i165 = (i165 +  (int64_t)1);
if ((i165 ==  (int64_t)48)) {
i165 =  (int64_t)0;
i164 = (i164 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)48,  (int32_t)112,  (int32_t)112, tmp179);

uint64_t* tmp183 = make_array<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)1,  (int32_t)48);

int64_t i179;

int64_t i178;

int64_t i177;

int64_t i176;

int64_t i175;

int64_t i174;

int64_t i173;

int64_t i172;
i172 =  (int64_t)0;
i173 =  (int64_t)0;
i174 =  (int64_t)0;
i175 =  (int64_t)0;
for (uint32_t i179 =  (int32_t)0; i179 <  (int32_t)48; i179++){
for (uint32_t i178 =  (int32_t)0; i178 <  (int32_t)1; i178++){
for (uint32_t i176 =  (int32_t)0; i176 <  (int32_t)3; i176++){
for (uint32_t i177 =  (int32_t)0; i177 <  (int32_t)3; i177++){
Arr4DIdxRowM(tmp183, (int32_t)3, (int32_t)3, (int32_t)1, (int32_t)48,i176,i177,i178,i179) = Arr4DIdxRowM(tmp11, (int32_t)48, (int32_t)1, (int32_t)3, (int32_t)3,i172,i173,i174,i175);
i175 = (i175 +  (int64_t)1);
if ((i175 ==  (int64_t)3)) {
i175 =  (int64_t)0;
i174 = (i174 +  (int64_t)1);
if ((i174 ==  (int64_t)3)) {
i174 =  (int64_t)0;
i173 = (i173 +  (int64_t)1);
if ((i173 ==  (int64_t)1)) {
i173 =  (int64_t)0;
i172 = (i172 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)48,  (int32_t)1,  (int32_t)3,  (int32_t)3, tmp11);

uint64_t* tmp185 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)48);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)48,  (int32_t)3,  (int32_t)3,  (int32_t)48,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)2,  (int32_t)2,  (int32_t)48, tmp181, tmp183, tmp185);
ClearMemSecret4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)48, tmp181);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)1,  (int32_t)48, tmp183);

uint64_t* tmp188 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)48);

int64_t i184;

int64_t i183;

int64_t i182;

int64_t i181;

int64_t i180;
i180 =  (int64_t)0;
for (uint32_t i181 =  (int32_t)0; i181 <  (int32_t)1; i181++){
for (uint32_t i182 =  (int32_t)0; i182 <  (int32_t)1; i182++){
for (uint32_t i183 =  (int32_t)0; i183 <  (int32_t)1; i183++){
for (uint32_t i184 =  (int32_t)0; i184 <  (int32_t)48; i184++){
Arr4DIdxRowM(tmp188, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)48,i181,i182,i183,i184) = Arr1DIdxRowM(tmp12, (int32_t)48,i180);
i180 = (i180 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)48, tmp12);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)48, tmp188,  kScale);

uint64_t* tmp190 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)48);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)56; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)56; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)48; i3++){
Arr4DIdxRowM(tmp190, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)48,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp185, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)48,i0,i1,i2,i3), Arr4DIdxRowM(tmp188, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)48,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)48, tmp188);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)48, tmp185);

uint64_t* tmp193 = make_array<uint64_t>( (int32_t)1,  (int32_t)48,  (int32_t)56,  (int32_t)56);

int64_t i192;

int64_t i191;

int64_t i190;

int64_t i189;

int64_t i188;

int64_t i187;

int64_t i186;

int64_t i185;
i185 =  (int64_t)0;
i186 =  (int64_t)0;
i187 =  (int64_t)0;
i188 =  (int64_t)0;
for (uint32_t i189 =  (int32_t)0; i189 <  (int32_t)1; i189++){
for (uint32_t i191 =  (int32_t)0; i191 <  (int32_t)56; i191++){
for (uint32_t i192 =  (int32_t)0; i192 <  (int32_t)56; i192++){
for (uint32_t i190 =  (int32_t)0; i190 <  (int32_t)48; i190++){
Arr4DIdxRowM(tmp193, (int32_t)1, (int32_t)48, (int32_t)56, (int32_t)56,i189,i190,i191,i192) = Arr4DIdxRowM(tmp190, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)48,i185,i186,i187,i188);
i188 = (i188 +  (int64_t)1);
if ((i188 ==  (int64_t)48)) {
i188 =  (int64_t)0;
i187 = (i187 +  (int64_t)1);
if ((i187 ==  (int64_t)56)) {
i187 =  (int64_t)0;
i186 = (i186 +  (int64_t)1);
if ((i186 ==  (int64_t)56)) {
i186 =  (int64_t)0;
i185 = (i185 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)48, tmp190);

uint64_t* tmp195 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)48);

int64_t i200;

int64_t i199;

int64_t i198;

int64_t i197;

int64_t i196;

int64_t i195;

int64_t i194;

int64_t i193;
i193 =  (int64_t)0;
i194 =  (int64_t)0;
i195 =  (int64_t)0;
i196 =  (int64_t)0;
for (uint32_t i197 =  (int32_t)0; i197 <  (int32_t)1; i197++){
for (uint32_t i200 =  (int32_t)0; i200 <  (int32_t)48; i200++){
for (uint32_t i198 =  (int32_t)0; i198 <  (int32_t)56; i198++){
for (uint32_t i199 =  (int32_t)0; i199 <  (int32_t)56; i199++){
Arr4DIdxRowM(tmp195, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)48,i197,i198,i199,i200) = Arr4DIdxRowM(tmp193, (int32_t)1, (int32_t)48, (int32_t)56, (int32_t)56,i193,i194,i195,i196);
i196 = (i196 +  (int64_t)1);
if ((i196 ==  (int64_t)56)) {
i196 =  (int64_t)0;
i195 = (i195 +  (int64_t)1);
if ((i195 ==  (int64_t)56)) {
i195 =  (int64_t)0;
i194 = (i194 +  (int64_t)1);
if ((i194 ==  (int64_t)48)) {
i194 =  (int64_t)0;
i193 = (i193 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)48,  (int32_t)56,  (int32_t)56, tmp193);

uint64_t* tmp197 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)48);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)48, tmp195, tmp197,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)48, tmp195);

uint64_t* tmp199 = make_array<uint64_t>( (int32_t)1,  (int32_t)48,  (int32_t)56,  (int32_t)56);

int64_t i208;

int64_t i207;

int64_t i206;

int64_t i205;

int64_t i204;

int64_t i203;

int64_t i202;

int64_t i201;
i201 =  (int64_t)0;
i202 =  (int64_t)0;
i203 =  (int64_t)0;
i204 =  (int64_t)0;
for (uint32_t i205 =  (int32_t)0; i205 <  (int32_t)1; i205++){
for (uint32_t i207 =  (int32_t)0; i207 <  (int32_t)56; i207++){
for (uint32_t i208 =  (int32_t)0; i208 <  (int32_t)56; i208++){
for (uint32_t i206 =  (int32_t)0; i206 <  (int32_t)48; i206++){
Arr4DIdxRowM(tmp199, (int32_t)1, (int32_t)48, (int32_t)56, (int32_t)56,i205,i206,i207,i208) = Arr4DIdxRowM(tmp197, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)48,i201,i202,i203,i204);
i204 = (i204 +  (int64_t)1);
if ((i204 ==  (int64_t)48)) {
i204 =  (int64_t)0;
i203 = (i203 +  (int64_t)1);
if ((i203 ==  (int64_t)56)) {
i203 =  (int64_t)0;
i202 = (i202 +  (int64_t)1);
if ((i202 ==  (int64_t)56)) {
i202 =  (int64_t)0;
i201 = (i201 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)48, tmp197);

uint64_t* tmp201 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)48);

int64_t i216;

int64_t i215;

int64_t i214;

int64_t i213;

int64_t i212;

int64_t i211;

int64_t i210;

int64_t i209;
i209 =  (int64_t)0;
i210 =  (int64_t)0;
i211 =  (int64_t)0;
i212 =  (int64_t)0;
for (uint32_t i213 =  (int32_t)0; i213 <  (int32_t)1; i213++){
for (uint32_t i216 =  (int32_t)0; i216 <  (int32_t)48; i216++){
for (uint32_t i214 =  (int32_t)0; i214 <  (int32_t)56; i214++){
for (uint32_t i215 =  (int32_t)0; i215 <  (int32_t)56; i215++){
Arr4DIdxRowM(tmp201, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)48,i213,i214,i215,i216) = Arr4DIdxRowM(tmp199, (int32_t)1, (int32_t)48, (int32_t)56, (int32_t)56,i209,i210,i211,i212);
i212 = (i212 +  (int64_t)1);
if ((i212 ==  (int64_t)56)) {
i212 =  (int64_t)0;
i211 = (i211 +  (int64_t)1);
if ((i211 ==  (int64_t)56)) {
i211 =  (int64_t)0;
i210 = (i210 +  (int64_t)1);
if ((i210 ==  (int64_t)48)) {
i210 =  (int64_t)0;
i209 = (i209 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)48,  (int32_t)56,  (int32_t)56, tmp199);

uint64_t* tmp203 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)48,  (int32_t)24);

int64_t i224;

int64_t i223;

int64_t i222;

int64_t i221;

int64_t i220;

int64_t i219;

int64_t i218;

int64_t i217;
i217 =  (int64_t)0;
i218 =  (int64_t)0;
i219 =  (int64_t)0;
i220 =  (int64_t)0;
for (uint32_t i224 =  (int32_t)0; i224 <  (int32_t)24; i224++){
for (uint32_t i223 =  (int32_t)0; i223 <  (int32_t)48; i223++){
for (uint32_t i221 =  (int32_t)0; i221 <  (int32_t)1; i221++){
for (uint32_t i222 =  (int32_t)0; i222 <  (int32_t)1; i222++){
Arr4DIdxRowM(tmp203, (int32_t)1, (int32_t)1, (int32_t)48, (int32_t)24,i221,i222,i223,i224) = Arr4DIdxRowM(tmp13, (int32_t)24, (int32_t)48, (int32_t)1, (int32_t)1,i217,i218,i219,i220);
i220 = (i220 +  (int64_t)1);
if ((i220 ==  (int64_t)1)) {
i220 =  (int64_t)0;
i219 = (i219 +  (int64_t)1);
if ((i219 ==  (int64_t)1)) {
i219 =  (int64_t)0;
i218 = (i218 +  (int64_t)1);
if ((i218 ==  (int64_t)48)) {
i218 =  (int64_t)0;
i217 = (i217 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)24,  (int32_t)48,  (int32_t)1,  (int32_t)1, tmp13);

uint64_t* tmp205 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)48,  (int32_t)1,  (int32_t)1,  (int32_t)24,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp201, tmp203, tmp205);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)48,  (int32_t)24, tmp203);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)48, tmp201);

uint64_t* tmp208 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)24);

int64_t i229;

int64_t i228;

int64_t i227;

int64_t i226;

int64_t i225;
i225 =  (int64_t)0;
for (uint32_t i226 =  (int32_t)0; i226 <  (int32_t)1; i226++){
for (uint32_t i227 =  (int32_t)0; i227 <  (int32_t)1; i227++){
for (uint32_t i228 =  (int32_t)0; i228 <  (int32_t)1; i228++){
for (uint32_t i229 =  (int32_t)0; i229 <  (int32_t)24; i229++){
Arr4DIdxRowM(tmp208, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)24,i226,i227,i228,i229) = Arr1DIdxRowM(tmp14, (int32_t)24,i225);
i225 = (i225 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)24, tmp14);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)24, tmp208,  kScale);

uint64_t* tmp210 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)56; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)56; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)24; i3++){
Arr4DIdxRowM(tmp210, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)24,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp205, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)24,i0,i1,i2,i3), Arr4DIdxRowM(tmp208, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)24,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24, tmp205);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)24, tmp208);

uint64_t* tmp213 = make_array<uint64_t>( (int32_t)1,  (int32_t)24,  (int32_t)56,  (int32_t)56);

int64_t i237;

int64_t i236;

int64_t i235;

int64_t i234;

int64_t i233;

int64_t i232;

int64_t i231;

int64_t i230;
i230 =  (int64_t)0;
i231 =  (int64_t)0;
i232 =  (int64_t)0;
i233 =  (int64_t)0;
for (uint32_t i234 =  (int32_t)0; i234 <  (int32_t)1; i234++){
for (uint32_t i236 =  (int32_t)0; i236 <  (int32_t)56; i236++){
for (uint32_t i237 =  (int32_t)0; i237 <  (int32_t)56; i237++){
for (uint32_t i235 =  (int32_t)0; i235 <  (int32_t)24; i235++){
Arr4DIdxRowM(tmp213, (int32_t)1, (int32_t)24, (int32_t)56, (int32_t)56,i234,i235,i236,i237) = Arr4DIdxRowM(tmp210, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)24,i230,i231,i232,i233);
i233 = (i233 +  (int64_t)1);
if ((i233 ==  (int64_t)24)) {
i233 =  (int64_t)0;
i232 = (i232 +  (int64_t)1);
if ((i232 ==  (int64_t)56)) {
i232 =  (int64_t)0;
i231 = (i231 +  (int64_t)1);
if ((i231 ==  (int64_t)56)) {
i231 =  (int64_t)0;
i230 = (i230 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24, tmp210);

uint64_t* tmp215 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24);

int64_t i245;

int64_t i244;

int64_t i243;

int64_t i242;

int64_t i241;

int64_t i240;

int64_t i239;

int64_t i238;
i238 =  (int64_t)0;
i239 =  (int64_t)0;
i240 =  (int64_t)0;
i241 =  (int64_t)0;
for (uint32_t i242 =  (int32_t)0; i242 <  (int32_t)1; i242++){
for (uint32_t i245 =  (int32_t)0; i245 <  (int32_t)24; i245++){
for (uint32_t i243 =  (int32_t)0; i243 <  (int32_t)56; i243++){
for (uint32_t i244 =  (int32_t)0; i244 <  (int32_t)56; i244++){
Arr4DIdxRowM(tmp215, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)24,i242,i243,i244,i245) = Arr4DIdxRowM(tmp213, (int32_t)1, (int32_t)24, (int32_t)56, (int32_t)56,i238,i239,i240,i241);
i241 = (i241 +  (int64_t)1);
if ((i241 ==  (int64_t)56)) {
i241 =  (int64_t)0;
i240 = (i240 +  (int64_t)1);
if ((i240 ==  (int64_t)56)) {
i240 =  (int64_t)0;
i239 = (i239 +  (int64_t)1);
if ((i239 ==  (int64_t)24)) {
i239 =  (int64_t)0;
i238 = (i238 +  (int64_t)1);
}
}
}
}
}
}
}

uint64_t* tmp216 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)24,  (int32_t)72);

int64_t i253;

int64_t i252;

int64_t i251;

int64_t i250;

int64_t i249;

int64_t i248;

int64_t i247;

int64_t i246;
i246 =  (int64_t)0;
i247 =  (int64_t)0;
i248 =  (int64_t)0;
i249 =  (int64_t)0;
for (uint32_t i253 =  (int32_t)0; i253 <  (int32_t)72; i253++){
for (uint32_t i252 =  (int32_t)0; i252 <  (int32_t)24; i252++){
for (uint32_t i250 =  (int32_t)0; i250 <  (int32_t)1; i250++){
for (uint32_t i251 =  (int32_t)0; i251 <  (int32_t)1; i251++){
Arr4DIdxRowM(tmp216, (int32_t)1, (int32_t)1, (int32_t)24, (int32_t)72,i250,i251,i252,i253) = Arr4DIdxRowM(tmp15, (int32_t)72, (int32_t)24, (int32_t)1, (int32_t)1,i246,i247,i248,i249);
i249 = (i249 +  (int64_t)1);
if ((i249 ==  (int64_t)1)) {
i249 =  (int64_t)0;
i248 = (i248 +  (int64_t)1);
if ((i248 ==  (int64_t)1)) {
i248 =  (int64_t)0;
i247 = (i247 +  (int64_t)1);
if ((i247 ==  (int64_t)24)) {
i247 =  (int64_t)0;
i246 = (i246 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)72,  (int32_t)24,  (int32_t)1,  (int32_t)1, tmp15);

uint64_t* tmp218 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24, tmp215,  kScale);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24,  (int32_t)1,  (int32_t)1,  (int32_t)72,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp215, tmp216, tmp218);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24, tmp215);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)24,  (int32_t)72, tmp216);

uint64_t* tmp221 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)72);

int64_t i258;

int64_t i257;

int64_t i256;

int64_t i255;

int64_t i254;
i254 =  (int64_t)0;
for (uint32_t i255 =  (int32_t)0; i255 <  (int32_t)1; i255++){
for (uint32_t i256 =  (int32_t)0; i256 <  (int32_t)1; i256++){
for (uint32_t i257 =  (int32_t)0; i257 <  (int32_t)1; i257++){
for (uint32_t i258 =  (int32_t)0; i258 <  (int32_t)72; i258++){
Arr4DIdxRowM(tmp221, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)72,i255,i256,i257,i258) = Arr1DIdxRowM(tmp16, (int32_t)72,i254);
i254 = (i254 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)72, tmp16);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)72, tmp221,  kScale);

uint64_t* tmp223 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)56; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)56; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)72; i3++){
Arr4DIdxRowM(tmp223, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp218, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i0,i1,i2,i3), Arr4DIdxRowM(tmp221, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)72,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)72, tmp221);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp218);

uint64_t* tmp226 = make_array<uint64_t>( (int32_t)1,  (int32_t)72,  (int32_t)56,  (int32_t)56);

int64_t i266;

int64_t i265;

int64_t i264;

int64_t i263;

int64_t i262;

int64_t i261;

int64_t i260;

int64_t i259;
i259 =  (int64_t)0;
i260 =  (int64_t)0;
i261 =  (int64_t)0;
i262 =  (int64_t)0;
for (uint32_t i263 =  (int32_t)0; i263 <  (int32_t)1; i263++){
for (uint32_t i265 =  (int32_t)0; i265 <  (int32_t)56; i265++){
for (uint32_t i266 =  (int32_t)0; i266 <  (int32_t)56; i266++){
for (uint32_t i264 =  (int32_t)0; i264 <  (int32_t)72; i264++){
Arr4DIdxRowM(tmp226, (int32_t)1, (int32_t)72, (int32_t)56, (int32_t)56,i263,i264,i265,i266) = Arr4DIdxRowM(tmp223, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i259,i260,i261,i262);
i262 = (i262 +  (int64_t)1);
if ((i262 ==  (int64_t)72)) {
i262 =  (int64_t)0;
i261 = (i261 +  (int64_t)1);
if ((i261 ==  (int64_t)56)) {
i261 =  (int64_t)0;
i260 = (i260 +  (int64_t)1);
if ((i260 ==  (int64_t)56)) {
i260 =  (int64_t)0;
i259 = (i259 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp223);

uint64_t* tmp228 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72);

int64_t i274;

int64_t i273;

int64_t i272;

int64_t i271;

int64_t i270;

int64_t i269;

int64_t i268;

int64_t i267;
i267 =  (int64_t)0;
i268 =  (int64_t)0;
i269 =  (int64_t)0;
i270 =  (int64_t)0;
for (uint32_t i271 =  (int32_t)0; i271 <  (int32_t)1; i271++){
for (uint32_t i274 =  (int32_t)0; i274 <  (int32_t)72; i274++){
for (uint32_t i272 =  (int32_t)0; i272 <  (int32_t)56; i272++){
for (uint32_t i273 =  (int32_t)0; i273 <  (int32_t)56; i273++){
Arr4DIdxRowM(tmp228, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i271,i272,i273,i274) = Arr4DIdxRowM(tmp226, (int32_t)1, (int32_t)72, (int32_t)56, (int32_t)56,i267,i268,i269,i270);
i270 = (i270 +  (int64_t)1);
if ((i270 ==  (int64_t)56)) {
i270 =  (int64_t)0;
i269 = (i269 +  (int64_t)1);
if ((i269 ==  (int64_t)56)) {
i269 =  (int64_t)0;
i268 = (i268 +  (int64_t)1);
if ((i268 ==  (int64_t)72)) {
i268 =  (int64_t)0;
i267 = (i267 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)72,  (int32_t)56,  (int32_t)56, tmp226);

uint64_t* tmp230 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp228, tmp230,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp228);

uint64_t* tmp232 = make_array<uint64_t>( (int32_t)1,  (int32_t)72,  (int32_t)56,  (int32_t)56);

int64_t i282;

int64_t i281;

int64_t i280;

int64_t i279;

int64_t i278;

int64_t i277;

int64_t i276;

int64_t i275;
i275 =  (int64_t)0;
i276 =  (int64_t)0;
i277 =  (int64_t)0;
i278 =  (int64_t)0;
for (uint32_t i279 =  (int32_t)0; i279 <  (int32_t)1; i279++){
for (uint32_t i281 =  (int32_t)0; i281 <  (int32_t)56; i281++){
for (uint32_t i282 =  (int32_t)0; i282 <  (int32_t)56; i282++){
for (uint32_t i280 =  (int32_t)0; i280 <  (int32_t)72; i280++){
Arr4DIdxRowM(tmp232, (int32_t)1, (int32_t)72, (int32_t)56, (int32_t)56,i279,i280,i281,i282) = Arr4DIdxRowM(tmp230, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i275,i276,i277,i278);
i278 = (i278 +  (int64_t)1);
if ((i278 ==  (int64_t)72)) {
i278 =  (int64_t)0;
i277 = (i277 +  (int64_t)1);
if ((i277 ==  (int64_t)56)) {
i277 =  (int64_t)0;
i276 = (i276 +  (int64_t)1);
if ((i276 ==  (int64_t)56)) {
i276 =  (int64_t)0;
i275 = (i275 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp230);

uint64_t* tmp234 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72);

int64_t i290;

int64_t i289;

int64_t i288;

int64_t i287;

int64_t i286;

int64_t i285;

int64_t i284;

int64_t i283;
i283 =  (int64_t)0;
i284 =  (int64_t)0;
i285 =  (int64_t)0;
i286 =  (int64_t)0;
for (uint32_t i287 =  (int32_t)0; i287 <  (int32_t)1; i287++){
for (uint32_t i290 =  (int32_t)0; i290 <  (int32_t)72; i290++){
for (uint32_t i288 =  (int32_t)0; i288 <  (int32_t)56; i288++){
for (uint32_t i289 =  (int32_t)0; i289 <  (int32_t)56; i289++){
Arr4DIdxRowM(tmp234, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i287,i288,i289,i290) = Arr4DIdxRowM(tmp232, (int32_t)1, (int32_t)72, (int32_t)56, (int32_t)56,i283,i284,i285,i286);
i286 = (i286 +  (int64_t)1);
if ((i286 ==  (int64_t)56)) {
i286 =  (int64_t)0;
i285 = (i285 +  (int64_t)1);
if ((i285 ==  (int64_t)56)) {
i285 =  (int64_t)0;
i284 = (i284 +  (int64_t)1);
if ((i284 ==  (int64_t)72)) {
i284 =  (int64_t)0;
i283 = (i283 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)72,  (int32_t)56,  (int32_t)56, tmp232);

uint64_t* tmp236 = make_array<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)1,  (int32_t)72);

int64_t i298;

int64_t i297;

int64_t i296;

int64_t i295;

int64_t i294;

int64_t i293;

int64_t i292;

int64_t i291;
i291 =  (int64_t)0;
i292 =  (int64_t)0;
i293 =  (int64_t)0;
i294 =  (int64_t)0;
for (uint32_t i298 =  (int32_t)0; i298 <  (int32_t)72; i298++){
for (uint32_t i297 =  (int32_t)0; i297 <  (int32_t)1; i297++){
for (uint32_t i295 =  (int32_t)0; i295 <  (int32_t)3; i295++){
for (uint32_t i296 =  (int32_t)0; i296 <  (int32_t)3; i296++){
Arr4DIdxRowM(tmp236, (int32_t)3, (int32_t)3, (int32_t)1, (int32_t)72,i295,i296,i297,i298) = Arr4DIdxRowM(tmp17, (int32_t)72, (int32_t)1, (int32_t)3, (int32_t)3,i291,i292,i293,i294);
i294 = (i294 +  (int64_t)1);
if ((i294 ==  (int64_t)3)) {
i294 =  (int64_t)0;
i293 = (i293 +  (int64_t)1);
if ((i293 ==  (int64_t)3)) {
i293 =  (int64_t)0;
i292 = (i292 +  (int64_t)1);
if ((i292 ==  (int64_t)1)) {
i292 =  (int64_t)0;
i291 = (i291 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)72,  (int32_t)1,  (int32_t)3,  (int32_t)3, tmp17);

uint64_t* tmp238 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72,  (int32_t)3,  (int32_t)3,  (int32_t)72,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)72, tmp234, tmp236, tmp238);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp234);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)1,  (int32_t)72, tmp236);

uint64_t* tmp241 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)72);

int64_t i303;

int64_t i302;

int64_t i301;

int64_t i300;

int64_t i299;
i299 =  (int64_t)0;
for (uint32_t i300 =  (int32_t)0; i300 <  (int32_t)1; i300++){
for (uint32_t i301 =  (int32_t)0; i301 <  (int32_t)1; i301++){
for (uint32_t i302 =  (int32_t)0; i302 <  (int32_t)1; i302++){
for (uint32_t i303 =  (int32_t)0; i303 <  (int32_t)72; i303++){
Arr4DIdxRowM(tmp241, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)72,i300,i301,i302,i303) = Arr1DIdxRowM(tmp18, (int32_t)72,i299);
i299 = (i299 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)72, tmp18);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)72, tmp241,  kScale);

uint64_t* tmp243 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)56; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)56; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)72; i3++){
Arr4DIdxRowM(tmp243, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp238, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i0,i1,i2,i3), Arr4DIdxRowM(tmp241, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)72,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)72, tmp241);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp238);

uint64_t* tmp246 = make_array<uint64_t>( (int32_t)1,  (int32_t)72,  (int32_t)56,  (int32_t)56);

int64_t i311;

int64_t i310;

int64_t i309;

int64_t i308;

int64_t i307;

int64_t i306;

int64_t i305;

int64_t i304;
i304 =  (int64_t)0;
i305 =  (int64_t)0;
i306 =  (int64_t)0;
i307 =  (int64_t)0;
for (uint32_t i308 =  (int32_t)0; i308 <  (int32_t)1; i308++){
for (uint32_t i310 =  (int32_t)0; i310 <  (int32_t)56; i310++){
for (uint32_t i311 =  (int32_t)0; i311 <  (int32_t)56; i311++){
for (uint32_t i309 =  (int32_t)0; i309 <  (int32_t)72; i309++){
Arr4DIdxRowM(tmp246, (int32_t)1, (int32_t)72, (int32_t)56, (int32_t)56,i308,i309,i310,i311) = Arr4DIdxRowM(tmp243, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i304,i305,i306,i307);
i307 = (i307 +  (int64_t)1);
if ((i307 ==  (int64_t)72)) {
i307 =  (int64_t)0;
i306 = (i306 +  (int64_t)1);
if ((i306 ==  (int64_t)56)) {
i306 =  (int64_t)0;
i305 = (i305 +  (int64_t)1);
if ((i305 ==  (int64_t)56)) {
i305 =  (int64_t)0;
i304 = (i304 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp243);

uint64_t* tmp248 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72);

int64_t i319;

int64_t i318;

int64_t i317;

int64_t i316;

int64_t i315;

int64_t i314;

int64_t i313;

int64_t i312;
i312 =  (int64_t)0;
i313 =  (int64_t)0;
i314 =  (int64_t)0;
i315 =  (int64_t)0;
for (uint32_t i316 =  (int32_t)0; i316 <  (int32_t)1; i316++){
for (uint32_t i319 =  (int32_t)0; i319 <  (int32_t)72; i319++){
for (uint32_t i317 =  (int32_t)0; i317 <  (int32_t)56; i317++){
for (uint32_t i318 =  (int32_t)0; i318 <  (int32_t)56; i318++){
Arr4DIdxRowM(tmp248, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i316,i317,i318,i319) = Arr4DIdxRowM(tmp246, (int32_t)1, (int32_t)72, (int32_t)56, (int32_t)56,i312,i313,i314,i315);
i315 = (i315 +  (int64_t)1);
if ((i315 ==  (int64_t)56)) {
i315 =  (int64_t)0;
i314 = (i314 +  (int64_t)1);
if ((i314 ==  (int64_t)56)) {
i314 =  (int64_t)0;
i313 = (i313 +  (int64_t)1);
if ((i313 ==  (int64_t)72)) {
i313 =  (int64_t)0;
i312 = (i312 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)72,  (int32_t)56,  (int32_t)56, tmp246);

uint64_t* tmp250 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp248, tmp250,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp248);

uint64_t* tmp252 = make_array<uint64_t>( (int32_t)1,  (int32_t)72,  (int32_t)56,  (int32_t)56);

int64_t i327;

int64_t i326;

int64_t i325;

int64_t i324;

int64_t i323;

int64_t i322;

int64_t i321;

int64_t i320;
i320 =  (int64_t)0;
i321 =  (int64_t)0;
i322 =  (int64_t)0;
i323 =  (int64_t)0;
for (uint32_t i324 =  (int32_t)0; i324 <  (int32_t)1; i324++){
for (uint32_t i326 =  (int32_t)0; i326 <  (int32_t)56; i326++){
for (uint32_t i327 =  (int32_t)0; i327 <  (int32_t)56; i327++){
for (uint32_t i325 =  (int32_t)0; i325 <  (int32_t)72; i325++){
Arr4DIdxRowM(tmp252, (int32_t)1, (int32_t)72, (int32_t)56, (int32_t)56,i324,i325,i326,i327) = Arr4DIdxRowM(tmp250, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i320,i321,i322,i323);
i323 = (i323 +  (int64_t)1);
if ((i323 ==  (int64_t)72)) {
i323 =  (int64_t)0;
i322 = (i322 +  (int64_t)1);
if ((i322 ==  (int64_t)56)) {
i322 =  (int64_t)0;
i321 = (i321 +  (int64_t)1);
if ((i321 ==  (int64_t)56)) {
i321 =  (int64_t)0;
i320 = (i320 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp250);

uint64_t* tmp254 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72);

int64_t i335;

int64_t i334;

int64_t i333;

int64_t i332;

int64_t i331;

int64_t i330;

int64_t i329;

int64_t i328;
i328 =  (int64_t)0;
i329 =  (int64_t)0;
i330 =  (int64_t)0;
i331 =  (int64_t)0;
for (uint32_t i332 =  (int32_t)0; i332 <  (int32_t)1; i332++){
for (uint32_t i335 =  (int32_t)0; i335 <  (int32_t)72; i335++){
for (uint32_t i333 =  (int32_t)0; i333 <  (int32_t)56; i333++){
for (uint32_t i334 =  (int32_t)0; i334 <  (int32_t)56; i334++){
Arr4DIdxRowM(tmp254, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i332,i333,i334,i335) = Arr4DIdxRowM(tmp252, (int32_t)1, (int32_t)72, (int32_t)56, (int32_t)56,i328,i329,i330,i331);
i331 = (i331 +  (int64_t)1);
if ((i331 ==  (int64_t)56)) {
i331 =  (int64_t)0;
i330 = (i330 +  (int64_t)1);
if ((i330 ==  (int64_t)56)) {
i330 =  (int64_t)0;
i329 = (i329 +  (int64_t)1);
if ((i329 ==  (int64_t)72)) {
i329 =  (int64_t)0;
i328 = (i328 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)72,  (int32_t)56,  (int32_t)56, tmp252);

uint64_t* tmp256 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)72,  (int32_t)24);

int64_t i343;

int64_t i342;

int64_t i341;

int64_t i340;

int64_t i339;

int64_t i338;

int64_t i337;

int64_t i336;
i336 =  (int64_t)0;
i337 =  (int64_t)0;
i338 =  (int64_t)0;
i339 =  (int64_t)0;
for (uint32_t i343 =  (int32_t)0; i343 <  (int32_t)24; i343++){
for (uint32_t i342 =  (int32_t)0; i342 <  (int32_t)72; i342++){
for (uint32_t i340 =  (int32_t)0; i340 <  (int32_t)1; i340++){
for (uint32_t i341 =  (int32_t)0; i341 <  (int32_t)1; i341++){
Arr4DIdxRowM(tmp256, (int32_t)1, (int32_t)1, (int32_t)72, (int32_t)24,i340,i341,i342,i343) = Arr4DIdxRowM(tmp19, (int32_t)24, (int32_t)72, (int32_t)1, (int32_t)1,i336,i337,i338,i339);
i339 = (i339 +  (int64_t)1);
if ((i339 ==  (int64_t)1)) {
i339 =  (int64_t)0;
i338 = (i338 +  (int64_t)1);
if ((i338 ==  (int64_t)1)) {
i338 =  (int64_t)0;
i337 = (i337 +  (int64_t)1);
if ((i337 ==  (int64_t)72)) {
i337 =  (int64_t)0;
i336 = (i336 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)24,  (int32_t)72,  (int32_t)1,  (int32_t)1, tmp19);

uint64_t* tmp258 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72,  (int32_t)1,  (int32_t)1,  (int32_t)24,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp254, tmp256, tmp258);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp254);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)72,  (int32_t)24, tmp256);

uint64_t* tmp261 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)24);

int64_t i348;

int64_t i347;

int64_t i346;

int64_t i345;

int64_t i344;
i344 =  (int64_t)0;
for (uint32_t i345 =  (int32_t)0; i345 <  (int32_t)1; i345++){
for (uint32_t i346 =  (int32_t)0; i346 <  (int32_t)1; i346++){
for (uint32_t i347 =  (int32_t)0; i347 <  (int32_t)1; i347++){
for (uint32_t i348 =  (int32_t)0; i348 <  (int32_t)24; i348++){
Arr4DIdxRowM(tmp261, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)24,i345,i346,i347,i348) = Arr1DIdxRowM(tmp20, (int32_t)24,i344);
i344 = (i344 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)24, tmp20);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)24, tmp261,  kScale);

uint64_t* tmp263 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)56; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)56; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)24; i3++){
Arr4DIdxRowM(tmp263, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)24,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp258, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)24,i0,i1,i2,i3), Arr4DIdxRowM(tmp261, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)24,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)24, tmp261);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24, tmp258);

uint64_t* tmp266 = make_array<uint64_t>( (int32_t)1,  (int32_t)24,  (int32_t)56,  (int32_t)56);

int64_t i356;

int64_t i355;

int64_t i354;

int64_t i353;

int64_t i352;

int64_t i351;

int64_t i350;

int64_t i349;
i349 =  (int64_t)0;
i350 =  (int64_t)0;
i351 =  (int64_t)0;
i352 =  (int64_t)0;
for (uint32_t i353 =  (int32_t)0; i353 <  (int32_t)1; i353++){
for (uint32_t i355 =  (int32_t)0; i355 <  (int32_t)56; i355++){
for (uint32_t i356 =  (int32_t)0; i356 <  (int32_t)56; i356++){
for (uint32_t i354 =  (int32_t)0; i354 <  (int32_t)24; i354++){
Arr4DIdxRowM(tmp266, (int32_t)1, (int32_t)24, (int32_t)56, (int32_t)56,i353,i354,i355,i356) = Arr4DIdxRowM(tmp263, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)24,i349,i350,i351,i352);
i352 = (i352 +  (int64_t)1);
if ((i352 ==  (int64_t)24)) {
i352 =  (int64_t)0;
i351 = (i351 +  (int64_t)1);
if ((i351 ==  (int64_t)56)) {
i351 =  (int64_t)0;
i350 = (i350 +  (int64_t)1);
if ((i350 ==  (int64_t)56)) {
i350 =  (int64_t)0;
i349 = (i349 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24, tmp263);

uint64_t* tmp268 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24);

int64_t i364;

int64_t i363;

int64_t i362;

int64_t i361;

int64_t i360;

int64_t i359;

int64_t i358;

int64_t i357;
i357 =  (int64_t)0;
i358 =  (int64_t)0;
i359 =  (int64_t)0;
i360 =  (int64_t)0;
for (uint32_t i361 =  (int32_t)0; i361 <  (int32_t)1; i361++){
for (uint32_t i364 =  (int32_t)0; i364 <  (int32_t)24; i364++){
for (uint32_t i362 =  (int32_t)0; i362 <  (int32_t)56; i362++){
for (uint32_t i363 =  (int32_t)0; i363 <  (int32_t)56; i363++){
Arr4DIdxRowM(tmp268, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)24,i361,i362,i363,i364) = Arr4DIdxRowM(tmp266, (int32_t)1, (int32_t)24, (int32_t)56, (int32_t)56,i357,i358,i359,i360);
i360 = (i360 +  (int64_t)1);
if ((i360 ==  (int64_t)56)) {
i360 =  (int64_t)0;
i359 = (i359 +  (int64_t)1);
if ((i359 ==  (int64_t)56)) {
i359 =  (int64_t)0;
i358 = (i358 +  (int64_t)1);
if ((i358 ==  (int64_t)24)) {
i358 =  (int64_t)0;
i357 = (i357 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)24,  (int32_t)56,  (int32_t)56, tmp266);

uint64_t* tmp270 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24);

int64_t i372;

int64_t i371;

int64_t i370;

int64_t i369;

int64_t i368;

int64_t i367;

int64_t i366;

int64_t i365;
i365 =  (int64_t)0;
i366 =  (int64_t)0;
i367 =  (int64_t)0;
i368 =  (int64_t)0;
for (uint32_t i369 =  (int32_t)0; i369 <  (int32_t)1; i369++){
for (uint32_t i372 =  (int32_t)0; i372 <  (int32_t)24; i372++){
for (uint32_t i370 =  (int32_t)0; i370 <  (int32_t)56; i370++){
for (uint32_t i371 =  (int32_t)0; i371 <  (int32_t)56; i371++){
Arr4DIdxRowM(tmp270, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)24,i369,i370,i371,i372) = Arr4DIdxRowM(tmp213, (int32_t)1, (int32_t)24, (int32_t)56, (int32_t)56,i365,i366,i367,i368);
i368 = (i368 +  (int64_t)1);
if ((i368 ==  (int64_t)56)) {
i368 =  (int64_t)0;
i367 = (i367 +  (int64_t)1);
if ((i367 ==  (int64_t)56)) {
i367 =  (int64_t)0;
i366 = (i366 +  (int64_t)1);
if ((i366 ==  (int64_t)24)) {
i366 =  (int64_t)0;
i365 = (i365 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)24,  (int32_t)56,  (int32_t)56, tmp213);

uint64_t* tmp272 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)56; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)56; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)24; i3++){
Arr4DIdxRowM(tmp272, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)24,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp268, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)24,i0,i1,i2,i3), Arr4DIdxRowM(tmp270, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)24,i0,i1,i2,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24, tmp270);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24, tmp268);

uint64_t* tmp275 = make_array<uint64_t>( (int32_t)1,  (int32_t)24,  (int32_t)56,  (int32_t)56);

int64_t i380;

int64_t i379;

int64_t i378;

int64_t i377;

int64_t i376;

int64_t i375;

int64_t i374;

int64_t i373;
i373 =  (int64_t)0;
i374 =  (int64_t)0;
i375 =  (int64_t)0;
i376 =  (int64_t)0;
for (uint32_t i377 =  (int32_t)0; i377 <  (int32_t)1; i377++){
for (uint32_t i379 =  (int32_t)0; i379 <  (int32_t)56; i379++){
for (uint32_t i380 =  (int32_t)0; i380 <  (int32_t)56; i380++){
for (uint32_t i378 =  (int32_t)0; i378 <  (int32_t)24; i378++){
Arr4DIdxRowM(tmp275, (int32_t)1, (int32_t)24, (int32_t)56, (int32_t)56,i377,i378,i379,i380) = Arr4DIdxRowM(tmp272, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)24,i373,i374,i375,i376);
i376 = (i376 +  (int64_t)1);
if ((i376 ==  (int64_t)24)) {
i376 =  (int64_t)0;
i375 = (i375 +  (int64_t)1);
if ((i375 ==  (int64_t)56)) {
i375 =  (int64_t)0;
i374 = (i374 +  (int64_t)1);
if ((i374 ==  (int64_t)56)) {
i374 =  (int64_t)0;
i373 = (i373 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24, tmp272);

uint64_t* tmp277 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24);

int64_t i388;

int64_t i387;

int64_t i386;

int64_t i385;

int64_t i384;

int64_t i383;

int64_t i382;

int64_t i381;
i381 =  (int64_t)0;
i382 =  (int64_t)0;
i383 =  (int64_t)0;
i384 =  (int64_t)0;
for (uint32_t i385 =  (int32_t)0; i385 <  (int32_t)1; i385++){
for (uint32_t i388 =  (int32_t)0; i388 <  (int32_t)24; i388++){
for (uint32_t i386 =  (int32_t)0; i386 <  (int32_t)56; i386++){
for (uint32_t i387 =  (int32_t)0; i387 <  (int32_t)56; i387++){
Arr4DIdxRowM(tmp277, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)24,i385,i386,i387,i388) = Arr4DIdxRowM(tmp275, (int32_t)1, (int32_t)24, (int32_t)56, (int32_t)56,i381,i382,i383,i384);
i384 = (i384 +  (int64_t)1);
if ((i384 ==  (int64_t)56)) {
i384 =  (int64_t)0;
i383 = (i383 +  (int64_t)1);
if ((i383 ==  (int64_t)56)) {
i383 =  (int64_t)0;
i382 = (i382 +  (int64_t)1);
if ((i382 ==  (int64_t)24)) {
i382 =  (int64_t)0;
i381 = (i381 +  (int64_t)1);
}
}
}
}
}
}
}

uint64_t* tmp278 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)24,  (int32_t)72);

int64_t i396;

int64_t i395;

int64_t i394;

int64_t i393;

int64_t i392;

int64_t i391;

int64_t i390;

int64_t i389;
i389 =  (int64_t)0;
i390 =  (int64_t)0;
i391 =  (int64_t)0;
i392 =  (int64_t)0;
for (uint32_t i396 =  (int32_t)0; i396 <  (int32_t)72; i396++){
for (uint32_t i395 =  (int32_t)0; i395 <  (int32_t)24; i395++){
for (uint32_t i393 =  (int32_t)0; i393 <  (int32_t)1; i393++){
for (uint32_t i394 =  (int32_t)0; i394 <  (int32_t)1; i394++){
Arr4DIdxRowM(tmp278, (int32_t)1, (int32_t)1, (int32_t)24, (int32_t)72,i393,i394,i395,i396) = Arr4DIdxRowM(tmp21, (int32_t)72, (int32_t)24, (int32_t)1, (int32_t)1,i389,i390,i391,i392);
i392 = (i392 +  (int64_t)1);
if ((i392 ==  (int64_t)1)) {
i392 =  (int64_t)0;
i391 = (i391 +  (int64_t)1);
if ((i391 ==  (int64_t)1)) {
i391 =  (int64_t)0;
i390 = (i390 +  (int64_t)1);
if ((i390 ==  (int64_t)24)) {
i390 =  (int64_t)0;
i389 = (i389 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)72,  (int32_t)24,  (int32_t)1,  (int32_t)1, tmp21);

uint64_t* tmp280 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24, tmp277,  kScale);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24,  (int32_t)1,  (int32_t)1,  (int32_t)72,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp277, tmp278, tmp280);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)24,  (int32_t)72, tmp278);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24, tmp277);

uint64_t* tmp283 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)72);

int64_t i401;

int64_t i400;

int64_t i399;

int64_t i398;

int64_t i397;
i397 =  (int64_t)0;
for (uint32_t i398 =  (int32_t)0; i398 <  (int32_t)1; i398++){
for (uint32_t i399 =  (int32_t)0; i399 <  (int32_t)1; i399++){
for (uint32_t i400 =  (int32_t)0; i400 <  (int32_t)1; i400++){
for (uint32_t i401 =  (int32_t)0; i401 <  (int32_t)72; i401++){
Arr4DIdxRowM(tmp283, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)72,i398,i399,i400,i401) = Arr1DIdxRowM(tmp22, (int32_t)72,i397);
i397 = (i397 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)72, tmp22);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)72, tmp283,  kScale);

uint64_t* tmp285 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)56; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)56; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)72; i3++){
Arr4DIdxRowM(tmp285, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp280, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i0,i1,i2,i3), Arr4DIdxRowM(tmp283, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)72,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)72, tmp283);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp280);

uint64_t* tmp288 = make_array<uint64_t>( (int32_t)1,  (int32_t)72,  (int32_t)56,  (int32_t)56);

int64_t i409;

int64_t i408;

int64_t i407;

int64_t i406;

int64_t i405;

int64_t i404;

int64_t i403;

int64_t i402;
i402 =  (int64_t)0;
i403 =  (int64_t)0;
i404 =  (int64_t)0;
i405 =  (int64_t)0;
for (uint32_t i406 =  (int32_t)0; i406 <  (int32_t)1; i406++){
for (uint32_t i408 =  (int32_t)0; i408 <  (int32_t)56; i408++){
for (uint32_t i409 =  (int32_t)0; i409 <  (int32_t)56; i409++){
for (uint32_t i407 =  (int32_t)0; i407 <  (int32_t)72; i407++){
Arr4DIdxRowM(tmp288, (int32_t)1, (int32_t)72, (int32_t)56, (int32_t)56,i406,i407,i408,i409) = Arr4DIdxRowM(tmp285, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i402,i403,i404,i405);
i405 = (i405 +  (int64_t)1);
if ((i405 ==  (int64_t)72)) {
i405 =  (int64_t)0;
i404 = (i404 +  (int64_t)1);
if ((i404 ==  (int64_t)56)) {
i404 =  (int64_t)0;
i403 = (i403 +  (int64_t)1);
if ((i403 ==  (int64_t)56)) {
i403 =  (int64_t)0;
i402 = (i402 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp285);

uint64_t* tmp290 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72);

int64_t i417;

int64_t i416;

int64_t i415;

int64_t i414;

int64_t i413;

int64_t i412;

int64_t i411;

int64_t i410;
i410 =  (int64_t)0;
i411 =  (int64_t)0;
i412 =  (int64_t)0;
i413 =  (int64_t)0;
for (uint32_t i414 =  (int32_t)0; i414 <  (int32_t)1; i414++){
for (uint32_t i417 =  (int32_t)0; i417 <  (int32_t)72; i417++){
for (uint32_t i415 =  (int32_t)0; i415 <  (int32_t)56; i415++){
for (uint32_t i416 =  (int32_t)0; i416 <  (int32_t)56; i416++){
Arr4DIdxRowM(tmp290, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i414,i415,i416,i417) = Arr4DIdxRowM(tmp288, (int32_t)1, (int32_t)72, (int32_t)56, (int32_t)56,i410,i411,i412,i413);
i413 = (i413 +  (int64_t)1);
if ((i413 ==  (int64_t)56)) {
i413 =  (int64_t)0;
i412 = (i412 +  (int64_t)1);
if ((i412 ==  (int64_t)56)) {
i412 =  (int64_t)0;
i411 = (i411 +  (int64_t)1);
if ((i411 ==  (int64_t)72)) {
i411 =  (int64_t)0;
i410 = (i410 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)72,  (int32_t)56,  (int32_t)56, tmp288);

uint64_t* tmp292 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp290, tmp292,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp290);

uint64_t* tmp294 = make_array<uint64_t>( (int32_t)1,  (int32_t)72,  (int32_t)56,  (int32_t)56);

int64_t i425;

int64_t i424;

int64_t i423;

int64_t i422;

int64_t i421;

int64_t i420;

int64_t i419;

int64_t i418;
i418 =  (int64_t)0;
i419 =  (int64_t)0;
i420 =  (int64_t)0;
i421 =  (int64_t)0;
for (uint32_t i422 =  (int32_t)0; i422 <  (int32_t)1; i422++){
for (uint32_t i424 =  (int32_t)0; i424 <  (int32_t)56; i424++){
for (uint32_t i425 =  (int32_t)0; i425 <  (int32_t)56; i425++){
for (uint32_t i423 =  (int32_t)0; i423 <  (int32_t)72; i423++){
Arr4DIdxRowM(tmp294, (int32_t)1, (int32_t)72, (int32_t)56, (int32_t)56,i422,i423,i424,i425) = Arr4DIdxRowM(tmp292, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i418,i419,i420,i421);
i421 = (i421 +  (int64_t)1);
if ((i421 ==  (int64_t)72)) {
i421 =  (int64_t)0;
i420 = (i420 +  (int64_t)1);
if ((i420 ==  (int64_t)56)) {
i420 =  (int64_t)0;
i419 = (i419 +  (int64_t)1);
if ((i419 ==  (int64_t)56)) {
i419 =  (int64_t)0;
i418 = (i418 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp292);

uint64_t* tmp296 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72);

int64_t i433;

int64_t i432;

int64_t i431;

int64_t i430;

int64_t i429;

int64_t i428;

int64_t i427;

int64_t i426;
i426 =  (int64_t)0;
i427 =  (int64_t)0;
i428 =  (int64_t)0;
i429 =  (int64_t)0;
for (uint32_t i430 =  (int32_t)0; i430 <  (int32_t)1; i430++){
for (uint32_t i433 =  (int32_t)0; i433 <  (int32_t)72; i433++){
for (uint32_t i431 =  (int32_t)0; i431 <  (int32_t)56; i431++){
for (uint32_t i432 =  (int32_t)0; i432 <  (int32_t)56; i432++){
Arr4DIdxRowM(tmp296, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i430,i431,i432,i433) = Arr4DIdxRowM(tmp294, (int32_t)1, (int32_t)72, (int32_t)56, (int32_t)56,i426,i427,i428,i429);
i429 = (i429 +  (int64_t)1);
if ((i429 ==  (int64_t)56)) {
i429 =  (int64_t)0;
i428 = (i428 +  (int64_t)1);
if ((i428 ==  (int64_t)56)) {
i428 =  (int64_t)0;
i427 = (i427 +  (int64_t)1);
if ((i427 ==  (int64_t)72)) {
i427 =  (int64_t)0;
i426 = (i426 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)72,  (int32_t)56,  (int32_t)56, tmp294);

uint64_t* tmp298 = make_array<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)1,  (int32_t)72);

int64_t i441;

int64_t i440;

int64_t i439;

int64_t i438;

int64_t i437;

int64_t i436;

int64_t i435;

int64_t i434;
i434 =  (int64_t)0;
i435 =  (int64_t)0;
i436 =  (int64_t)0;
i437 =  (int64_t)0;
for (uint32_t i441 =  (int32_t)0; i441 <  (int32_t)72; i441++){
for (uint32_t i440 =  (int32_t)0; i440 <  (int32_t)1; i440++){
for (uint32_t i438 =  (int32_t)0; i438 <  (int32_t)3; i438++){
for (uint32_t i439 =  (int32_t)0; i439 <  (int32_t)3; i439++){
Arr4DIdxRowM(tmp298, (int32_t)3, (int32_t)3, (int32_t)1, (int32_t)72,i438,i439,i440,i441) = Arr4DIdxRowM(tmp23, (int32_t)72, (int32_t)1, (int32_t)3, (int32_t)3,i434,i435,i436,i437);
i437 = (i437 +  (int64_t)1);
if ((i437 ==  (int64_t)3)) {
i437 =  (int64_t)0;
i436 = (i436 +  (int64_t)1);
if ((i436 ==  (int64_t)3)) {
i436 =  (int64_t)0;
i435 = (i435 +  (int64_t)1);
if ((i435 ==  (int64_t)1)) {
i435 =  (int64_t)0;
i434 = (i434 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)72,  (int32_t)1,  (int32_t)3,  (int32_t)3, tmp23);

uint64_t* tmp300 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72,  (int32_t)3,  (int32_t)3,  (int32_t)72,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)72, tmp296, tmp298, tmp300);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)1,  (int32_t)72, tmp298);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp296);

uint64_t* tmp303 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)72);

int64_t i446;

int64_t i445;

int64_t i444;

int64_t i443;

int64_t i442;
i442 =  (int64_t)0;
for (uint32_t i443 =  (int32_t)0; i443 <  (int32_t)1; i443++){
for (uint32_t i444 =  (int32_t)0; i444 <  (int32_t)1; i444++){
for (uint32_t i445 =  (int32_t)0; i445 <  (int32_t)1; i445++){
for (uint32_t i446 =  (int32_t)0; i446 <  (int32_t)72; i446++){
Arr4DIdxRowM(tmp303, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)72,i443,i444,i445,i446) = Arr1DIdxRowM(tmp24, (int32_t)72,i442);
i442 = (i442 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)72, tmp24);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)72, tmp303,  kScale);

uint64_t* tmp305 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)56; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)56; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)72; i3++){
Arr4DIdxRowM(tmp305, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp300, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i0,i1,i2,i3), Arr4DIdxRowM(tmp303, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)72,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)72, tmp303);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp300);

uint64_t* tmp308 = make_array<uint64_t>( (int32_t)1,  (int32_t)72,  (int32_t)56,  (int32_t)56);

int64_t i454;

int64_t i453;

int64_t i452;

int64_t i451;

int64_t i450;

int64_t i449;

int64_t i448;

int64_t i447;
i447 =  (int64_t)0;
i448 =  (int64_t)0;
i449 =  (int64_t)0;
i450 =  (int64_t)0;
for (uint32_t i451 =  (int32_t)0; i451 <  (int32_t)1; i451++){
for (uint32_t i453 =  (int32_t)0; i453 <  (int32_t)56; i453++){
for (uint32_t i454 =  (int32_t)0; i454 <  (int32_t)56; i454++){
for (uint32_t i452 =  (int32_t)0; i452 <  (int32_t)72; i452++){
Arr4DIdxRowM(tmp308, (int32_t)1, (int32_t)72, (int32_t)56, (int32_t)56,i451,i452,i453,i454) = Arr4DIdxRowM(tmp305, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i447,i448,i449,i450);
i450 = (i450 +  (int64_t)1);
if ((i450 ==  (int64_t)72)) {
i450 =  (int64_t)0;
i449 = (i449 +  (int64_t)1);
if ((i449 ==  (int64_t)56)) {
i449 =  (int64_t)0;
i448 = (i448 +  (int64_t)1);
if ((i448 ==  (int64_t)56)) {
i448 =  (int64_t)0;
i447 = (i447 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp305);

uint64_t* tmp310 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72);

int64_t i462;

int64_t i461;

int64_t i460;

int64_t i459;

int64_t i458;

int64_t i457;

int64_t i456;

int64_t i455;
i455 =  (int64_t)0;
i456 =  (int64_t)0;
i457 =  (int64_t)0;
i458 =  (int64_t)0;
for (uint32_t i459 =  (int32_t)0; i459 <  (int32_t)1; i459++){
for (uint32_t i462 =  (int32_t)0; i462 <  (int32_t)72; i462++){
for (uint32_t i460 =  (int32_t)0; i460 <  (int32_t)56; i460++){
for (uint32_t i461 =  (int32_t)0; i461 <  (int32_t)56; i461++){
Arr4DIdxRowM(tmp310, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i459,i460,i461,i462) = Arr4DIdxRowM(tmp308, (int32_t)1, (int32_t)72, (int32_t)56, (int32_t)56,i455,i456,i457,i458);
i458 = (i458 +  (int64_t)1);
if ((i458 ==  (int64_t)56)) {
i458 =  (int64_t)0;
i457 = (i457 +  (int64_t)1);
if ((i457 ==  (int64_t)56)) {
i457 =  (int64_t)0;
i456 = (i456 +  (int64_t)1);
if ((i456 ==  (int64_t)72)) {
i456 =  (int64_t)0;
i455 = (i455 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)72,  (int32_t)56,  (int32_t)56, tmp308);

uint64_t* tmp312 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp310, tmp312,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp310);

uint64_t* tmp314 = make_array<uint64_t>( (int32_t)1,  (int32_t)72,  (int32_t)56,  (int32_t)56);

int64_t i470;

int64_t i469;

int64_t i468;

int64_t i467;

int64_t i466;

int64_t i465;

int64_t i464;

int64_t i463;
i463 =  (int64_t)0;
i464 =  (int64_t)0;
i465 =  (int64_t)0;
i466 =  (int64_t)0;
for (uint32_t i467 =  (int32_t)0; i467 <  (int32_t)1; i467++){
for (uint32_t i469 =  (int32_t)0; i469 <  (int32_t)56; i469++){
for (uint32_t i470 =  (int32_t)0; i470 <  (int32_t)56; i470++){
for (uint32_t i468 =  (int32_t)0; i468 <  (int32_t)72; i468++){
Arr4DIdxRowM(tmp314, (int32_t)1, (int32_t)72, (int32_t)56, (int32_t)56,i467,i468,i469,i470) = Arr4DIdxRowM(tmp312, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i463,i464,i465,i466);
i466 = (i466 +  (int64_t)1);
if ((i466 ==  (int64_t)72)) {
i466 =  (int64_t)0;
i465 = (i465 +  (int64_t)1);
if ((i465 ==  (int64_t)56)) {
i465 =  (int64_t)0;
i464 = (i464 +  (int64_t)1);
if ((i464 ==  (int64_t)56)) {
i464 =  (int64_t)0;
i463 = (i463 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp312);

uint64_t* tmp316 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72);

int64_t i478;

int64_t i477;

int64_t i476;

int64_t i475;

int64_t i474;

int64_t i473;

int64_t i472;

int64_t i471;
i471 =  (int64_t)0;
i472 =  (int64_t)0;
i473 =  (int64_t)0;
i474 =  (int64_t)0;
for (uint32_t i475 =  (int32_t)0; i475 <  (int32_t)1; i475++){
for (uint32_t i478 =  (int32_t)0; i478 <  (int32_t)72; i478++){
for (uint32_t i476 =  (int32_t)0; i476 <  (int32_t)56; i476++){
for (uint32_t i477 =  (int32_t)0; i477 <  (int32_t)56; i477++){
Arr4DIdxRowM(tmp316, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i475,i476,i477,i478) = Arr4DIdxRowM(tmp314, (int32_t)1, (int32_t)72, (int32_t)56, (int32_t)56,i471,i472,i473,i474);
i474 = (i474 +  (int64_t)1);
if ((i474 ==  (int64_t)56)) {
i474 =  (int64_t)0;
i473 = (i473 +  (int64_t)1);
if ((i473 ==  (int64_t)56)) {
i473 =  (int64_t)0;
i472 = (i472 +  (int64_t)1);
if ((i472 ==  (int64_t)72)) {
i472 =  (int64_t)0;
i471 = (i471 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)72,  (int32_t)56,  (int32_t)56, tmp314);

uint64_t* tmp318 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)72,  (int32_t)24);

int64_t i486;

int64_t i485;

int64_t i484;

int64_t i483;

int64_t i482;

int64_t i481;

int64_t i480;

int64_t i479;
i479 =  (int64_t)0;
i480 =  (int64_t)0;
i481 =  (int64_t)0;
i482 =  (int64_t)0;
for (uint32_t i486 =  (int32_t)0; i486 <  (int32_t)24; i486++){
for (uint32_t i485 =  (int32_t)0; i485 <  (int32_t)72; i485++){
for (uint32_t i483 =  (int32_t)0; i483 <  (int32_t)1; i483++){
for (uint32_t i484 =  (int32_t)0; i484 <  (int32_t)1; i484++){
Arr4DIdxRowM(tmp318, (int32_t)1, (int32_t)1, (int32_t)72, (int32_t)24,i483,i484,i485,i486) = Arr4DIdxRowM(tmp25, (int32_t)24, (int32_t)72, (int32_t)1, (int32_t)1,i479,i480,i481,i482);
i482 = (i482 +  (int64_t)1);
if ((i482 ==  (int64_t)1)) {
i482 =  (int64_t)0;
i481 = (i481 +  (int64_t)1);
if ((i481 ==  (int64_t)1)) {
i481 =  (int64_t)0;
i480 = (i480 +  (int64_t)1);
if ((i480 ==  (int64_t)72)) {
i480 =  (int64_t)0;
i479 = (i479 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)24,  (int32_t)72,  (int32_t)1,  (int32_t)1, tmp25);

uint64_t* tmp320 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72,  (int32_t)1,  (int32_t)1,  (int32_t)24,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp316, tmp318, tmp320);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)72,  (int32_t)24, tmp318);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp316);

uint64_t* tmp323 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)24);

int64_t i491;

int64_t i490;

int64_t i489;

int64_t i488;

int64_t i487;
i487 =  (int64_t)0;
for (uint32_t i488 =  (int32_t)0; i488 <  (int32_t)1; i488++){
for (uint32_t i489 =  (int32_t)0; i489 <  (int32_t)1; i489++){
for (uint32_t i490 =  (int32_t)0; i490 <  (int32_t)1; i490++){
for (uint32_t i491 =  (int32_t)0; i491 <  (int32_t)24; i491++){
Arr4DIdxRowM(tmp323, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)24,i488,i489,i490,i491) = Arr1DIdxRowM(tmp26, (int32_t)24,i487);
i487 = (i487 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)24, tmp26);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)24, tmp323,  kScale);

uint64_t* tmp325 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)56; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)56; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)24; i3++){
Arr4DIdxRowM(tmp325, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)24,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp320, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)24,i0,i1,i2,i3), Arr4DIdxRowM(tmp323, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)24,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24, tmp320);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)24, tmp323);

uint64_t* tmp328 = make_array<uint64_t>( (int32_t)1,  (int32_t)24,  (int32_t)56,  (int32_t)56);

int64_t i499;

int64_t i498;

int64_t i497;

int64_t i496;

int64_t i495;

int64_t i494;

int64_t i493;

int64_t i492;
i492 =  (int64_t)0;
i493 =  (int64_t)0;
i494 =  (int64_t)0;
i495 =  (int64_t)0;
for (uint32_t i496 =  (int32_t)0; i496 <  (int32_t)1; i496++){
for (uint32_t i498 =  (int32_t)0; i498 <  (int32_t)56; i498++){
for (uint32_t i499 =  (int32_t)0; i499 <  (int32_t)56; i499++){
for (uint32_t i497 =  (int32_t)0; i497 <  (int32_t)24; i497++){
Arr4DIdxRowM(tmp328, (int32_t)1, (int32_t)24, (int32_t)56, (int32_t)56,i496,i497,i498,i499) = Arr4DIdxRowM(tmp325, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)24,i492,i493,i494,i495);
i495 = (i495 +  (int64_t)1);
if ((i495 ==  (int64_t)24)) {
i495 =  (int64_t)0;
i494 = (i494 +  (int64_t)1);
if ((i494 ==  (int64_t)56)) {
i494 =  (int64_t)0;
i493 = (i493 +  (int64_t)1);
if ((i493 ==  (int64_t)56)) {
i493 =  (int64_t)0;
i492 = (i492 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24, tmp325);

uint64_t* tmp330 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24);

int64_t i507;

int64_t i506;

int64_t i505;

int64_t i504;

int64_t i503;

int64_t i502;

int64_t i501;

int64_t i500;
i500 =  (int64_t)0;
i501 =  (int64_t)0;
i502 =  (int64_t)0;
i503 =  (int64_t)0;
for (uint32_t i504 =  (int32_t)0; i504 <  (int32_t)1; i504++){
for (uint32_t i507 =  (int32_t)0; i507 <  (int32_t)24; i507++){
for (uint32_t i505 =  (int32_t)0; i505 <  (int32_t)56; i505++){
for (uint32_t i506 =  (int32_t)0; i506 <  (int32_t)56; i506++){
Arr4DIdxRowM(tmp330, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)24,i504,i505,i506,i507) = Arr4DIdxRowM(tmp328, (int32_t)1, (int32_t)24, (int32_t)56, (int32_t)56,i500,i501,i502,i503);
i503 = (i503 +  (int64_t)1);
if ((i503 ==  (int64_t)56)) {
i503 =  (int64_t)0;
i502 = (i502 +  (int64_t)1);
if ((i502 ==  (int64_t)56)) {
i502 =  (int64_t)0;
i501 = (i501 +  (int64_t)1);
if ((i501 ==  (int64_t)24)) {
i501 =  (int64_t)0;
i500 = (i500 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)24,  (int32_t)56,  (int32_t)56, tmp328);

uint64_t* tmp332 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24);

int64_t i515;

int64_t i514;

int64_t i513;

int64_t i512;

int64_t i511;

int64_t i510;

int64_t i509;

int64_t i508;
i508 =  (int64_t)0;
i509 =  (int64_t)0;
i510 =  (int64_t)0;
i511 =  (int64_t)0;
for (uint32_t i512 =  (int32_t)0; i512 <  (int32_t)1; i512++){
for (uint32_t i515 =  (int32_t)0; i515 <  (int32_t)24; i515++){
for (uint32_t i513 =  (int32_t)0; i513 <  (int32_t)56; i513++){
for (uint32_t i514 =  (int32_t)0; i514 <  (int32_t)56; i514++){
Arr4DIdxRowM(tmp332, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)24,i512,i513,i514,i515) = Arr4DIdxRowM(tmp275, (int32_t)1, (int32_t)24, (int32_t)56, (int32_t)56,i508,i509,i510,i511);
i511 = (i511 +  (int64_t)1);
if ((i511 ==  (int64_t)56)) {
i511 =  (int64_t)0;
i510 = (i510 +  (int64_t)1);
if ((i510 ==  (int64_t)56)) {
i510 =  (int64_t)0;
i509 = (i509 +  (int64_t)1);
if ((i509 ==  (int64_t)24)) {
i509 =  (int64_t)0;
i508 = (i508 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)24,  (int32_t)56,  (int32_t)56, tmp275);

uint64_t* tmp334 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)56; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)56; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)24; i3++){
Arr4DIdxRowM(tmp334, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)24,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp330, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)24,i0,i1,i2,i3), Arr4DIdxRowM(tmp332, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)24,i0,i1,i2,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24, tmp330);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24, tmp332);

uint64_t* tmp337 = make_array<uint64_t>( (int32_t)1,  (int32_t)24,  (int32_t)56,  (int32_t)56);

int64_t i523;

int64_t i522;

int64_t i521;

int64_t i520;

int64_t i519;

int64_t i518;

int64_t i517;

int64_t i516;
i516 =  (int64_t)0;
i517 =  (int64_t)0;
i518 =  (int64_t)0;
i519 =  (int64_t)0;
for (uint32_t i520 =  (int32_t)0; i520 <  (int32_t)1; i520++){
for (uint32_t i522 =  (int32_t)0; i522 <  (int32_t)56; i522++){
for (uint32_t i523 =  (int32_t)0; i523 <  (int32_t)56; i523++){
for (uint32_t i521 =  (int32_t)0; i521 <  (int32_t)24; i521++){
Arr4DIdxRowM(tmp337, (int32_t)1, (int32_t)24, (int32_t)56, (int32_t)56,i520,i521,i522,i523) = Arr4DIdxRowM(tmp334, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)24,i516,i517,i518,i519);
i519 = (i519 +  (int64_t)1);
if ((i519 ==  (int64_t)24)) {
i519 =  (int64_t)0;
i518 = (i518 +  (int64_t)1);
if ((i518 ==  (int64_t)56)) {
i518 =  (int64_t)0;
i517 = (i517 +  (int64_t)1);
if ((i517 ==  (int64_t)56)) {
i517 =  (int64_t)0;
i516 = (i516 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24, tmp334);

uint64_t* tmp339 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24);

int64_t i531;

int64_t i530;

int64_t i529;

int64_t i528;

int64_t i527;

int64_t i526;

int64_t i525;

int64_t i524;
i524 =  (int64_t)0;
i525 =  (int64_t)0;
i526 =  (int64_t)0;
i527 =  (int64_t)0;
for (uint32_t i528 =  (int32_t)0; i528 <  (int32_t)1; i528++){
for (uint32_t i531 =  (int32_t)0; i531 <  (int32_t)24; i531++){
for (uint32_t i529 =  (int32_t)0; i529 <  (int32_t)56; i529++){
for (uint32_t i530 =  (int32_t)0; i530 <  (int32_t)56; i530++){
Arr4DIdxRowM(tmp339, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)24,i528,i529,i530,i531) = Arr4DIdxRowM(tmp337, (int32_t)1, (int32_t)24, (int32_t)56, (int32_t)56,i524,i525,i526,i527);
i527 = (i527 +  (int64_t)1);
if ((i527 ==  (int64_t)56)) {
i527 =  (int64_t)0;
i526 = (i526 +  (int64_t)1);
if ((i526 ==  (int64_t)56)) {
i526 =  (int64_t)0;
i525 = (i525 +  (int64_t)1);
if ((i525 ==  (int64_t)24)) {
i525 =  (int64_t)0;
i524 = (i524 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)24,  (int32_t)56,  (int32_t)56, tmp337);

uint64_t* tmp341 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)24,  (int32_t)72);

int64_t i539;

int64_t i538;

int64_t i537;

int64_t i536;

int64_t i535;

int64_t i534;

int64_t i533;

int64_t i532;
i532 =  (int64_t)0;
i533 =  (int64_t)0;
i534 =  (int64_t)0;
i535 =  (int64_t)0;
for (uint32_t i539 =  (int32_t)0; i539 <  (int32_t)72; i539++){
for (uint32_t i538 =  (int32_t)0; i538 <  (int32_t)24; i538++){
for (uint32_t i536 =  (int32_t)0; i536 <  (int32_t)1; i536++){
for (uint32_t i537 =  (int32_t)0; i537 <  (int32_t)1; i537++){
Arr4DIdxRowM(tmp341, (int32_t)1, (int32_t)1, (int32_t)24, (int32_t)72,i536,i537,i538,i539) = Arr4DIdxRowM(tmp27, (int32_t)72, (int32_t)24, (int32_t)1, (int32_t)1,i532,i533,i534,i535);
i535 = (i535 +  (int64_t)1);
if ((i535 ==  (int64_t)1)) {
i535 =  (int64_t)0;
i534 = (i534 +  (int64_t)1);
if ((i534 ==  (int64_t)1)) {
i534 =  (int64_t)0;
i533 = (i533 +  (int64_t)1);
if ((i533 ==  (int64_t)24)) {
i533 =  (int64_t)0;
i532 = (i532 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)72,  (int32_t)24,  (int32_t)1,  (int32_t)1, tmp27);

uint64_t* tmp343 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24, tmp339,  kScale);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24,  (int32_t)1,  (int32_t)1,  (int32_t)72,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp339, tmp341, tmp343);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)24, tmp339);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)24,  (int32_t)72, tmp341);

uint64_t* tmp346 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)72);

int64_t i544;

int64_t i543;

int64_t i542;

int64_t i541;

int64_t i540;
i540 =  (int64_t)0;
for (uint32_t i541 =  (int32_t)0; i541 <  (int32_t)1; i541++){
for (uint32_t i542 =  (int32_t)0; i542 <  (int32_t)1; i542++){
for (uint32_t i543 =  (int32_t)0; i543 <  (int32_t)1; i543++){
for (uint32_t i544 =  (int32_t)0; i544 <  (int32_t)72; i544++){
Arr4DIdxRowM(tmp346, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)72,i541,i542,i543,i544) = Arr1DIdxRowM(tmp28, (int32_t)72,i540);
i540 = (i540 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)72, tmp28);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)72, tmp346,  kScale);

uint64_t* tmp348 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)56; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)56; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)72; i3++){
Arr4DIdxRowM(tmp348, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp343, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i0,i1,i2,i3), Arr4DIdxRowM(tmp346, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)72,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp343);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)72, tmp346);

uint64_t* tmp351 = make_array<uint64_t>( (int32_t)1,  (int32_t)72,  (int32_t)56,  (int32_t)56);

int64_t i552;

int64_t i551;

int64_t i550;

int64_t i549;

int64_t i548;

int64_t i547;

int64_t i546;

int64_t i545;
i545 =  (int64_t)0;
i546 =  (int64_t)0;
i547 =  (int64_t)0;
i548 =  (int64_t)0;
for (uint32_t i549 =  (int32_t)0; i549 <  (int32_t)1; i549++){
for (uint32_t i551 =  (int32_t)0; i551 <  (int32_t)56; i551++){
for (uint32_t i552 =  (int32_t)0; i552 <  (int32_t)56; i552++){
for (uint32_t i550 =  (int32_t)0; i550 <  (int32_t)72; i550++){
Arr4DIdxRowM(tmp351, (int32_t)1, (int32_t)72, (int32_t)56, (int32_t)56,i549,i550,i551,i552) = Arr4DIdxRowM(tmp348, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i545,i546,i547,i548);
i548 = (i548 +  (int64_t)1);
if ((i548 ==  (int64_t)72)) {
i548 =  (int64_t)0;
i547 = (i547 +  (int64_t)1);
if ((i547 ==  (int64_t)56)) {
i547 =  (int64_t)0;
i546 = (i546 +  (int64_t)1);
if ((i546 ==  (int64_t)56)) {
i546 =  (int64_t)0;
i545 = (i545 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp348);

uint64_t* tmp353 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72);

int64_t i560;

int64_t i559;

int64_t i558;

int64_t i557;

int64_t i556;

int64_t i555;

int64_t i554;

int64_t i553;
i553 =  (int64_t)0;
i554 =  (int64_t)0;
i555 =  (int64_t)0;
i556 =  (int64_t)0;
for (uint32_t i557 =  (int32_t)0; i557 <  (int32_t)1; i557++){
for (uint32_t i560 =  (int32_t)0; i560 <  (int32_t)72; i560++){
for (uint32_t i558 =  (int32_t)0; i558 <  (int32_t)56; i558++){
for (uint32_t i559 =  (int32_t)0; i559 <  (int32_t)56; i559++){
Arr4DIdxRowM(tmp353, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i557,i558,i559,i560) = Arr4DIdxRowM(tmp351, (int32_t)1, (int32_t)72, (int32_t)56, (int32_t)56,i553,i554,i555,i556);
i556 = (i556 +  (int64_t)1);
if ((i556 ==  (int64_t)56)) {
i556 =  (int64_t)0;
i555 = (i555 +  (int64_t)1);
if ((i555 ==  (int64_t)56)) {
i555 =  (int64_t)0;
i554 = (i554 +  (int64_t)1);
if ((i554 ==  (int64_t)72)) {
i554 =  (int64_t)0;
i553 = (i553 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)72,  (int32_t)56,  (int32_t)56, tmp351);

uint64_t* tmp355 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp353, tmp355,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp353);

uint64_t* tmp357 = make_array<uint64_t>( (int32_t)1,  (int32_t)72,  (int32_t)56,  (int32_t)56);

int64_t i568;

int64_t i567;

int64_t i566;

int64_t i565;

int64_t i564;

int64_t i563;

int64_t i562;

int64_t i561;
i561 =  (int64_t)0;
i562 =  (int64_t)0;
i563 =  (int64_t)0;
i564 =  (int64_t)0;
for (uint32_t i565 =  (int32_t)0; i565 <  (int32_t)1; i565++){
for (uint32_t i567 =  (int32_t)0; i567 <  (int32_t)56; i567++){
for (uint32_t i568 =  (int32_t)0; i568 <  (int32_t)56; i568++){
for (uint32_t i566 =  (int32_t)0; i566 <  (int32_t)72; i566++){
Arr4DIdxRowM(tmp357, (int32_t)1, (int32_t)72, (int32_t)56, (int32_t)56,i565,i566,i567,i568) = Arr4DIdxRowM(tmp355, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i561,i562,i563,i564);
i564 = (i564 +  (int64_t)1);
if ((i564 ==  (int64_t)72)) {
i564 =  (int64_t)0;
i563 = (i563 +  (int64_t)1);
if ((i563 ==  (int64_t)56)) {
i563 =  (int64_t)0;
i562 = (i562 +  (int64_t)1);
if ((i562 ==  (int64_t)56)) {
i562 =  (int64_t)0;
i561 = (i561 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp355);

uint64_t* tmp359 = make_array<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72);

int64_t i576;

int64_t i575;

int64_t i574;

int64_t i573;

int64_t i572;

int64_t i571;

int64_t i570;

int64_t i569;
i569 =  (int64_t)0;
i570 =  (int64_t)0;
i571 =  (int64_t)0;
i572 =  (int64_t)0;
for (uint32_t i573 =  (int32_t)0; i573 <  (int32_t)1; i573++){
for (uint32_t i576 =  (int32_t)0; i576 <  (int32_t)72; i576++){
for (uint32_t i574 =  (int32_t)0; i574 <  (int32_t)56; i574++){
for (uint32_t i575 =  (int32_t)0; i575 <  (int32_t)56; i575++){
Arr4DIdxRowM(tmp359, (int32_t)1, (int32_t)56, (int32_t)56, (int32_t)72,i573,i574,i575,i576) = Arr4DIdxRowM(tmp357, (int32_t)1, (int32_t)72, (int32_t)56, (int32_t)56,i569,i570,i571,i572);
i572 = (i572 +  (int64_t)1);
if ((i572 ==  (int64_t)56)) {
i572 =  (int64_t)0;
i571 = (i571 +  (int64_t)1);
if ((i571 ==  (int64_t)56)) {
i571 =  (int64_t)0;
i570 = (i570 +  (int64_t)1);
if ((i570 ==  (int64_t)72)) {
i570 =  (int64_t)0;
i569 = (i569 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)72,  (int32_t)56,  (int32_t)56, tmp357);

uint64_t* tmp361 = make_array<uint64_t>( (int32_t)5,  (int32_t)5,  (int32_t)1,  (int32_t)72);

int64_t i584;

int64_t i583;

int64_t i582;

int64_t i581;

int64_t i580;

int64_t i579;

int64_t i578;

int64_t i577;
i577 =  (int64_t)0;
i578 =  (int64_t)0;
i579 =  (int64_t)0;
i580 =  (int64_t)0;
for (uint32_t i584 =  (int32_t)0; i584 <  (int32_t)72; i584++){
for (uint32_t i583 =  (int32_t)0; i583 <  (int32_t)1; i583++){
for (uint32_t i581 =  (int32_t)0; i581 <  (int32_t)5; i581++){
for (uint32_t i582 =  (int32_t)0; i582 <  (int32_t)5; i582++){
Arr4DIdxRowM(tmp361, (int32_t)5, (int32_t)5, (int32_t)1, (int32_t)72,i581,i582,i583,i584) = Arr4DIdxRowM(tmp29, (int32_t)72, (int32_t)1, (int32_t)5, (int32_t)5,i577,i578,i579,i580);
i580 = (i580 +  (int64_t)1);
if ((i580 ==  (int64_t)5)) {
i580 =  (int64_t)0;
i579 = (i579 +  (int64_t)1);
if ((i579 ==  (int64_t)5)) {
i579 =  (int64_t)0;
i578 = (i578 +  (int64_t)1);
if ((i578 ==  (int64_t)1)) {
i578 =  (int64_t)0;
i577 = (i577 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)72,  (int32_t)1,  (int32_t)5,  (int32_t)5, tmp29);

uint64_t* tmp363 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)72);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72,  (int32_t)5,  (int32_t)5,  (int32_t)72,  (int32_t)2,  (int32_t)2,  (int32_t)2,  (int32_t)2,  (int32_t)2,  (int32_t)2,  (int32_t)72, tmp359, tmp361, tmp363);
ClearMemSecret4( (int32_t)5,  (int32_t)5,  (int32_t)1,  (int32_t)72, tmp361);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)72, tmp359);

uint64_t* tmp366 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)72);

int64_t i589;

int64_t i588;

int64_t i587;

int64_t i586;

int64_t i585;
i585 =  (int64_t)0;
for (uint32_t i586 =  (int32_t)0; i586 <  (int32_t)1; i586++){
for (uint32_t i587 =  (int32_t)0; i587 <  (int32_t)1; i587++){
for (uint32_t i588 =  (int32_t)0; i588 <  (int32_t)1; i588++){
for (uint32_t i589 =  (int32_t)0; i589 <  (int32_t)72; i589++){
Arr4DIdxRowM(tmp366, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)72,i586,i587,i588,i589) = Arr1DIdxRowM(tmp30, (int32_t)72,i585);
i585 = (i585 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)72, tmp30);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)72, tmp366,  kScale);

uint64_t* tmp368 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)72);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)28; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)28; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)72; i3++){
Arr4DIdxRowM(tmp368, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)72,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp363, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)72,i0,i1,i2,i3), Arr4DIdxRowM(tmp366, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)72,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)72, tmp366);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)72, tmp363);

uint64_t* tmp371 = make_array<uint64_t>( (int32_t)1,  (int32_t)72,  (int32_t)28,  (int32_t)28);

int64_t i597;

int64_t i596;

int64_t i595;

int64_t i594;

int64_t i593;

int64_t i592;

int64_t i591;

int64_t i590;
i590 =  (int64_t)0;
i591 =  (int64_t)0;
i592 =  (int64_t)0;
i593 =  (int64_t)0;
for (uint32_t i594 =  (int32_t)0; i594 <  (int32_t)1; i594++){
for (uint32_t i596 =  (int32_t)0; i596 <  (int32_t)28; i596++){
for (uint32_t i597 =  (int32_t)0; i597 <  (int32_t)28; i597++){
for (uint32_t i595 =  (int32_t)0; i595 <  (int32_t)72; i595++){
Arr4DIdxRowM(tmp371, (int32_t)1, (int32_t)72, (int32_t)28, (int32_t)28,i594,i595,i596,i597) = Arr4DIdxRowM(tmp368, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)72,i590,i591,i592,i593);
i593 = (i593 +  (int64_t)1);
if ((i593 ==  (int64_t)72)) {
i593 =  (int64_t)0;
i592 = (i592 +  (int64_t)1);
if ((i592 ==  (int64_t)28)) {
i592 =  (int64_t)0;
i591 = (i591 +  (int64_t)1);
if ((i591 ==  (int64_t)28)) {
i591 =  (int64_t)0;
i590 = (i590 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)72, tmp368);

uint64_t* tmp373 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)72);

int64_t i605;

int64_t i604;

int64_t i603;

int64_t i602;

int64_t i601;

int64_t i600;

int64_t i599;

int64_t i598;
i598 =  (int64_t)0;
i599 =  (int64_t)0;
i600 =  (int64_t)0;
i601 =  (int64_t)0;
for (uint32_t i602 =  (int32_t)0; i602 <  (int32_t)1; i602++){
for (uint32_t i605 =  (int32_t)0; i605 <  (int32_t)72; i605++){
for (uint32_t i603 =  (int32_t)0; i603 <  (int32_t)28; i603++){
for (uint32_t i604 =  (int32_t)0; i604 <  (int32_t)28; i604++){
Arr4DIdxRowM(tmp373, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)72,i602,i603,i604,i605) = Arr4DIdxRowM(tmp371, (int32_t)1, (int32_t)72, (int32_t)28, (int32_t)28,i598,i599,i600,i601);
i601 = (i601 +  (int64_t)1);
if ((i601 ==  (int64_t)28)) {
i601 =  (int64_t)0;
i600 = (i600 +  (int64_t)1);
if ((i600 ==  (int64_t)28)) {
i600 =  (int64_t)0;
i599 = (i599 +  (int64_t)1);
if ((i599 ==  (int64_t)72)) {
i599 =  (int64_t)0;
i598 = (i598 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)72,  (int32_t)28,  (int32_t)28, tmp371);

uint64_t* tmp375 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)72);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)72, tmp373, tmp375,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)72, tmp373);

uint64_t* tmp377 = make_array<uint64_t>( (int32_t)1,  (int32_t)72,  (int32_t)28,  (int32_t)28);

int64_t i613;

int64_t i612;

int64_t i611;

int64_t i610;

int64_t i609;

int64_t i608;

int64_t i607;

int64_t i606;
i606 =  (int64_t)0;
i607 =  (int64_t)0;
i608 =  (int64_t)0;
i609 =  (int64_t)0;
for (uint32_t i610 =  (int32_t)0; i610 <  (int32_t)1; i610++){
for (uint32_t i612 =  (int32_t)0; i612 <  (int32_t)28; i612++){
for (uint32_t i613 =  (int32_t)0; i613 <  (int32_t)28; i613++){
for (uint32_t i611 =  (int32_t)0; i611 <  (int32_t)72; i611++){
Arr4DIdxRowM(tmp377, (int32_t)1, (int32_t)72, (int32_t)28, (int32_t)28,i610,i611,i612,i613) = Arr4DIdxRowM(tmp375, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)72,i606,i607,i608,i609);
i609 = (i609 +  (int64_t)1);
if ((i609 ==  (int64_t)72)) {
i609 =  (int64_t)0;
i608 = (i608 +  (int64_t)1);
if ((i608 ==  (int64_t)28)) {
i608 =  (int64_t)0;
i607 = (i607 +  (int64_t)1);
if ((i607 ==  (int64_t)28)) {
i607 =  (int64_t)0;
i606 = (i606 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)72, tmp375);

uint64_t* tmp379 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)72);

int64_t i621;

int64_t i620;

int64_t i619;

int64_t i618;

int64_t i617;

int64_t i616;

int64_t i615;

int64_t i614;
i614 =  (int64_t)0;
i615 =  (int64_t)0;
i616 =  (int64_t)0;
i617 =  (int64_t)0;
for (uint32_t i618 =  (int32_t)0; i618 <  (int32_t)1; i618++){
for (uint32_t i621 =  (int32_t)0; i621 <  (int32_t)72; i621++){
for (uint32_t i619 =  (int32_t)0; i619 <  (int32_t)28; i619++){
for (uint32_t i620 =  (int32_t)0; i620 <  (int32_t)28; i620++){
Arr4DIdxRowM(tmp379, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)72,i618,i619,i620,i621) = Arr4DIdxRowM(tmp377, (int32_t)1, (int32_t)72, (int32_t)28, (int32_t)28,i614,i615,i616,i617);
i617 = (i617 +  (int64_t)1);
if ((i617 ==  (int64_t)28)) {
i617 =  (int64_t)0;
i616 = (i616 +  (int64_t)1);
if ((i616 ==  (int64_t)28)) {
i616 =  (int64_t)0;
i615 = (i615 +  (int64_t)1);
if ((i615 ==  (int64_t)72)) {
i615 =  (int64_t)0;
i614 = (i614 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)72,  (int32_t)28,  (int32_t)28, tmp377);

uint64_t* tmp381 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)72,  (int32_t)40);

int64_t i629;

int64_t i628;

int64_t i627;

int64_t i626;

int64_t i625;

int64_t i624;

int64_t i623;

int64_t i622;
i622 =  (int64_t)0;
i623 =  (int64_t)0;
i624 =  (int64_t)0;
i625 =  (int64_t)0;
for (uint32_t i629 =  (int32_t)0; i629 <  (int32_t)40; i629++){
for (uint32_t i628 =  (int32_t)0; i628 <  (int32_t)72; i628++){
for (uint32_t i626 =  (int32_t)0; i626 <  (int32_t)1; i626++){
for (uint32_t i627 =  (int32_t)0; i627 <  (int32_t)1; i627++){
Arr4DIdxRowM(tmp381, (int32_t)1, (int32_t)1, (int32_t)72, (int32_t)40,i626,i627,i628,i629) = Arr4DIdxRowM(tmp31, (int32_t)40, (int32_t)72, (int32_t)1, (int32_t)1,i622,i623,i624,i625);
i625 = (i625 +  (int64_t)1);
if ((i625 ==  (int64_t)1)) {
i625 =  (int64_t)0;
i624 = (i624 +  (int64_t)1);
if ((i624 ==  (int64_t)1)) {
i624 =  (int64_t)0;
i623 = (i623 +  (int64_t)1);
if ((i623 ==  (int64_t)72)) {
i623 =  (int64_t)0;
i622 = (i622 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)40,  (int32_t)72,  (int32_t)1,  (int32_t)1, tmp31);

uint64_t* tmp383 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)72,  (int32_t)1,  (int32_t)1,  (int32_t)40,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp379, tmp381, tmp383);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)72,  (int32_t)40, tmp381);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)72, tmp379);

uint64_t* tmp386 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)40);

int64_t i634;

int64_t i633;

int64_t i632;

int64_t i631;

int64_t i630;
i630 =  (int64_t)0;
for (uint32_t i631 =  (int32_t)0; i631 <  (int32_t)1; i631++){
for (uint32_t i632 =  (int32_t)0; i632 <  (int32_t)1; i632++){
for (uint32_t i633 =  (int32_t)0; i633 <  (int32_t)1; i633++){
for (uint32_t i634 =  (int32_t)0; i634 <  (int32_t)40; i634++){
Arr4DIdxRowM(tmp386, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)40,i631,i632,i633,i634) = Arr1DIdxRowM(tmp32, (int32_t)40,i630);
i630 = (i630 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)40, tmp32);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)40, tmp386,  kScale);

uint64_t* tmp388 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)28; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)28; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)40; i3++){
Arr4DIdxRowM(tmp388, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)40,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp383, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)40,i0,i1,i2,i3), Arr4DIdxRowM(tmp386, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)40,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)40, tmp386);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40, tmp383);

uint64_t* tmp391 = make_array<uint64_t>( (int32_t)1,  (int32_t)40,  (int32_t)28,  (int32_t)28);

int64_t i642;

int64_t i641;

int64_t i640;

int64_t i639;

int64_t i638;

int64_t i637;

int64_t i636;

int64_t i635;
i635 =  (int64_t)0;
i636 =  (int64_t)0;
i637 =  (int64_t)0;
i638 =  (int64_t)0;
for (uint32_t i639 =  (int32_t)0; i639 <  (int32_t)1; i639++){
for (uint32_t i641 =  (int32_t)0; i641 <  (int32_t)28; i641++){
for (uint32_t i642 =  (int32_t)0; i642 <  (int32_t)28; i642++){
for (uint32_t i640 =  (int32_t)0; i640 <  (int32_t)40; i640++){
Arr4DIdxRowM(tmp391, (int32_t)1, (int32_t)40, (int32_t)28, (int32_t)28,i639,i640,i641,i642) = Arr4DIdxRowM(tmp388, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)40,i635,i636,i637,i638);
i638 = (i638 +  (int64_t)1);
if ((i638 ==  (int64_t)40)) {
i638 =  (int64_t)0;
i637 = (i637 +  (int64_t)1);
if ((i637 ==  (int64_t)28)) {
i637 =  (int64_t)0;
i636 = (i636 +  (int64_t)1);
if ((i636 ==  (int64_t)28)) {
i636 =  (int64_t)0;
i635 = (i635 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40, tmp388);

uint64_t* tmp393 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40);

int64_t i650;

int64_t i649;

int64_t i648;

int64_t i647;

int64_t i646;

int64_t i645;

int64_t i644;

int64_t i643;
i643 =  (int64_t)0;
i644 =  (int64_t)0;
i645 =  (int64_t)0;
i646 =  (int64_t)0;
for (uint32_t i647 =  (int32_t)0; i647 <  (int32_t)1; i647++){
for (uint32_t i650 =  (int32_t)0; i650 <  (int32_t)40; i650++){
for (uint32_t i648 =  (int32_t)0; i648 <  (int32_t)28; i648++){
for (uint32_t i649 =  (int32_t)0; i649 <  (int32_t)28; i649++){
Arr4DIdxRowM(tmp393, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)40,i647,i648,i649,i650) = Arr4DIdxRowM(tmp391, (int32_t)1, (int32_t)40, (int32_t)28, (int32_t)28,i643,i644,i645,i646);
i646 = (i646 +  (int64_t)1);
if ((i646 ==  (int64_t)28)) {
i646 =  (int64_t)0;
i645 = (i645 +  (int64_t)1);
if ((i645 ==  (int64_t)28)) {
i645 =  (int64_t)0;
i644 = (i644 +  (int64_t)1);
if ((i644 ==  (int64_t)40)) {
i644 =  (int64_t)0;
i643 = (i643 +  (int64_t)1);
}
}
}
}
}
}
}

uint64_t* tmp394 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)40,  (int32_t)120);

int64_t i658;

int64_t i657;

int64_t i656;

int64_t i655;

int64_t i654;

int64_t i653;

int64_t i652;

int64_t i651;
i651 =  (int64_t)0;
i652 =  (int64_t)0;
i653 =  (int64_t)0;
i654 =  (int64_t)0;
for (uint32_t i658 =  (int32_t)0; i658 <  (int32_t)120; i658++){
for (uint32_t i657 =  (int32_t)0; i657 <  (int32_t)40; i657++){
for (uint32_t i655 =  (int32_t)0; i655 <  (int32_t)1; i655++){
for (uint32_t i656 =  (int32_t)0; i656 <  (int32_t)1; i656++){
Arr4DIdxRowM(tmp394, (int32_t)1, (int32_t)1, (int32_t)40, (int32_t)120,i655,i656,i657,i658) = Arr4DIdxRowM(tmp33, (int32_t)120, (int32_t)40, (int32_t)1, (int32_t)1,i651,i652,i653,i654);
i654 = (i654 +  (int64_t)1);
if ((i654 ==  (int64_t)1)) {
i654 =  (int64_t)0;
i653 = (i653 +  (int64_t)1);
if ((i653 ==  (int64_t)1)) {
i653 =  (int64_t)0;
i652 = (i652 +  (int64_t)1);
if ((i652 ==  (int64_t)40)) {
i652 =  (int64_t)0;
i651 = (i651 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)120,  (int32_t)40,  (int32_t)1,  (int32_t)1, tmp33);

uint64_t* tmp396 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40, tmp393,  kScale);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40,  (int32_t)1,  (int32_t)1,  (int32_t)120,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp393, tmp394, tmp396);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)40,  (int32_t)120, tmp394);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40, tmp393);

uint64_t* tmp399 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)120);

int64_t i663;

int64_t i662;

int64_t i661;

int64_t i660;

int64_t i659;
i659 =  (int64_t)0;
for (uint32_t i660 =  (int32_t)0; i660 <  (int32_t)1; i660++){
for (uint32_t i661 =  (int32_t)0; i661 <  (int32_t)1; i661++){
for (uint32_t i662 =  (int32_t)0; i662 <  (int32_t)1; i662++){
for (uint32_t i663 =  (int32_t)0; i663 <  (int32_t)120; i663++){
Arr4DIdxRowM(tmp399, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)120,i660,i661,i662,i663) = Arr1DIdxRowM(tmp34, (int32_t)120,i659);
i659 = (i659 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)120, tmp34);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)120, tmp399,  kScale);

uint64_t* tmp401 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)28; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)28; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)120; i3++){
Arr4DIdxRowM(tmp401, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)120,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp396, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)120,i0,i1,i2,i3), Arr4DIdxRowM(tmp399, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)120,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120, tmp396);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)120, tmp399);

uint64_t* tmp404 = make_array<uint64_t>( (int32_t)1,  (int32_t)120,  (int32_t)28,  (int32_t)28);

int64_t i671;

int64_t i670;

int64_t i669;

int64_t i668;

int64_t i667;

int64_t i666;

int64_t i665;

int64_t i664;
i664 =  (int64_t)0;
i665 =  (int64_t)0;
i666 =  (int64_t)0;
i667 =  (int64_t)0;
for (uint32_t i668 =  (int32_t)0; i668 <  (int32_t)1; i668++){
for (uint32_t i670 =  (int32_t)0; i670 <  (int32_t)28; i670++){
for (uint32_t i671 =  (int32_t)0; i671 <  (int32_t)28; i671++){
for (uint32_t i669 =  (int32_t)0; i669 <  (int32_t)120; i669++){
Arr4DIdxRowM(tmp404, (int32_t)1, (int32_t)120, (int32_t)28, (int32_t)28,i668,i669,i670,i671) = Arr4DIdxRowM(tmp401, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)120,i664,i665,i666,i667);
i667 = (i667 +  (int64_t)1);
if ((i667 ==  (int64_t)120)) {
i667 =  (int64_t)0;
i666 = (i666 +  (int64_t)1);
if ((i666 ==  (int64_t)28)) {
i666 =  (int64_t)0;
i665 = (i665 +  (int64_t)1);
if ((i665 ==  (int64_t)28)) {
i665 =  (int64_t)0;
i664 = (i664 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120, tmp401);

uint64_t* tmp406 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120);

int64_t i679;

int64_t i678;

int64_t i677;

int64_t i676;

int64_t i675;

int64_t i674;

int64_t i673;

int64_t i672;
i672 =  (int64_t)0;
i673 =  (int64_t)0;
i674 =  (int64_t)0;
i675 =  (int64_t)0;
for (uint32_t i676 =  (int32_t)0; i676 <  (int32_t)1; i676++){
for (uint32_t i679 =  (int32_t)0; i679 <  (int32_t)120; i679++){
for (uint32_t i677 =  (int32_t)0; i677 <  (int32_t)28; i677++){
for (uint32_t i678 =  (int32_t)0; i678 <  (int32_t)28; i678++){
Arr4DIdxRowM(tmp406, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)120,i676,i677,i678,i679) = Arr4DIdxRowM(tmp404, (int32_t)1, (int32_t)120, (int32_t)28, (int32_t)28,i672,i673,i674,i675);
i675 = (i675 +  (int64_t)1);
if ((i675 ==  (int64_t)28)) {
i675 =  (int64_t)0;
i674 = (i674 +  (int64_t)1);
if ((i674 ==  (int64_t)28)) {
i674 =  (int64_t)0;
i673 = (i673 +  (int64_t)1);
if ((i673 ==  (int64_t)120)) {
i673 =  (int64_t)0;
i672 = (i672 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)120,  (int32_t)28,  (int32_t)28, tmp404);

uint64_t* tmp408 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120, tmp406, tmp408,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120, tmp406);

uint64_t* tmp410 = make_array<uint64_t>( (int32_t)1,  (int32_t)120,  (int32_t)28,  (int32_t)28);

int64_t i687;

int64_t i686;

int64_t i685;

int64_t i684;

int64_t i683;

int64_t i682;

int64_t i681;

int64_t i680;
i680 =  (int64_t)0;
i681 =  (int64_t)0;
i682 =  (int64_t)0;
i683 =  (int64_t)0;
for (uint32_t i684 =  (int32_t)0; i684 <  (int32_t)1; i684++){
for (uint32_t i686 =  (int32_t)0; i686 <  (int32_t)28; i686++){
for (uint32_t i687 =  (int32_t)0; i687 <  (int32_t)28; i687++){
for (uint32_t i685 =  (int32_t)0; i685 <  (int32_t)120; i685++){
Arr4DIdxRowM(tmp410, (int32_t)1, (int32_t)120, (int32_t)28, (int32_t)28,i684,i685,i686,i687) = Arr4DIdxRowM(tmp408, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)120,i680,i681,i682,i683);
i683 = (i683 +  (int64_t)1);
if ((i683 ==  (int64_t)120)) {
i683 =  (int64_t)0;
i682 = (i682 +  (int64_t)1);
if ((i682 ==  (int64_t)28)) {
i682 =  (int64_t)0;
i681 = (i681 +  (int64_t)1);
if ((i681 ==  (int64_t)28)) {
i681 =  (int64_t)0;
i680 = (i680 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120, tmp408);

uint64_t* tmp412 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120);

int64_t i695;

int64_t i694;

int64_t i693;

int64_t i692;

int64_t i691;

int64_t i690;

int64_t i689;

int64_t i688;
i688 =  (int64_t)0;
i689 =  (int64_t)0;
i690 =  (int64_t)0;
i691 =  (int64_t)0;
for (uint32_t i692 =  (int32_t)0; i692 <  (int32_t)1; i692++){
for (uint32_t i695 =  (int32_t)0; i695 <  (int32_t)120; i695++){
for (uint32_t i693 =  (int32_t)0; i693 <  (int32_t)28; i693++){
for (uint32_t i694 =  (int32_t)0; i694 <  (int32_t)28; i694++){
Arr4DIdxRowM(tmp412, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)120,i692,i693,i694,i695) = Arr4DIdxRowM(tmp410, (int32_t)1, (int32_t)120, (int32_t)28, (int32_t)28,i688,i689,i690,i691);
i691 = (i691 +  (int64_t)1);
if ((i691 ==  (int64_t)28)) {
i691 =  (int64_t)0;
i690 = (i690 +  (int64_t)1);
if ((i690 ==  (int64_t)28)) {
i690 =  (int64_t)0;
i689 = (i689 +  (int64_t)1);
if ((i689 ==  (int64_t)120)) {
i689 =  (int64_t)0;
i688 = (i688 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)120,  (int32_t)28,  (int32_t)28, tmp410);

uint64_t* tmp414 = make_array<uint64_t>( (int32_t)5,  (int32_t)5,  (int32_t)1,  (int32_t)120);

int64_t i703;

int64_t i702;

int64_t i701;

int64_t i700;

int64_t i699;

int64_t i698;

int64_t i697;

int64_t i696;
i696 =  (int64_t)0;
i697 =  (int64_t)0;
i698 =  (int64_t)0;
i699 =  (int64_t)0;
for (uint32_t i703 =  (int32_t)0; i703 <  (int32_t)120; i703++){
for (uint32_t i702 =  (int32_t)0; i702 <  (int32_t)1; i702++){
for (uint32_t i700 =  (int32_t)0; i700 <  (int32_t)5; i700++){
for (uint32_t i701 =  (int32_t)0; i701 <  (int32_t)5; i701++){
Arr4DIdxRowM(tmp414, (int32_t)5, (int32_t)5, (int32_t)1, (int32_t)120,i700,i701,i702,i703) = Arr4DIdxRowM(tmp35, (int32_t)120, (int32_t)1, (int32_t)5, (int32_t)5,i696,i697,i698,i699);
i699 = (i699 +  (int64_t)1);
if ((i699 ==  (int64_t)5)) {
i699 =  (int64_t)0;
i698 = (i698 +  (int64_t)1);
if ((i698 ==  (int64_t)5)) {
i698 =  (int64_t)0;
i697 = (i697 +  (int64_t)1);
if ((i697 ==  (int64_t)1)) {
i697 =  (int64_t)0;
i696 = (i696 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)120,  (int32_t)1,  (int32_t)5,  (int32_t)5, tmp35);

uint64_t* tmp416 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120,  (int32_t)5,  (int32_t)5,  (int32_t)120,  (int32_t)2,  (int32_t)2,  (int32_t)2,  (int32_t)2,  (int32_t)1,  (int32_t)1,  (int32_t)120, tmp412, tmp414, tmp416);
ClearMemSecret4( (int32_t)5,  (int32_t)5,  (int32_t)1,  (int32_t)120, tmp414);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120, tmp412);

uint64_t* tmp419 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)120);

int64_t i708;

int64_t i707;

int64_t i706;

int64_t i705;

int64_t i704;
i704 =  (int64_t)0;
for (uint32_t i705 =  (int32_t)0; i705 <  (int32_t)1; i705++){
for (uint32_t i706 =  (int32_t)0; i706 <  (int32_t)1; i706++){
for (uint32_t i707 =  (int32_t)0; i707 <  (int32_t)1; i707++){
for (uint32_t i708 =  (int32_t)0; i708 <  (int32_t)120; i708++){
Arr4DIdxRowM(tmp419, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)120,i705,i706,i707,i708) = Arr1DIdxRowM(tmp36, (int32_t)120,i704);
i704 = (i704 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)120, tmp36);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)120, tmp419,  kScale);

uint64_t* tmp421 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)28; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)28; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)120; i3++){
Arr4DIdxRowM(tmp421, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)120,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp416, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)120,i0,i1,i2,i3), Arr4DIdxRowM(tmp419, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)120,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)120, tmp419);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120, tmp416);

uint64_t* tmp424 = make_array<uint64_t>( (int32_t)1,  (int32_t)120,  (int32_t)28,  (int32_t)28);

int64_t i716;

int64_t i715;

int64_t i714;

int64_t i713;

int64_t i712;

int64_t i711;

int64_t i710;

int64_t i709;
i709 =  (int64_t)0;
i710 =  (int64_t)0;
i711 =  (int64_t)0;
i712 =  (int64_t)0;
for (uint32_t i713 =  (int32_t)0; i713 <  (int32_t)1; i713++){
for (uint32_t i715 =  (int32_t)0; i715 <  (int32_t)28; i715++){
for (uint32_t i716 =  (int32_t)0; i716 <  (int32_t)28; i716++){
for (uint32_t i714 =  (int32_t)0; i714 <  (int32_t)120; i714++){
Arr4DIdxRowM(tmp424, (int32_t)1, (int32_t)120, (int32_t)28, (int32_t)28,i713,i714,i715,i716) = Arr4DIdxRowM(tmp421, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)120,i709,i710,i711,i712);
i712 = (i712 +  (int64_t)1);
if ((i712 ==  (int64_t)120)) {
i712 =  (int64_t)0;
i711 = (i711 +  (int64_t)1);
if ((i711 ==  (int64_t)28)) {
i711 =  (int64_t)0;
i710 = (i710 +  (int64_t)1);
if ((i710 ==  (int64_t)28)) {
i710 =  (int64_t)0;
i709 = (i709 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120, tmp421);

uint64_t* tmp426 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120);

int64_t i724;

int64_t i723;

int64_t i722;

int64_t i721;

int64_t i720;

int64_t i719;

int64_t i718;

int64_t i717;
i717 =  (int64_t)0;
i718 =  (int64_t)0;
i719 =  (int64_t)0;
i720 =  (int64_t)0;
for (uint32_t i721 =  (int32_t)0; i721 <  (int32_t)1; i721++){
for (uint32_t i724 =  (int32_t)0; i724 <  (int32_t)120; i724++){
for (uint32_t i722 =  (int32_t)0; i722 <  (int32_t)28; i722++){
for (uint32_t i723 =  (int32_t)0; i723 <  (int32_t)28; i723++){
Arr4DIdxRowM(tmp426, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)120,i721,i722,i723,i724) = Arr4DIdxRowM(tmp424, (int32_t)1, (int32_t)120, (int32_t)28, (int32_t)28,i717,i718,i719,i720);
i720 = (i720 +  (int64_t)1);
if ((i720 ==  (int64_t)28)) {
i720 =  (int64_t)0;
i719 = (i719 +  (int64_t)1);
if ((i719 ==  (int64_t)28)) {
i719 =  (int64_t)0;
i718 = (i718 +  (int64_t)1);
if ((i718 ==  (int64_t)120)) {
i718 =  (int64_t)0;
i717 = (i717 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)120,  (int32_t)28,  (int32_t)28, tmp424);

uint64_t* tmp428 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120, tmp426, tmp428,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120, tmp426);

uint64_t* tmp430 = make_array<uint64_t>( (int32_t)1,  (int32_t)120,  (int32_t)28,  (int32_t)28);

int64_t i732;

int64_t i731;

int64_t i730;

int64_t i729;

int64_t i728;

int64_t i727;

int64_t i726;

int64_t i725;
i725 =  (int64_t)0;
i726 =  (int64_t)0;
i727 =  (int64_t)0;
i728 =  (int64_t)0;
for (uint32_t i729 =  (int32_t)0; i729 <  (int32_t)1; i729++){
for (uint32_t i731 =  (int32_t)0; i731 <  (int32_t)28; i731++){
for (uint32_t i732 =  (int32_t)0; i732 <  (int32_t)28; i732++){
for (uint32_t i730 =  (int32_t)0; i730 <  (int32_t)120; i730++){
Arr4DIdxRowM(tmp430, (int32_t)1, (int32_t)120, (int32_t)28, (int32_t)28,i729,i730,i731,i732) = Arr4DIdxRowM(tmp428, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)120,i725,i726,i727,i728);
i728 = (i728 +  (int64_t)1);
if ((i728 ==  (int64_t)120)) {
i728 =  (int64_t)0;
i727 = (i727 +  (int64_t)1);
if ((i727 ==  (int64_t)28)) {
i727 =  (int64_t)0;
i726 = (i726 +  (int64_t)1);
if ((i726 ==  (int64_t)28)) {
i726 =  (int64_t)0;
i725 = (i725 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120, tmp428);

uint64_t* tmp432 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120);

int64_t i740;

int64_t i739;

int64_t i738;

int64_t i737;

int64_t i736;

int64_t i735;

int64_t i734;

int64_t i733;
i733 =  (int64_t)0;
i734 =  (int64_t)0;
i735 =  (int64_t)0;
i736 =  (int64_t)0;
for (uint32_t i737 =  (int32_t)0; i737 <  (int32_t)1; i737++){
for (uint32_t i740 =  (int32_t)0; i740 <  (int32_t)120; i740++){
for (uint32_t i738 =  (int32_t)0; i738 <  (int32_t)28; i738++){
for (uint32_t i739 =  (int32_t)0; i739 <  (int32_t)28; i739++){
Arr4DIdxRowM(tmp432, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)120,i737,i738,i739,i740) = Arr4DIdxRowM(tmp430, (int32_t)1, (int32_t)120, (int32_t)28, (int32_t)28,i733,i734,i735,i736);
i736 = (i736 +  (int64_t)1);
if ((i736 ==  (int64_t)28)) {
i736 =  (int64_t)0;
i735 = (i735 +  (int64_t)1);
if ((i735 ==  (int64_t)28)) {
i735 =  (int64_t)0;
i734 = (i734 +  (int64_t)1);
if ((i734 ==  (int64_t)120)) {
i734 =  (int64_t)0;
i733 = (i733 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)120,  (int32_t)28,  (int32_t)28, tmp430);

uint64_t* tmp434 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)120,  (int32_t)40);

int64_t i748;

int64_t i747;

int64_t i746;

int64_t i745;

int64_t i744;

int64_t i743;

int64_t i742;

int64_t i741;
i741 =  (int64_t)0;
i742 =  (int64_t)0;
i743 =  (int64_t)0;
i744 =  (int64_t)0;
for (uint32_t i748 =  (int32_t)0; i748 <  (int32_t)40; i748++){
for (uint32_t i747 =  (int32_t)0; i747 <  (int32_t)120; i747++){
for (uint32_t i745 =  (int32_t)0; i745 <  (int32_t)1; i745++){
for (uint32_t i746 =  (int32_t)0; i746 <  (int32_t)1; i746++){
Arr4DIdxRowM(tmp434, (int32_t)1, (int32_t)1, (int32_t)120, (int32_t)40,i745,i746,i747,i748) = Arr4DIdxRowM(tmp37, (int32_t)40, (int32_t)120, (int32_t)1, (int32_t)1,i741,i742,i743,i744);
i744 = (i744 +  (int64_t)1);
if ((i744 ==  (int64_t)1)) {
i744 =  (int64_t)0;
i743 = (i743 +  (int64_t)1);
if ((i743 ==  (int64_t)1)) {
i743 =  (int64_t)0;
i742 = (i742 +  (int64_t)1);
if ((i742 ==  (int64_t)120)) {
i742 =  (int64_t)0;
i741 = (i741 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)40,  (int32_t)120,  (int32_t)1,  (int32_t)1, tmp37);

uint64_t* tmp436 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120,  (int32_t)1,  (int32_t)1,  (int32_t)40,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp432, tmp434, tmp436);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)120,  (int32_t)40, tmp434);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120, tmp432);

uint64_t* tmp439 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)40);

int64_t i753;

int64_t i752;

int64_t i751;

int64_t i750;

int64_t i749;
i749 =  (int64_t)0;
for (uint32_t i750 =  (int32_t)0; i750 <  (int32_t)1; i750++){
for (uint32_t i751 =  (int32_t)0; i751 <  (int32_t)1; i751++){
for (uint32_t i752 =  (int32_t)0; i752 <  (int32_t)1; i752++){
for (uint32_t i753 =  (int32_t)0; i753 <  (int32_t)40; i753++){
Arr4DIdxRowM(tmp439, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)40,i750,i751,i752,i753) = Arr1DIdxRowM(tmp38, (int32_t)40,i749);
i749 = (i749 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)40, tmp38);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)40, tmp439,  kScale);

uint64_t* tmp441 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)28; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)28; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)40; i3++){
Arr4DIdxRowM(tmp441, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)40,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp436, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)40,i0,i1,i2,i3), Arr4DIdxRowM(tmp439, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)40,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)40, tmp439);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40, tmp436);

uint64_t* tmp444 = make_array<uint64_t>( (int32_t)1,  (int32_t)40,  (int32_t)28,  (int32_t)28);

int64_t i761;

int64_t i760;

int64_t i759;

int64_t i758;

int64_t i757;

int64_t i756;

int64_t i755;

int64_t i754;
i754 =  (int64_t)0;
i755 =  (int64_t)0;
i756 =  (int64_t)0;
i757 =  (int64_t)0;
for (uint32_t i758 =  (int32_t)0; i758 <  (int32_t)1; i758++){
for (uint32_t i760 =  (int32_t)0; i760 <  (int32_t)28; i760++){
for (uint32_t i761 =  (int32_t)0; i761 <  (int32_t)28; i761++){
for (uint32_t i759 =  (int32_t)0; i759 <  (int32_t)40; i759++){
Arr4DIdxRowM(tmp444, (int32_t)1, (int32_t)40, (int32_t)28, (int32_t)28,i758,i759,i760,i761) = Arr4DIdxRowM(tmp441, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)40,i754,i755,i756,i757);
i757 = (i757 +  (int64_t)1);
if ((i757 ==  (int64_t)40)) {
i757 =  (int64_t)0;
i756 = (i756 +  (int64_t)1);
if ((i756 ==  (int64_t)28)) {
i756 =  (int64_t)0;
i755 = (i755 +  (int64_t)1);
if ((i755 ==  (int64_t)28)) {
i755 =  (int64_t)0;
i754 = (i754 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40, tmp441);

uint64_t* tmp446 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40);

int64_t i769;

int64_t i768;

int64_t i767;

int64_t i766;

int64_t i765;

int64_t i764;

int64_t i763;

int64_t i762;
i762 =  (int64_t)0;
i763 =  (int64_t)0;
i764 =  (int64_t)0;
i765 =  (int64_t)0;
for (uint32_t i766 =  (int32_t)0; i766 <  (int32_t)1; i766++){
for (uint32_t i769 =  (int32_t)0; i769 <  (int32_t)40; i769++){
for (uint32_t i767 =  (int32_t)0; i767 <  (int32_t)28; i767++){
for (uint32_t i768 =  (int32_t)0; i768 <  (int32_t)28; i768++){
Arr4DIdxRowM(tmp446, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)40,i766,i767,i768,i769) = Arr4DIdxRowM(tmp444, (int32_t)1, (int32_t)40, (int32_t)28, (int32_t)28,i762,i763,i764,i765);
i765 = (i765 +  (int64_t)1);
if ((i765 ==  (int64_t)28)) {
i765 =  (int64_t)0;
i764 = (i764 +  (int64_t)1);
if ((i764 ==  (int64_t)28)) {
i764 =  (int64_t)0;
i763 = (i763 +  (int64_t)1);
if ((i763 ==  (int64_t)40)) {
i763 =  (int64_t)0;
i762 = (i762 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)40,  (int32_t)28,  (int32_t)28, tmp444);

uint64_t* tmp448 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40);

int64_t i777;

int64_t i776;

int64_t i775;

int64_t i774;

int64_t i773;

int64_t i772;

int64_t i771;

int64_t i770;
i770 =  (int64_t)0;
i771 =  (int64_t)0;
i772 =  (int64_t)0;
i773 =  (int64_t)0;
for (uint32_t i774 =  (int32_t)0; i774 <  (int32_t)1; i774++){
for (uint32_t i777 =  (int32_t)0; i777 <  (int32_t)40; i777++){
for (uint32_t i775 =  (int32_t)0; i775 <  (int32_t)28; i775++){
for (uint32_t i776 =  (int32_t)0; i776 <  (int32_t)28; i776++){
Arr4DIdxRowM(tmp448, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)40,i774,i775,i776,i777) = Arr4DIdxRowM(tmp391, (int32_t)1, (int32_t)40, (int32_t)28, (int32_t)28,i770,i771,i772,i773);
i773 = (i773 +  (int64_t)1);
if ((i773 ==  (int64_t)28)) {
i773 =  (int64_t)0;
i772 = (i772 +  (int64_t)1);
if ((i772 ==  (int64_t)28)) {
i772 =  (int64_t)0;
i771 = (i771 +  (int64_t)1);
if ((i771 ==  (int64_t)40)) {
i771 =  (int64_t)0;
i770 = (i770 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)40,  (int32_t)28,  (int32_t)28, tmp391);

uint64_t* tmp450 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)28; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)28; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)40; i3++){
Arr4DIdxRowM(tmp450, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)40,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp446, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)40,i0,i1,i2,i3), Arr4DIdxRowM(tmp448, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)40,i0,i1,i2,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40, tmp446);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40, tmp448);

uint64_t* tmp453 = make_array<uint64_t>( (int32_t)1,  (int32_t)40,  (int32_t)28,  (int32_t)28);

int64_t i785;

int64_t i784;

int64_t i783;

int64_t i782;

int64_t i781;

int64_t i780;

int64_t i779;

int64_t i778;
i778 =  (int64_t)0;
i779 =  (int64_t)0;
i780 =  (int64_t)0;
i781 =  (int64_t)0;
for (uint32_t i782 =  (int32_t)0; i782 <  (int32_t)1; i782++){
for (uint32_t i784 =  (int32_t)0; i784 <  (int32_t)28; i784++){
for (uint32_t i785 =  (int32_t)0; i785 <  (int32_t)28; i785++){
for (uint32_t i783 =  (int32_t)0; i783 <  (int32_t)40; i783++){
Arr4DIdxRowM(tmp453, (int32_t)1, (int32_t)40, (int32_t)28, (int32_t)28,i782,i783,i784,i785) = Arr4DIdxRowM(tmp450, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)40,i778,i779,i780,i781);
i781 = (i781 +  (int64_t)1);
if ((i781 ==  (int64_t)40)) {
i781 =  (int64_t)0;
i780 = (i780 +  (int64_t)1);
if ((i780 ==  (int64_t)28)) {
i780 =  (int64_t)0;
i779 = (i779 +  (int64_t)1);
if ((i779 ==  (int64_t)28)) {
i779 =  (int64_t)0;
i778 = (i778 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40, tmp450);

uint64_t* tmp455 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40);

int64_t i793;

int64_t i792;

int64_t i791;

int64_t i790;

int64_t i789;

int64_t i788;

int64_t i787;

int64_t i786;
i786 =  (int64_t)0;
i787 =  (int64_t)0;
i788 =  (int64_t)0;
i789 =  (int64_t)0;
for (uint32_t i790 =  (int32_t)0; i790 <  (int32_t)1; i790++){
for (uint32_t i793 =  (int32_t)0; i793 <  (int32_t)40; i793++){
for (uint32_t i791 =  (int32_t)0; i791 <  (int32_t)28; i791++){
for (uint32_t i792 =  (int32_t)0; i792 <  (int32_t)28; i792++){
Arr4DIdxRowM(tmp455, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)40,i790,i791,i792,i793) = Arr4DIdxRowM(tmp453, (int32_t)1, (int32_t)40, (int32_t)28, (int32_t)28,i786,i787,i788,i789);
i789 = (i789 +  (int64_t)1);
if ((i789 ==  (int64_t)28)) {
i789 =  (int64_t)0;
i788 = (i788 +  (int64_t)1);
if ((i788 ==  (int64_t)28)) {
i788 =  (int64_t)0;
i787 = (i787 +  (int64_t)1);
if ((i787 ==  (int64_t)40)) {
i787 =  (int64_t)0;
i786 = (i786 +  (int64_t)1);
}
}
}
}
}
}
}

uint64_t* tmp456 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)40,  (int32_t)120);

int64_t i801;

int64_t i800;

int64_t i799;

int64_t i798;

int64_t i797;

int64_t i796;

int64_t i795;

int64_t i794;
i794 =  (int64_t)0;
i795 =  (int64_t)0;
i796 =  (int64_t)0;
i797 =  (int64_t)0;
for (uint32_t i801 =  (int32_t)0; i801 <  (int32_t)120; i801++){
for (uint32_t i800 =  (int32_t)0; i800 <  (int32_t)40; i800++){
for (uint32_t i798 =  (int32_t)0; i798 <  (int32_t)1; i798++){
for (uint32_t i799 =  (int32_t)0; i799 <  (int32_t)1; i799++){
Arr4DIdxRowM(tmp456, (int32_t)1, (int32_t)1, (int32_t)40, (int32_t)120,i798,i799,i800,i801) = Arr4DIdxRowM(tmp39, (int32_t)120, (int32_t)40, (int32_t)1, (int32_t)1,i794,i795,i796,i797);
i797 = (i797 +  (int64_t)1);
if ((i797 ==  (int64_t)1)) {
i797 =  (int64_t)0;
i796 = (i796 +  (int64_t)1);
if ((i796 ==  (int64_t)1)) {
i796 =  (int64_t)0;
i795 = (i795 +  (int64_t)1);
if ((i795 ==  (int64_t)40)) {
i795 =  (int64_t)0;
i794 = (i794 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)120,  (int32_t)40,  (int32_t)1,  (int32_t)1, tmp39);

uint64_t* tmp458 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40, tmp455,  kScale);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40,  (int32_t)1,  (int32_t)1,  (int32_t)120,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp455, tmp456, tmp458);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)40,  (int32_t)120, tmp456);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40, tmp455);

uint64_t* tmp461 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)120);

int64_t i806;

int64_t i805;

int64_t i804;

int64_t i803;

int64_t i802;
i802 =  (int64_t)0;
for (uint32_t i803 =  (int32_t)0; i803 <  (int32_t)1; i803++){
for (uint32_t i804 =  (int32_t)0; i804 <  (int32_t)1; i804++){
for (uint32_t i805 =  (int32_t)0; i805 <  (int32_t)1; i805++){
for (uint32_t i806 =  (int32_t)0; i806 <  (int32_t)120; i806++){
Arr4DIdxRowM(tmp461, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)120,i803,i804,i805,i806) = Arr1DIdxRowM(tmp40, (int32_t)120,i802);
i802 = (i802 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)120, tmp40);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)120, tmp461,  kScale);

uint64_t* tmp463 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)28; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)28; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)120; i3++){
Arr4DIdxRowM(tmp463, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)120,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp458, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)120,i0,i1,i2,i3), Arr4DIdxRowM(tmp461, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)120,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)120, tmp461);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120, tmp458);

uint64_t* tmp466 = make_array<uint64_t>( (int32_t)1,  (int32_t)120,  (int32_t)28,  (int32_t)28);

int64_t i814;

int64_t i813;

int64_t i812;

int64_t i811;

int64_t i810;

int64_t i809;

int64_t i808;

int64_t i807;
i807 =  (int64_t)0;
i808 =  (int64_t)0;
i809 =  (int64_t)0;
i810 =  (int64_t)0;
for (uint32_t i811 =  (int32_t)0; i811 <  (int32_t)1; i811++){
for (uint32_t i813 =  (int32_t)0; i813 <  (int32_t)28; i813++){
for (uint32_t i814 =  (int32_t)0; i814 <  (int32_t)28; i814++){
for (uint32_t i812 =  (int32_t)0; i812 <  (int32_t)120; i812++){
Arr4DIdxRowM(tmp466, (int32_t)1, (int32_t)120, (int32_t)28, (int32_t)28,i811,i812,i813,i814) = Arr4DIdxRowM(tmp463, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)120,i807,i808,i809,i810);
i810 = (i810 +  (int64_t)1);
if ((i810 ==  (int64_t)120)) {
i810 =  (int64_t)0;
i809 = (i809 +  (int64_t)1);
if ((i809 ==  (int64_t)28)) {
i809 =  (int64_t)0;
i808 = (i808 +  (int64_t)1);
if ((i808 ==  (int64_t)28)) {
i808 =  (int64_t)0;
i807 = (i807 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120, tmp463);

uint64_t* tmp468 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120);

int64_t i822;

int64_t i821;

int64_t i820;

int64_t i819;

int64_t i818;

int64_t i817;

int64_t i816;

int64_t i815;
i815 =  (int64_t)0;
i816 =  (int64_t)0;
i817 =  (int64_t)0;
i818 =  (int64_t)0;
for (uint32_t i819 =  (int32_t)0; i819 <  (int32_t)1; i819++){
for (uint32_t i822 =  (int32_t)0; i822 <  (int32_t)120; i822++){
for (uint32_t i820 =  (int32_t)0; i820 <  (int32_t)28; i820++){
for (uint32_t i821 =  (int32_t)0; i821 <  (int32_t)28; i821++){
Arr4DIdxRowM(tmp468, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)120,i819,i820,i821,i822) = Arr4DIdxRowM(tmp466, (int32_t)1, (int32_t)120, (int32_t)28, (int32_t)28,i815,i816,i817,i818);
i818 = (i818 +  (int64_t)1);
if ((i818 ==  (int64_t)28)) {
i818 =  (int64_t)0;
i817 = (i817 +  (int64_t)1);
if ((i817 ==  (int64_t)28)) {
i817 =  (int64_t)0;
i816 = (i816 +  (int64_t)1);
if ((i816 ==  (int64_t)120)) {
i816 =  (int64_t)0;
i815 = (i815 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)120,  (int32_t)28,  (int32_t)28, tmp466);

uint64_t* tmp470 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120, tmp468, tmp470,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120, tmp468);

uint64_t* tmp472 = make_array<uint64_t>( (int32_t)1,  (int32_t)120,  (int32_t)28,  (int32_t)28);

int64_t i830;

int64_t i829;

int64_t i828;

int64_t i827;

int64_t i826;

int64_t i825;

int64_t i824;

int64_t i823;
i823 =  (int64_t)0;
i824 =  (int64_t)0;
i825 =  (int64_t)0;
i826 =  (int64_t)0;
for (uint32_t i827 =  (int32_t)0; i827 <  (int32_t)1; i827++){
for (uint32_t i829 =  (int32_t)0; i829 <  (int32_t)28; i829++){
for (uint32_t i830 =  (int32_t)0; i830 <  (int32_t)28; i830++){
for (uint32_t i828 =  (int32_t)0; i828 <  (int32_t)120; i828++){
Arr4DIdxRowM(tmp472, (int32_t)1, (int32_t)120, (int32_t)28, (int32_t)28,i827,i828,i829,i830) = Arr4DIdxRowM(tmp470, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)120,i823,i824,i825,i826);
i826 = (i826 +  (int64_t)1);
if ((i826 ==  (int64_t)120)) {
i826 =  (int64_t)0;
i825 = (i825 +  (int64_t)1);
if ((i825 ==  (int64_t)28)) {
i825 =  (int64_t)0;
i824 = (i824 +  (int64_t)1);
if ((i824 ==  (int64_t)28)) {
i824 =  (int64_t)0;
i823 = (i823 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120, tmp470);

uint64_t* tmp474 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120);

int64_t i838;

int64_t i837;

int64_t i836;

int64_t i835;

int64_t i834;

int64_t i833;

int64_t i832;

int64_t i831;
i831 =  (int64_t)0;
i832 =  (int64_t)0;
i833 =  (int64_t)0;
i834 =  (int64_t)0;
for (uint32_t i835 =  (int32_t)0; i835 <  (int32_t)1; i835++){
for (uint32_t i838 =  (int32_t)0; i838 <  (int32_t)120; i838++){
for (uint32_t i836 =  (int32_t)0; i836 <  (int32_t)28; i836++){
for (uint32_t i837 =  (int32_t)0; i837 <  (int32_t)28; i837++){
Arr4DIdxRowM(tmp474, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)120,i835,i836,i837,i838) = Arr4DIdxRowM(tmp472, (int32_t)1, (int32_t)120, (int32_t)28, (int32_t)28,i831,i832,i833,i834);
i834 = (i834 +  (int64_t)1);
if ((i834 ==  (int64_t)28)) {
i834 =  (int64_t)0;
i833 = (i833 +  (int64_t)1);
if ((i833 ==  (int64_t)28)) {
i833 =  (int64_t)0;
i832 = (i832 +  (int64_t)1);
if ((i832 ==  (int64_t)120)) {
i832 =  (int64_t)0;
i831 = (i831 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)120,  (int32_t)28,  (int32_t)28, tmp472);

uint64_t* tmp476 = make_array<uint64_t>( (int32_t)5,  (int32_t)5,  (int32_t)1,  (int32_t)120);

int64_t i846;

int64_t i845;

int64_t i844;

int64_t i843;

int64_t i842;

int64_t i841;

int64_t i840;

int64_t i839;
i839 =  (int64_t)0;
i840 =  (int64_t)0;
i841 =  (int64_t)0;
i842 =  (int64_t)0;
for (uint32_t i846 =  (int32_t)0; i846 <  (int32_t)120; i846++){
for (uint32_t i845 =  (int32_t)0; i845 <  (int32_t)1; i845++){
for (uint32_t i843 =  (int32_t)0; i843 <  (int32_t)5; i843++){
for (uint32_t i844 =  (int32_t)0; i844 <  (int32_t)5; i844++){
Arr4DIdxRowM(tmp476, (int32_t)5, (int32_t)5, (int32_t)1, (int32_t)120,i843,i844,i845,i846) = Arr4DIdxRowM(tmp41, (int32_t)120, (int32_t)1, (int32_t)5, (int32_t)5,i839,i840,i841,i842);
i842 = (i842 +  (int64_t)1);
if ((i842 ==  (int64_t)5)) {
i842 =  (int64_t)0;
i841 = (i841 +  (int64_t)1);
if ((i841 ==  (int64_t)5)) {
i841 =  (int64_t)0;
i840 = (i840 +  (int64_t)1);
if ((i840 ==  (int64_t)1)) {
i840 =  (int64_t)0;
i839 = (i839 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)120,  (int32_t)1,  (int32_t)5,  (int32_t)5, tmp41);

uint64_t* tmp478 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120,  (int32_t)5,  (int32_t)5,  (int32_t)120,  (int32_t)2,  (int32_t)2,  (int32_t)2,  (int32_t)2,  (int32_t)1,  (int32_t)1,  (int32_t)120, tmp474, tmp476, tmp478);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120, tmp474);
ClearMemSecret4( (int32_t)5,  (int32_t)5,  (int32_t)1,  (int32_t)120, tmp476);

uint64_t* tmp481 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)120);

int64_t i851;

int64_t i850;

int64_t i849;

int64_t i848;

int64_t i847;
i847 =  (int64_t)0;
for (uint32_t i848 =  (int32_t)0; i848 <  (int32_t)1; i848++){
for (uint32_t i849 =  (int32_t)0; i849 <  (int32_t)1; i849++){
for (uint32_t i850 =  (int32_t)0; i850 <  (int32_t)1; i850++){
for (uint32_t i851 =  (int32_t)0; i851 <  (int32_t)120; i851++){
Arr4DIdxRowM(tmp481, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)120,i848,i849,i850,i851) = Arr1DIdxRowM(tmp42, (int32_t)120,i847);
i847 = (i847 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)120, tmp42);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)120, tmp481,  kScale);

uint64_t* tmp483 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)28; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)28; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)120; i3++){
Arr4DIdxRowM(tmp483, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)120,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp478, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)120,i0,i1,i2,i3), Arr4DIdxRowM(tmp481, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)120,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120, tmp478);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)120, tmp481);

uint64_t* tmp486 = make_array<uint64_t>( (int32_t)1,  (int32_t)120,  (int32_t)28,  (int32_t)28);

int64_t i859;

int64_t i858;

int64_t i857;

int64_t i856;

int64_t i855;

int64_t i854;

int64_t i853;

int64_t i852;
i852 =  (int64_t)0;
i853 =  (int64_t)0;
i854 =  (int64_t)0;
i855 =  (int64_t)0;
for (uint32_t i856 =  (int32_t)0; i856 <  (int32_t)1; i856++){
for (uint32_t i858 =  (int32_t)0; i858 <  (int32_t)28; i858++){
for (uint32_t i859 =  (int32_t)0; i859 <  (int32_t)28; i859++){
for (uint32_t i857 =  (int32_t)0; i857 <  (int32_t)120; i857++){
Arr4DIdxRowM(tmp486, (int32_t)1, (int32_t)120, (int32_t)28, (int32_t)28,i856,i857,i858,i859) = Arr4DIdxRowM(tmp483, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)120,i852,i853,i854,i855);
i855 = (i855 +  (int64_t)1);
if ((i855 ==  (int64_t)120)) {
i855 =  (int64_t)0;
i854 = (i854 +  (int64_t)1);
if ((i854 ==  (int64_t)28)) {
i854 =  (int64_t)0;
i853 = (i853 +  (int64_t)1);
if ((i853 ==  (int64_t)28)) {
i853 =  (int64_t)0;
i852 = (i852 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120, tmp483);

uint64_t* tmp488 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120);

int64_t i867;

int64_t i866;

int64_t i865;

int64_t i864;

int64_t i863;

int64_t i862;

int64_t i861;

int64_t i860;
i860 =  (int64_t)0;
i861 =  (int64_t)0;
i862 =  (int64_t)0;
i863 =  (int64_t)0;
for (uint32_t i864 =  (int32_t)0; i864 <  (int32_t)1; i864++){
for (uint32_t i867 =  (int32_t)0; i867 <  (int32_t)120; i867++){
for (uint32_t i865 =  (int32_t)0; i865 <  (int32_t)28; i865++){
for (uint32_t i866 =  (int32_t)0; i866 <  (int32_t)28; i866++){
Arr4DIdxRowM(tmp488, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)120,i864,i865,i866,i867) = Arr4DIdxRowM(tmp486, (int32_t)1, (int32_t)120, (int32_t)28, (int32_t)28,i860,i861,i862,i863);
i863 = (i863 +  (int64_t)1);
if ((i863 ==  (int64_t)28)) {
i863 =  (int64_t)0;
i862 = (i862 +  (int64_t)1);
if ((i862 ==  (int64_t)28)) {
i862 =  (int64_t)0;
i861 = (i861 +  (int64_t)1);
if ((i861 ==  (int64_t)120)) {
i861 =  (int64_t)0;
i860 = (i860 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)120,  (int32_t)28,  (int32_t)28, tmp486);

uint64_t* tmp490 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120, tmp488, tmp490,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120, tmp488);

uint64_t* tmp492 = make_array<uint64_t>( (int32_t)1,  (int32_t)120,  (int32_t)28,  (int32_t)28);

int64_t i875;

int64_t i874;

int64_t i873;

int64_t i872;

int64_t i871;

int64_t i870;

int64_t i869;

int64_t i868;
i868 =  (int64_t)0;
i869 =  (int64_t)0;
i870 =  (int64_t)0;
i871 =  (int64_t)0;
for (uint32_t i872 =  (int32_t)0; i872 <  (int32_t)1; i872++){
for (uint32_t i874 =  (int32_t)0; i874 <  (int32_t)28; i874++){
for (uint32_t i875 =  (int32_t)0; i875 <  (int32_t)28; i875++){
for (uint32_t i873 =  (int32_t)0; i873 <  (int32_t)120; i873++){
Arr4DIdxRowM(tmp492, (int32_t)1, (int32_t)120, (int32_t)28, (int32_t)28,i872,i873,i874,i875) = Arr4DIdxRowM(tmp490, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)120,i868,i869,i870,i871);
i871 = (i871 +  (int64_t)1);
if ((i871 ==  (int64_t)120)) {
i871 =  (int64_t)0;
i870 = (i870 +  (int64_t)1);
if ((i870 ==  (int64_t)28)) {
i870 =  (int64_t)0;
i869 = (i869 +  (int64_t)1);
if ((i869 ==  (int64_t)28)) {
i869 =  (int64_t)0;
i868 = (i868 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120, tmp490);

uint64_t* tmp494 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120);

int64_t i883;

int64_t i882;

int64_t i881;

int64_t i880;

int64_t i879;

int64_t i878;

int64_t i877;

int64_t i876;
i876 =  (int64_t)0;
i877 =  (int64_t)0;
i878 =  (int64_t)0;
i879 =  (int64_t)0;
for (uint32_t i880 =  (int32_t)0; i880 <  (int32_t)1; i880++){
for (uint32_t i883 =  (int32_t)0; i883 <  (int32_t)120; i883++){
for (uint32_t i881 =  (int32_t)0; i881 <  (int32_t)28; i881++){
for (uint32_t i882 =  (int32_t)0; i882 <  (int32_t)28; i882++){
Arr4DIdxRowM(tmp494, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)120,i880,i881,i882,i883) = Arr4DIdxRowM(tmp492, (int32_t)1, (int32_t)120, (int32_t)28, (int32_t)28,i876,i877,i878,i879);
i879 = (i879 +  (int64_t)1);
if ((i879 ==  (int64_t)28)) {
i879 =  (int64_t)0;
i878 = (i878 +  (int64_t)1);
if ((i878 ==  (int64_t)28)) {
i878 =  (int64_t)0;
i877 = (i877 +  (int64_t)1);
if ((i877 ==  (int64_t)120)) {
i877 =  (int64_t)0;
i876 = (i876 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)120,  (int32_t)28,  (int32_t)28, tmp492);

uint64_t* tmp496 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)120,  (int32_t)40);

int64_t i891;

int64_t i890;

int64_t i889;

int64_t i888;

int64_t i887;

int64_t i886;

int64_t i885;

int64_t i884;
i884 =  (int64_t)0;
i885 =  (int64_t)0;
i886 =  (int64_t)0;
i887 =  (int64_t)0;
for (uint32_t i891 =  (int32_t)0; i891 <  (int32_t)40; i891++){
for (uint32_t i890 =  (int32_t)0; i890 <  (int32_t)120; i890++){
for (uint32_t i888 =  (int32_t)0; i888 <  (int32_t)1; i888++){
for (uint32_t i889 =  (int32_t)0; i889 <  (int32_t)1; i889++){
Arr4DIdxRowM(tmp496, (int32_t)1, (int32_t)1, (int32_t)120, (int32_t)40,i888,i889,i890,i891) = Arr4DIdxRowM(tmp43, (int32_t)40, (int32_t)120, (int32_t)1, (int32_t)1,i884,i885,i886,i887);
i887 = (i887 +  (int64_t)1);
if ((i887 ==  (int64_t)1)) {
i887 =  (int64_t)0;
i886 = (i886 +  (int64_t)1);
if ((i886 ==  (int64_t)1)) {
i886 =  (int64_t)0;
i885 = (i885 +  (int64_t)1);
if ((i885 ==  (int64_t)120)) {
i885 =  (int64_t)0;
i884 = (i884 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)40,  (int32_t)120,  (int32_t)1,  (int32_t)1, tmp43);

uint64_t* tmp498 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120,  (int32_t)1,  (int32_t)1,  (int32_t)40,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp494, tmp496, tmp498);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)120, tmp494);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)120,  (int32_t)40, tmp496);

uint64_t* tmp501 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)40);

int64_t i896;

int64_t i895;

int64_t i894;

int64_t i893;

int64_t i892;
i892 =  (int64_t)0;
for (uint32_t i893 =  (int32_t)0; i893 <  (int32_t)1; i893++){
for (uint32_t i894 =  (int32_t)0; i894 <  (int32_t)1; i894++){
for (uint32_t i895 =  (int32_t)0; i895 <  (int32_t)1; i895++){
for (uint32_t i896 =  (int32_t)0; i896 <  (int32_t)40; i896++){
Arr4DIdxRowM(tmp501, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)40,i893,i894,i895,i896) = Arr1DIdxRowM(tmp44, (int32_t)40,i892);
i892 = (i892 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)40, tmp44);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)40, tmp501,  kScale);

uint64_t* tmp503 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)28; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)28; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)40; i3++){
Arr4DIdxRowM(tmp503, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)40,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp498, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)40,i0,i1,i2,i3), Arr4DIdxRowM(tmp501, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)40,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40, tmp498);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)40, tmp501);

uint64_t* tmp506 = make_array<uint64_t>( (int32_t)1,  (int32_t)40,  (int32_t)28,  (int32_t)28);

int64_t i904;

int64_t i903;

int64_t i902;

int64_t i901;

int64_t i900;

int64_t i899;

int64_t i898;

int64_t i897;
i897 =  (int64_t)0;
i898 =  (int64_t)0;
i899 =  (int64_t)0;
i900 =  (int64_t)0;
for (uint32_t i901 =  (int32_t)0; i901 <  (int32_t)1; i901++){
for (uint32_t i903 =  (int32_t)0; i903 <  (int32_t)28; i903++){
for (uint32_t i904 =  (int32_t)0; i904 <  (int32_t)28; i904++){
for (uint32_t i902 =  (int32_t)0; i902 <  (int32_t)40; i902++){
Arr4DIdxRowM(tmp506, (int32_t)1, (int32_t)40, (int32_t)28, (int32_t)28,i901,i902,i903,i904) = Arr4DIdxRowM(tmp503, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)40,i897,i898,i899,i900);
i900 = (i900 +  (int64_t)1);
if ((i900 ==  (int64_t)40)) {
i900 =  (int64_t)0;
i899 = (i899 +  (int64_t)1);
if ((i899 ==  (int64_t)28)) {
i899 =  (int64_t)0;
i898 = (i898 +  (int64_t)1);
if ((i898 ==  (int64_t)28)) {
i898 =  (int64_t)0;
i897 = (i897 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40, tmp503);

uint64_t* tmp508 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40);

int64_t i912;

int64_t i911;

int64_t i910;

int64_t i909;

int64_t i908;

int64_t i907;

int64_t i906;

int64_t i905;
i905 =  (int64_t)0;
i906 =  (int64_t)0;
i907 =  (int64_t)0;
i908 =  (int64_t)0;
for (uint32_t i909 =  (int32_t)0; i909 <  (int32_t)1; i909++){
for (uint32_t i912 =  (int32_t)0; i912 <  (int32_t)40; i912++){
for (uint32_t i910 =  (int32_t)0; i910 <  (int32_t)28; i910++){
for (uint32_t i911 =  (int32_t)0; i911 <  (int32_t)28; i911++){
Arr4DIdxRowM(tmp508, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)40,i909,i910,i911,i912) = Arr4DIdxRowM(tmp506, (int32_t)1, (int32_t)40, (int32_t)28, (int32_t)28,i905,i906,i907,i908);
i908 = (i908 +  (int64_t)1);
if ((i908 ==  (int64_t)28)) {
i908 =  (int64_t)0;
i907 = (i907 +  (int64_t)1);
if ((i907 ==  (int64_t)28)) {
i907 =  (int64_t)0;
i906 = (i906 +  (int64_t)1);
if ((i906 ==  (int64_t)40)) {
i906 =  (int64_t)0;
i905 = (i905 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)40,  (int32_t)28,  (int32_t)28, tmp506);

uint64_t* tmp510 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40);

int64_t i920;

int64_t i919;

int64_t i918;

int64_t i917;

int64_t i916;

int64_t i915;

int64_t i914;

int64_t i913;
i913 =  (int64_t)0;
i914 =  (int64_t)0;
i915 =  (int64_t)0;
i916 =  (int64_t)0;
for (uint32_t i917 =  (int32_t)0; i917 <  (int32_t)1; i917++){
for (uint32_t i920 =  (int32_t)0; i920 <  (int32_t)40; i920++){
for (uint32_t i918 =  (int32_t)0; i918 <  (int32_t)28; i918++){
for (uint32_t i919 =  (int32_t)0; i919 <  (int32_t)28; i919++){
Arr4DIdxRowM(tmp510, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)40,i917,i918,i919,i920) = Arr4DIdxRowM(tmp453, (int32_t)1, (int32_t)40, (int32_t)28, (int32_t)28,i913,i914,i915,i916);
i916 = (i916 +  (int64_t)1);
if ((i916 ==  (int64_t)28)) {
i916 =  (int64_t)0;
i915 = (i915 +  (int64_t)1);
if ((i915 ==  (int64_t)28)) {
i915 =  (int64_t)0;
i914 = (i914 +  (int64_t)1);
if ((i914 ==  (int64_t)40)) {
i914 =  (int64_t)0;
i913 = (i913 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)40,  (int32_t)28,  (int32_t)28, tmp453);

uint64_t* tmp512 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)28; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)28; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)40; i3++){
Arr4DIdxRowM(tmp512, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)40,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp508, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)40,i0,i1,i2,i3), Arr4DIdxRowM(tmp510, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)40,i0,i1,i2,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40, tmp508);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40, tmp510);

uint64_t* tmp515 = make_array<uint64_t>( (int32_t)1,  (int32_t)40,  (int32_t)28,  (int32_t)28);

int64_t i928;

int64_t i927;

int64_t i926;

int64_t i925;

int64_t i924;

int64_t i923;

int64_t i922;

int64_t i921;
i921 =  (int64_t)0;
i922 =  (int64_t)0;
i923 =  (int64_t)0;
i924 =  (int64_t)0;
for (uint32_t i925 =  (int32_t)0; i925 <  (int32_t)1; i925++){
for (uint32_t i927 =  (int32_t)0; i927 <  (int32_t)28; i927++){
for (uint32_t i928 =  (int32_t)0; i928 <  (int32_t)28; i928++){
for (uint32_t i926 =  (int32_t)0; i926 <  (int32_t)40; i926++){
Arr4DIdxRowM(tmp515, (int32_t)1, (int32_t)40, (int32_t)28, (int32_t)28,i925,i926,i927,i928) = Arr4DIdxRowM(tmp512, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)40,i921,i922,i923,i924);
i924 = (i924 +  (int64_t)1);
if ((i924 ==  (int64_t)40)) {
i924 =  (int64_t)0;
i923 = (i923 +  (int64_t)1);
if ((i923 ==  (int64_t)28)) {
i923 =  (int64_t)0;
i922 = (i922 +  (int64_t)1);
if ((i922 ==  (int64_t)28)) {
i922 =  (int64_t)0;
i921 = (i921 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40, tmp512);

uint64_t* tmp517 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40);

int64_t i936;

int64_t i935;

int64_t i934;

int64_t i933;

int64_t i932;

int64_t i931;

int64_t i930;

int64_t i929;
i929 =  (int64_t)0;
i930 =  (int64_t)0;
i931 =  (int64_t)0;
i932 =  (int64_t)0;
for (uint32_t i933 =  (int32_t)0; i933 <  (int32_t)1; i933++){
for (uint32_t i936 =  (int32_t)0; i936 <  (int32_t)40; i936++){
for (uint32_t i934 =  (int32_t)0; i934 <  (int32_t)28; i934++){
for (uint32_t i935 =  (int32_t)0; i935 <  (int32_t)28; i935++){
Arr4DIdxRowM(tmp517, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)40,i933,i934,i935,i936) = Arr4DIdxRowM(tmp515, (int32_t)1, (int32_t)40, (int32_t)28, (int32_t)28,i929,i930,i931,i932);
i932 = (i932 +  (int64_t)1);
if ((i932 ==  (int64_t)28)) {
i932 =  (int64_t)0;
i931 = (i931 +  (int64_t)1);
if ((i931 ==  (int64_t)28)) {
i931 =  (int64_t)0;
i930 = (i930 +  (int64_t)1);
if ((i930 ==  (int64_t)40)) {
i930 =  (int64_t)0;
i929 = (i929 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)40,  (int32_t)28,  (int32_t)28, tmp515);

uint64_t* tmp519 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)40,  (int32_t)240);

int64_t i944;

int64_t i943;

int64_t i942;

int64_t i941;

int64_t i940;

int64_t i939;

int64_t i938;

int64_t i937;
i937 =  (int64_t)0;
i938 =  (int64_t)0;
i939 =  (int64_t)0;
i940 =  (int64_t)0;
for (uint32_t i944 =  (int32_t)0; i944 <  (int32_t)240; i944++){
for (uint32_t i943 =  (int32_t)0; i943 <  (int32_t)40; i943++){
for (uint32_t i941 =  (int32_t)0; i941 <  (int32_t)1; i941++){
for (uint32_t i942 =  (int32_t)0; i942 <  (int32_t)1; i942++){
Arr4DIdxRowM(tmp519, (int32_t)1, (int32_t)1, (int32_t)40, (int32_t)240,i941,i942,i943,i944) = Arr4DIdxRowM(tmp45, (int32_t)240, (int32_t)40, (int32_t)1, (int32_t)1,i937,i938,i939,i940);
i940 = (i940 +  (int64_t)1);
if ((i940 ==  (int64_t)1)) {
i940 =  (int64_t)0;
i939 = (i939 +  (int64_t)1);
if ((i939 ==  (int64_t)1)) {
i939 =  (int64_t)0;
i938 = (i938 +  (int64_t)1);
if ((i938 ==  (int64_t)40)) {
i938 =  (int64_t)0;
i937 = (i937 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)240,  (int32_t)40,  (int32_t)1,  (int32_t)1, tmp45);

uint64_t* tmp521 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)240);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40, tmp517,  kScale);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40,  (int32_t)1,  (int32_t)1,  (int32_t)240,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp517, tmp519, tmp521);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)40, tmp517);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)40,  (int32_t)240, tmp519);

uint64_t* tmp524 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)240);

int64_t i949;

int64_t i948;

int64_t i947;

int64_t i946;

int64_t i945;
i945 =  (int64_t)0;
for (uint32_t i946 =  (int32_t)0; i946 <  (int32_t)1; i946++){
for (uint32_t i947 =  (int32_t)0; i947 <  (int32_t)1; i947++){
for (uint32_t i948 =  (int32_t)0; i948 <  (int32_t)1; i948++){
for (uint32_t i949 =  (int32_t)0; i949 <  (int32_t)240; i949++){
Arr4DIdxRowM(tmp524, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)240,i946,i947,i948,i949) = Arr1DIdxRowM(tmp46, (int32_t)240,i945);
i945 = (i945 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)240, tmp46);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)240, tmp524,  kScale);

uint64_t* tmp526 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)240);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)28; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)28; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)240; i3++){
Arr4DIdxRowM(tmp526, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)240,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp521, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)240,i0,i1,i2,i3), Arr4DIdxRowM(tmp524, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)240,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)240, tmp524);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)240, tmp521);

uint64_t* tmp529 = make_array<uint64_t>( (int32_t)1,  (int32_t)240,  (int32_t)28,  (int32_t)28);

int64_t i957;

int64_t i956;

int64_t i955;

int64_t i954;

int64_t i953;

int64_t i952;

int64_t i951;

int64_t i950;
i950 =  (int64_t)0;
i951 =  (int64_t)0;
i952 =  (int64_t)0;
i953 =  (int64_t)0;
for (uint32_t i954 =  (int32_t)0; i954 <  (int32_t)1; i954++){
for (uint32_t i956 =  (int32_t)0; i956 <  (int32_t)28; i956++){
for (uint32_t i957 =  (int32_t)0; i957 <  (int32_t)28; i957++){
for (uint32_t i955 =  (int32_t)0; i955 <  (int32_t)240; i955++){
Arr4DIdxRowM(tmp529, (int32_t)1, (int32_t)240, (int32_t)28, (int32_t)28,i954,i955,i956,i957) = Arr4DIdxRowM(tmp526, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)240,i950,i951,i952,i953);
i953 = (i953 +  (int64_t)1);
if ((i953 ==  (int64_t)240)) {
i953 =  (int64_t)0;
i952 = (i952 +  (int64_t)1);
if ((i952 ==  (int64_t)28)) {
i952 =  (int64_t)0;
i951 = (i951 +  (int64_t)1);
if ((i951 ==  (int64_t)28)) {
i951 =  (int64_t)0;
i950 = (i950 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)240, tmp526);

uint64_t* tmp531 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)240);

int64_t i965;

int64_t i964;

int64_t i963;

int64_t i962;

int64_t i961;

int64_t i960;

int64_t i959;

int64_t i958;
i958 =  (int64_t)0;
i959 =  (int64_t)0;
i960 =  (int64_t)0;
i961 =  (int64_t)0;
for (uint32_t i962 =  (int32_t)0; i962 <  (int32_t)1; i962++){
for (uint32_t i965 =  (int32_t)0; i965 <  (int32_t)240; i965++){
for (uint32_t i963 =  (int32_t)0; i963 <  (int32_t)28; i963++){
for (uint32_t i964 =  (int32_t)0; i964 <  (int32_t)28; i964++){
Arr4DIdxRowM(tmp531, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)240,i962,i963,i964,i965) = Arr4DIdxRowM(tmp529, (int32_t)1, (int32_t)240, (int32_t)28, (int32_t)28,i958,i959,i960,i961);
i961 = (i961 +  (int64_t)1);
if ((i961 ==  (int64_t)28)) {
i961 =  (int64_t)0;
i960 = (i960 +  (int64_t)1);
if ((i960 ==  (int64_t)28)) {
i960 =  (int64_t)0;
i959 = (i959 +  (int64_t)1);
if ((i959 ==  (int64_t)240)) {
i959 =  (int64_t)0;
i958 = (i958 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)240,  (int32_t)28,  (int32_t)28, tmp529);

uint64_t* tmp533 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)240);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)240, tmp531, tmp533,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)240, tmp531);

uint64_t* tmp535 = make_array<uint64_t>( (int32_t)1,  (int32_t)240,  (int32_t)28,  (int32_t)28);

int64_t i973;

int64_t i972;

int64_t i971;

int64_t i970;

int64_t i969;

int64_t i968;

int64_t i967;

int64_t i966;
i966 =  (int64_t)0;
i967 =  (int64_t)0;
i968 =  (int64_t)0;
i969 =  (int64_t)0;
for (uint32_t i970 =  (int32_t)0; i970 <  (int32_t)1; i970++){
for (uint32_t i972 =  (int32_t)0; i972 <  (int32_t)28; i972++){
for (uint32_t i973 =  (int32_t)0; i973 <  (int32_t)28; i973++){
for (uint32_t i971 =  (int32_t)0; i971 <  (int32_t)240; i971++){
Arr4DIdxRowM(tmp535, (int32_t)1, (int32_t)240, (int32_t)28, (int32_t)28,i970,i971,i972,i973) = Arr4DIdxRowM(tmp533, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)240,i966,i967,i968,i969);
i969 = (i969 +  (int64_t)1);
if ((i969 ==  (int64_t)240)) {
i969 =  (int64_t)0;
i968 = (i968 +  (int64_t)1);
if ((i968 ==  (int64_t)28)) {
i968 =  (int64_t)0;
i967 = (i967 +  (int64_t)1);
if ((i967 ==  (int64_t)28)) {
i967 =  (int64_t)0;
i966 = (i966 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)240, tmp533);

uint64_t* tmp537 = make_array<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)240);

int64_t i981;

int64_t i980;

int64_t i979;

int64_t i978;

int64_t i977;

int64_t i976;

int64_t i975;

int64_t i974;
i974 =  (int64_t)0;
i975 =  (int64_t)0;
i976 =  (int64_t)0;
i977 =  (int64_t)0;
for (uint32_t i978 =  (int32_t)0; i978 <  (int32_t)1; i978++){
for (uint32_t i981 =  (int32_t)0; i981 <  (int32_t)240; i981++){
for (uint32_t i979 =  (int32_t)0; i979 <  (int32_t)28; i979++){
for (uint32_t i980 =  (int32_t)0; i980 <  (int32_t)28; i980++){
Arr4DIdxRowM(tmp537, (int32_t)1, (int32_t)28, (int32_t)28, (int32_t)240,i978,i979,i980,i981) = Arr4DIdxRowM(tmp535, (int32_t)1, (int32_t)240, (int32_t)28, (int32_t)28,i974,i975,i976,i977);
i977 = (i977 +  (int64_t)1);
if ((i977 ==  (int64_t)28)) {
i977 =  (int64_t)0;
i976 = (i976 +  (int64_t)1);
if ((i976 ==  (int64_t)28)) {
i976 =  (int64_t)0;
i975 = (i975 +  (int64_t)1);
if ((i975 ==  (int64_t)240)) {
i975 =  (int64_t)0;
i974 = (i974 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)240,  (int32_t)28,  (int32_t)28, tmp535);

uint64_t* tmp539 = make_array<uint64_t>( (int32_t)5,  (int32_t)5,  (int32_t)1,  (int32_t)240);

int64_t i989;

int64_t i988;

int64_t i987;

int64_t i986;

int64_t i985;

int64_t i984;

int64_t i983;

int64_t i982;
i982 =  (int64_t)0;
i983 =  (int64_t)0;
i984 =  (int64_t)0;
i985 =  (int64_t)0;
for (uint32_t i989 =  (int32_t)0; i989 <  (int32_t)240; i989++){
for (uint32_t i988 =  (int32_t)0; i988 <  (int32_t)1; i988++){
for (uint32_t i986 =  (int32_t)0; i986 <  (int32_t)5; i986++){
for (uint32_t i987 =  (int32_t)0; i987 <  (int32_t)5; i987++){
Arr4DIdxRowM(tmp539, (int32_t)5, (int32_t)5, (int32_t)1, (int32_t)240,i986,i987,i988,i989) = Arr4DIdxRowM(tmp47, (int32_t)240, (int32_t)1, (int32_t)5, (int32_t)5,i982,i983,i984,i985);
i985 = (i985 +  (int64_t)1);
if ((i985 ==  (int64_t)5)) {
i985 =  (int64_t)0;
i984 = (i984 +  (int64_t)1);
if ((i984 ==  (int64_t)5)) {
i984 =  (int64_t)0;
i983 = (i983 +  (int64_t)1);
if ((i983 ==  (int64_t)1)) {
i983 =  (int64_t)0;
i982 = (i982 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)240,  (int32_t)1,  (int32_t)5,  (int32_t)5, tmp47);

uint64_t* tmp541 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)240);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)240,  (int32_t)5,  (int32_t)5,  (int32_t)240,  (int32_t)2,  (int32_t)2,  (int32_t)2,  (int32_t)2,  (int32_t)2,  (int32_t)2,  (int32_t)240, tmp537, tmp539, tmp541);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)240, tmp537);
ClearMemSecret4( (int32_t)5,  (int32_t)5,  (int32_t)1,  (int32_t)240, tmp539);

uint64_t* tmp544 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)240);

int64_t i994;

int64_t i993;

int64_t i992;

int64_t i991;

int64_t i990;
i990 =  (int64_t)0;
for (uint32_t i991 =  (int32_t)0; i991 <  (int32_t)1; i991++){
for (uint32_t i992 =  (int32_t)0; i992 <  (int32_t)1; i992++){
for (uint32_t i993 =  (int32_t)0; i993 <  (int32_t)1; i993++){
for (uint32_t i994 =  (int32_t)0; i994 <  (int32_t)240; i994++){
Arr4DIdxRowM(tmp544, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)240,i991,i992,i993,i994) = Arr1DIdxRowM(tmp48, (int32_t)240,i990);
i990 = (i990 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)240, tmp48);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)240, tmp544,  kScale);

uint64_t* tmp546 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)240);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)14; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)14; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)240; i3++){
Arr4DIdxRowM(tmp546, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)240,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp541, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)240,i0,i1,i2,i3), Arr4DIdxRowM(tmp544, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)240,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)240, tmp544);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)240, tmp541);

uint64_t* tmp549 = make_array<uint64_t>( (int32_t)1,  (int32_t)240,  (int32_t)14,  (int32_t)14);

int64_t i1002;

int64_t i1001;

int64_t i1000;

int64_t i999;

int64_t i998;

int64_t i997;

int64_t i996;

int64_t i995;
i995 =  (int64_t)0;
i996 =  (int64_t)0;
i997 =  (int64_t)0;
i998 =  (int64_t)0;
for (uint32_t i999 =  (int32_t)0; i999 <  (int32_t)1; i999++){
for (uint32_t i1001 =  (int32_t)0; i1001 <  (int32_t)14; i1001++){
for (uint32_t i1002 =  (int32_t)0; i1002 <  (int32_t)14; i1002++){
for (uint32_t i1000 =  (int32_t)0; i1000 <  (int32_t)240; i1000++){
Arr4DIdxRowM(tmp549, (int32_t)1, (int32_t)240, (int32_t)14, (int32_t)14,i999,i1000,i1001,i1002) = Arr4DIdxRowM(tmp546, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)240,i995,i996,i997,i998);
i998 = (i998 +  (int64_t)1);
if ((i998 ==  (int64_t)240)) {
i998 =  (int64_t)0;
i997 = (i997 +  (int64_t)1);
if ((i997 ==  (int64_t)14)) {
i997 =  (int64_t)0;
i996 = (i996 +  (int64_t)1);
if ((i996 ==  (int64_t)14)) {
i996 =  (int64_t)0;
i995 = (i995 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)240, tmp546);

uint64_t* tmp551 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)240);

int64_t i1010;

int64_t i1009;

int64_t i1008;

int64_t i1007;

int64_t i1006;

int64_t i1005;

int64_t i1004;

int64_t i1003;
i1003 =  (int64_t)0;
i1004 =  (int64_t)0;
i1005 =  (int64_t)0;
i1006 =  (int64_t)0;
for (uint32_t i1007 =  (int32_t)0; i1007 <  (int32_t)1; i1007++){
for (uint32_t i1010 =  (int32_t)0; i1010 <  (int32_t)240; i1010++){
for (uint32_t i1008 =  (int32_t)0; i1008 <  (int32_t)14; i1008++){
for (uint32_t i1009 =  (int32_t)0; i1009 <  (int32_t)14; i1009++){
Arr4DIdxRowM(tmp551, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)240,i1007,i1008,i1009,i1010) = Arr4DIdxRowM(tmp549, (int32_t)1, (int32_t)240, (int32_t)14, (int32_t)14,i1003,i1004,i1005,i1006);
i1006 = (i1006 +  (int64_t)1);
if ((i1006 ==  (int64_t)14)) {
i1006 =  (int64_t)0;
i1005 = (i1005 +  (int64_t)1);
if ((i1005 ==  (int64_t)14)) {
i1005 =  (int64_t)0;
i1004 = (i1004 +  (int64_t)1);
if ((i1004 ==  (int64_t)240)) {
i1004 =  (int64_t)0;
i1003 = (i1003 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)240,  (int32_t)14,  (int32_t)14, tmp549);

uint64_t* tmp553 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)240);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)240, tmp551, tmp553,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)240, tmp551);

uint64_t* tmp555 = make_array<uint64_t>( (int32_t)1,  (int32_t)240,  (int32_t)14,  (int32_t)14);

int64_t i1018;

int64_t i1017;

int64_t i1016;

int64_t i1015;

int64_t i1014;

int64_t i1013;

int64_t i1012;

int64_t i1011;
i1011 =  (int64_t)0;
i1012 =  (int64_t)0;
i1013 =  (int64_t)0;
i1014 =  (int64_t)0;
for (uint32_t i1015 =  (int32_t)0; i1015 <  (int32_t)1; i1015++){
for (uint32_t i1017 =  (int32_t)0; i1017 <  (int32_t)14; i1017++){
for (uint32_t i1018 =  (int32_t)0; i1018 <  (int32_t)14; i1018++){
for (uint32_t i1016 =  (int32_t)0; i1016 <  (int32_t)240; i1016++){
Arr4DIdxRowM(tmp555, (int32_t)1, (int32_t)240, (int32_t)14, (int32_t)14,i1015,i1016,i1017,i1018) = Arr4DIdxRowM(tmp553, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)240,i1011,i1012,i1013,i1014);
i1014 = (i1014 +  (int64_t)1);
if ((i1014 ==  (int64_t)240)) {
i1014 =  (int64_t)0;
i1013 = (i1013 +  (int64_t)1);
if ((i1013 ==  (int64_t)14)) {
i1013 =  (int64_t)0;
i1012 = (i1012 +  (int64_t)1);
if ((i1012 ==  (int64_t)14)) {
i1012 =  (int64_t)0;
i1011 = (i1011 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)240, tmp553);

uint64_t* tmp557 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)240);

int64_t i1026;

int64_t i1025;

int64_t i1024;

int64_t i1023;

int64_t i1022;

int64_t i1021;

int64_t i1020;

int64_t i1019;
i1019 =  (int64_t)0;
i1020 =  (int64_t)0;
i1021 =  (int64_t)0;
i1022 =  (int64_t)0;
for (uint32_t i1023 =  (int32_t)0; i1023 <  (int32_t)1; i1023++){
for (uint32_t i1026 =  (int32_t)0; i1026 <  (int32_t)240; i1026++){
for (uint32_t i1024 =  (int32_t)0; i1024 <  (int32_t)14; i1024++){
for (uint32_t i1025 =  (int32_t)0; i1025 <  (int32_t)14; i1025++){
Arr4DIdxRowM(tmp557, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)240,i1023,i1024,i1025,i1026) = Arr4DIdxRowM(tmp555, (int32_t)1, (int32_t)240, (int32_t)14, (int32_t)14,i1019,i1020,i1021,i1022);
i1022 = (i1022 +  (int64_t)1);
if ((i1022 ==  (int64_t)14)) {
i1022 =  (int64_t)0;
i1021 = (i1021 +  (int64_t)1);
if ((i1021 ==  (int64_t)14)) {
i1021 =  (int64_t)0;
i1020 = (i1020 +  (int64_t)1);
if ((i1020 ==  (int64_t)240)) {
i1020 =  (int64_t)0;
i1019 = (i1019 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)240,  (int32_t)14,  (int32_t)14, tmp555);

uint64_t* tmp559 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)240,  (int32_t)80);

int64_t i1034;

int64_t i1033;

int64_t i1032;

int64_t i1031;

int64_t i1030;

int64_t i1029;

int64_t i1028;

int64_t i1027;
i1027 =  (int64_t)0;
i1028 =  (int64_t)0;
i1029 =  (int64_t)0;
i1030 =  (int64_t)0;
for (uint32_t i1034 =  (int32_t)0; i1034 <  (int32_t)80; i1034++){
for (uint32_t i1033 =  (int32_t)0; i1033 <  (int32_t)240; i1033++){
for (uint32_t i1031 =  (int32_t)0; i1031 <  (int32_t)1; i1031++){
for (uint32_t i1032 =  (int32_t)0; i1032 <  (int32_t)1; i1032++){
Arr4DIdxRowM(tmp559, (int32_t)1, (int32_t)1, (int32_t)240, (int32_t)80,i1031,i1032,i1033,i1034) = Arr4DIdxRowM(tmp49, (int32_t)80, (int32_t)240, (int32_t)1, (int32_t)1,i1027,i1028,i1029,i1030);
i1030 = (i1030 +  (int64_t)1);
if ((i1030 ==  (int64_t)1)) {
i1030 =  (int64_t)0;
i1029 = (i1029 +  (int64_t)1);
if ((i1029 ==  (int64_t)1)) {
i1029 =  (int64_t)0;
i1028 = (i1028 +  (int64_t)1);
if ((i1028 ==  (int64_t)240)) {
i1028 =  (int64_t)0;
i1027 = (i1027 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)80,  (int32_t)240,  (int32_t)1,  (int32_t)1, tmp49);

uint64_t* tmp561 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)240,  (int32_t)1,  (int32_t)1,  (int32_t)80,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp557, tmp559, tmp561);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)240,  (int32_t)80, tmp559);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)240, tmp557);

uint64_t* tmp564 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)80);

int64_t i1039;

int64_t i1038;

int64_t i1037;

int64_t i1036;

int64_t i1035;
i1035 =  (int64_t)0;
for (uint32_t i1036 =  (int32_t)0; i1036 <  (int32_t)1; i1036++){
for (uint32_t i1037 =  (int32_t)0; i1037 <  (int32_t)1; i1037++){
for (uint32_t i1038 =  (int32_t)0; i1038 <  (int32_t)1; i1038++){
for (uint32_t i1039 =  (int32_t)0; i1039 <  (int32_t)80; i1039++){
Arr4DIdxRowM(tmp564, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)80,i1036,i1037,i1038,i1039) = Arr1DIdxRowM(tmp50, (int32_t)80,i1035);
i1035 = (i1035 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)80, tmp50);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)80, tmp564,  kScale);

uint64_t* tmp566 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)14; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)14; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)80; i3++){
Arr4DIdxRowM(tmp566, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)80,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp561, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)80,i0,i1,i2,i3), Arr4DIdxRowM(tmp564, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)80,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)80, tmp564);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80, tmp561);

uint64_t* tmp569 = make_array<uint64_t>( (int32_t)1,  (int32_t)80,  (int32_t)14,  (int32_t)14);

int64_t i1047;

int64_t i1046;

int64_t i1045;

int64_t i1044;

int64_t i1043;

int64_t i1042;

int64_t i1041;

int64_t i1040;
i1040 =  (int64_t)0;
i1041 =  (int64_t)0;
i1042 =  (int64_t)0;
i1043 =  (int64_t)0;
for (uint32_t i1044 =  (int32_t)0; i1044 <  (int32_t)1; i1044++){
for (uint32_t i1046 =  (int32_t)0; i1046 <  (int32_t)14; i1046++){
for (uint32_t i1047 =  (int32_t)0; i1047 <  (int32_t)14; i1047++){
for (uint32_t i1045 =  (int32_t)0; i1045 <  (int32_t)80; i1045++){
Arr4DIdxRowM(tmp569, (int32_t)1, (int32_t)80, (int32_t)14, (int32_t)14,i1044,i1045,i1046,i1047) = Arr4DIdxRowM(tmp566, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)80,i1040,i1041,i1042,i1043);
i1043 = (i1043 +  (int64_t)1);
if ((i1043 ==  (int64_t)80)) {
i1043 =  (int64_t)0;
i1042 = (i1042 +  (int64_t)1);
if ((i1042 ==  (int64_t)14)) {
i1042 =  (int64_t)0;
i1041 = (i1041 +  (int64_t)1);
if ((i1041 ==  (int64_t)14)) {
i1041 =  (int64_t)0;
i1040 = (i1040 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80, tmp566);

uint64_t* tmp571 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80);

int64_t i1055;

int64_t i1054;

int64_t i1053;

int64_t i1052;

int64_t i1051;

int64_t i1050;

int64_t i1049;

int64_t i1048;
i1048 =  (int64_t)0;
i1049 =  (int64_t)0;
i1050 =  (int64_t)0;
i1051 =  (int64_t)0;
for (uint32_t i1052 =  (int32_t)0; i1052 <  (int32_t)1; i1052++){
for (uint32_t i1055 =  (int32_t)0; i1055 <  (int32_t)80; i1055++){
for (uint32_t i1053 =  (int32_t)0; i1053 <  (int32_t)14; i1053++){
for (uint32_t i1054 =  (int32_t)0; i1054 <  (int32_t)14; i1054++){
Arr4DIdxRowM(tmp571, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)80,i1052,i1053,i1054,i1055) = Arr4DIdxRowM(tmp569, (int32_t)1, (int32_t)80, (int32_t)14, (int32_t)14,i1048,i1049,i1050,i1051);
i1051 = (i1051 +  (int64_t)1);
if ((i1051 ==  (int64_t)14)) {
i1051 =  (int64_t)0;
i1050 = (i1050 +  (int64_t)1);
if ((i1050 ==  (int64_t)14)) {
i1050 =  (int64_t)0;
i1049 = (i1049 +  (int64_t)1);
if ((i1049 ==  (int64_t)80)) {
i1049 =  (int64_t)0;
i1048 = (i1048 +  (int64_t)1);
}
}
}
}
}
}
}

uint64_t* tmp572 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)80,  (int32_t)480);

int64_t i1063;

int64_t i1062;

int64_t i1061;

int64_t i1060;

int64_t i1059;

int64_t i1058;

int64_t i1057;

int64_t i1056;
i1056 =  (int64_t)0;
i1057 =  (int64_t)0;
i1058 =  (int64_t)0;
i1059 =  (int64_t)0;
for (uint32_t i1063 =  (int32_t)0; i1063 <  (int32_t)480; i1063++){
for (uint32_t i1062 =  (int32_t)0; i1062 <  (int32_t)80; i1062++){
for (uint32_t i1060 =  (int32_t)0; i1060 <  (int32_t)1; i1060++){
for (uint32_t i1061 =  (int32_t)0; i1061 <  (int32_t)1; i1061++){
Arr4DIdxRowM(tmp572, (int32_t)1, (int32_t)1, (int32_t)80, (int32_t)480,i1060,i1061,i1062,i1063) = Arr4DIdxRowM(tmp51, (int32_t)480, (int32_t)80, (int32_t)1, (int32_t)1,i1056,i1057,i1058,i1059);
i1059 = (i1059 +  (int64_t)1);
if ((i1059 ==  (int64_t)1)) {
i1059 =  (int64_t)0;
i1058 = (i1058 +  (int64_t)1);
if ((i1058 ==  (int64_t)1)) {
i1058 =  (int64_t)0;
i1057 = (i1057 +  (int64_t)1);
if ((i1057 ==  (int64_t)80)) {
i1057 =  (int64_t)0;
i1056 = (i1056 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)480,  (int32_t)80,  (int32_t)1,  (int32_t)1, tmp51);

uint64_t* tmp574 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80, tmp571,  kScale);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80,  (int32_t)1,  (int32_t)1,  (int32_t)480,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp571, tmp572, tmp574);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80, tmp571);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)80,  (int32_t)480, tmp572);

uint64_t* tmp577 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)480);

int64_t i1068;

int64_t i1067;

int64_t i1066;

int64_t i1065;

int64_t i1064;
i1064 =  (int64_t)0;
for (uint32_t i1065 =  (int32_t)0; i1065 <  (int32_t)1; i1065++){
for (uint32_t i1066 =  (int32_t)0; i1066 <  (int32_t)1; i1066++){
for (uint32_t i1067 =  (int32_t)0; i1067 <  (int32_t)1; i1067++){
for (uint32_t i1068 =  (int32_t)0; i1068 <  (int32_t)480; i1068++){
Arr4DIdxRowM(tmp577, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)480,i1065,i1066,i1067,i1068) = Arr1DIdxRowM(tmp52, (int32_t)480,i1064);
i1064 = (i1064 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)480, tmp52);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)480, tmp577,  kScale);

uint64_t* tmp579 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)14; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)14; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)480; i3++){
Arr4DIdxRowM(tmp579, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp574, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i0,i1,i2,i3), Arr4DIdxRowM(tmp577, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)480,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp574);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)480, tmp577);

uint64_t* tmp582 = make_array<uint64_t>( (int32_t)1,  (int32_t)480,  (int32_t)14,  (int32_t)14);

int64_t i1076;

int64_t i1075;

int64_t i1074;

int64_t i1073;

int64_t i1072;

int64_t i1071;

int64_t i1070;

int64_t i1069;
i1069 =  (int64_t)0;
i1070 =  (int64_t)0;
i1071 =  (int64_t)0;
i1072 =  (int64_t)0;
for (uint32_t i1073 =  (int32_t)0; i1073 <  (int32_t)1; i1073++){
for (uint32_t i1075 =  (int32_t)0; i1075 <  (int32_t)14; i1075++){
for (uint32_t i1076 =  (int32_t)0; i1076 <  (int32_t)14; i1076++){
for (uint32_t i1074 =  (int32_t)0; i1074 <  (int32_t)480; i1074++){
Arr4DIdxRowM(tmp582, (int32_t)1, (int32_t)480, (int32_t)14, (int32_t)14,i1073,i1074,i1075,i1076) = Arr4DIdxRowM(tmp579, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i1069,i1070,i1071,i1072);
i1072 = (i1072 +  (int64_t)1);
if ((i1072 ==  (int64_t)480)) {
i1072 =  (int64_t)0;
i1071 = (i1071 +  (int64_t)1);
if ((i1071 ==  (int64_t)14)) {
i1071 =  (int64_t)0;
i1070 = (i1070 +  (int64_t)1);
if ((i1070 ==  (int64_t)14)) {
i1070 =  (int64_t)0;
i1069 = (i1069 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp579);

uint64_t* tmp584 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);

int64_t i1084;

int64_t i1083;

int64_t i1082;

int64_t i1081;

int64_t i1080;

int64_t i1079;

int64_t i1078;

int64_t i1077;
i1077 =  (int64_t)0;
i1078 =  (int64_t)0;
i1079 =  (int64_t)0;
i1080 =  (int64_t)0;
for (uint32_t i1081 =  (int32_t)0; i1081 <  (int32_t)1; i1081++){
for (uint32_t i1084 =  (int32_t)0; i1084 <  (int32_t)480; i1084++){
for (uint32_t i1082 =  (int32_t)0; i1082 <  (int32_t)14; i1082++){
for (uint32_t i1083 =  (int32_t)0; i1083 <  (int32_t)14; i1083++){
Arr4DIdxRowM(tmp584, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i1081,i1082,i1083,i1084) = Arr4DIdxRowM(tmp582, (int32_t)1, (int32_t)480, (int32_t)14, (int32_t)14,i1077,i1078,i1079,i1080);
i1080 = (i1080 +  (int64_t)1);
if ((i1080 ==  (int64_t)14)) {
i1080 =  (int64_t)0;
i1079 = (i1079 +  (int64_t)1);
if ((i1079 ==  (int64_t)14)) {
i1079 =  (int64_t)0;
i1078 = (i1078 +  (int64_t)1);
if ((i1078 ==  (int64_t)480)) {
i1078 =  (int64_t)0;
i1077 = (i1077 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)480,  (int32_t)14,  (int32_t)14, tmp582);

uint64_t* tmp586 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp584, tmp586,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp584);

uint64_t* tmp588 = make_array<uint64_t>( (int32_t)1,  (int32_t)480,  (int32_t)14,  (int32_t)14);

int64_t i1092;

int64_t i1091;

int64_t i1090;

int64_t i1089;

int64_t i1088;

int64_t i1087;

int64_t i1086;

int64_t i1085;
i1085 =  (int64_t)0;
i1086 =  (int64_t)0;
i1087 =  (int64_t)0;
i1088 =  (int64_t)0;
for (uint32_t i1089 =  (int32_t)0; i1089 <  (int32_t)1; i1089++){
for (uint32_t i1091 =  (int32_t)0; i1091 <  (int32_t)14; i1091++){
for (uint32_t i1092 =  (int32_t)0; i1092 <  (int32_t)14; i1092++){
for (uint32_t i1090 =  (int32_t)0; i1090 <  (int32_t)480; i1090++){
Arr4DIdxRowM(tmp588, (int32_t)1, (int32_t)480, (int32_t)14, (int32_t)14,i1089,i1090,i1091,i1092) = Arr4DIdxRowM(tmp586, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i1085,i1086,i1087,i1088);
i1088 = (i1088 +  (int64_t)1);
if ((i1088 ==  (int64_t)480)) {
i1088 =  (int64_t)0;
i1087 = (i1087 +  (int64_t)1);
if ((i1087 ==  (int64_t)14)) {
i1087 =  (int64_t)0;
i1086 = (i1086 +  (int64_t)1);
if ((i1086 ==  (int64_t)14)) {
i1086 =  (int64_t)0;
i1085 = (i1085 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp586);

uint64_t* tmp590 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);

int64_t i1100;

int64_t i1099;

int64_t i1098;

int64_t i1097;

int64_t i1096;

int64_t i1095;

int64_t i1094;

int64_t i1093;
i1093 =  (int64_t)0;
i1094 =  (int64_t)0;
i1095 =  (int64_t)0;
i1096 =  (int64_t)0;
for (uint32_t i1097 =  (int32_t)0; i1097 <  (int32_t)1; i1097++){
for (uint32_t i1100 =  (int32_t)0; i1100 <  (int32_t)480; i1100++){
for (uint32_t i1098 =  (int32_t)0; i1098 <  (int32_t)14; i1098++){
for (uint32_t i1099 =  (int32_t)0; i1099 <  (int32_t)14; i1099++){
Arr4DIdxRowM(tmp590, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i1097,i1098,i1099,i1100) = Arr4DIdxRowM(tmp588, (int32_t)1, (int32_t)480, (int32_t)14, (int32_t)14,i1093,i1094,i1095,i1096);
i1096 = (i1096 +  (int64_t)1);
if ((i1096 ==  (int64_t)14)) {
i1096 =  (int64_t)0;
i1095 = (i1095 +  (int64_t)1);
if ((i1095 ==  (int64_t)14)) {
i1095 =  (int64_t)0;
i1094 = (i1094 +  (int64_t)1);
if ((i1094 ==  (int64_t)480)) {
i1094 =  (int64_t)0;
i1093 = (i1093 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)480,  (int32_t)14,  (int32_t)14, tmp588);

uint64_t* tmp592 = make_array<uint64_t>( (int32_t)5,  (int32_t)5,  (int32_t)1,  (int32_t)480);

int64_t i1108;

int64_t i1107;

int64_t i1106;

int64_t i1105;

int64_t i1104;

int64_t i1103;

int64_t i1102;

int64_t i1101;
i1101 =  (int64_t)0;
i1102 =  (int64_t)0;
i1103 =  (int64_t)0;
i1104 =  (int64_t)0;
for (uint32_t i1108 =  (int32_t)0; i1108 <  (int32_t)480; i1108++){
for (uint32_t i1107 =  (int32_t)0; i1107 <  (int32_t)1; i1107++){
for (uint32_t i1105 =  (int32_t)0; i1105 <  (int32_t)5; i1105++){
for (uint32_t i1106 =  (int32_t)0; i1106 <  (int32_t)5; i1106++){
Arr4DIdxRowM(tmp592, (int32_t)5, (int32_t)5, (int32_t)1, (int32_t)480,i1105,i1106,i1107,i1108) = Arr4DIdxRowM(tmp53, (int32_t)480, (int32_t)1, (int32_t)5, (int32_t)5,i1101,i1102,i1103,i1104);
i1104 = (i1104 +  (int64_t)1);
if ((i1104 ==  (int64_t)5)) {
i1104 =  (int64_t)0;
i1103 = (i1103 +  (int64_t)1);
if ((i1103 ==  (int64_t)5)) {
i1103 =  (int64_t)0;
i1102 = (i1102 +  (int64_t)1);
if ((i1102 ==  (int64_t)1)) {
i1102 =  (int64_t)0;
i1101 = (i1101 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)480,  (int32_t)1,  (int32_t)5,  (int32_t)5, tmp53);

uint64_t* tmp594 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480,  (int32_t)5,  (int32_t)5,  (int32_t)480,  (int32_t)2,  (int32_t)2,  (int32_t)2,  (int32_t)2,  (int32_t)1,  (int32_t)1,  (int32_t)480, tmp590, tmp592, tmp594);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp590);
ClearMemSecret4( (int32_t)5,  (int32_t)5,  (int32_t)1,  (int32_t)480, tmp592);

uint64_t* tmp597 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)480);

int64_t i1113;

int64_t i1112;

int64_t i1111;

int64_t i1110;

int64_t i1109;
i1109 =  (int64_t)0;
for (uint32_t i1110 =  (int32_t)0; i1110 <  (int32_t)1; i1110++){
for (uint32_t i1111 =  (int32_t)0; i1111 <  (int32_t)1; i1111++){
for (uint32_t i1112 =  (int32_t)0; i1112 <  (int32_t)1; i1112++){
for (uint32_t i1113 =  (int32_t)0; i1113 <  (int32_t)480; i1113++){
Arr4DIdxRowM(tmp597, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)480,i1110,i1111,i1112,i1113) = Arr1DIdxRowM(tmp54, (int32_t)480,i1109);
i1109 = (i1109 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)480, tmp54);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)480, tmp597,  kScale);

uint64_t* tmp599 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)14; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)14; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)480; i3++){
Arr4DIdxRowM(tmp599, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp594, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i0,i1,i2,i3), Arr4DIdxRowM(tmp597, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)480,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)480, tmp597);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp594);

uint64_t* tmp602 = make_array<uint64_t>( (int32_t)1,  (int32_t)480,  (int32_t)14,  (int32_t)14);

int64_t i1121;

int64_t i1120;

int64_t i1119;

int64_t i1118;

int64_t i1117;

int64_t i1116;

int64_t i1115;

int64_t i1114;
i1114 =  (int64_t)0;
i1115 =  (int64_t)0;
i1116 =  (int64_t)0;
i1117 =  (int64_t)0;
for (uint32_t i1118 =  (int32_t)0; i1118 <  (int32_t)1; i1118++){
for (uint32_t i1120 =  (int32_t)0; i1120 <  (int32_t)14; i1120++){
for (uint32_t i1121 =  (int32_t)0; i1121 <  (int32_t)14; i1121++){
for (uint32_t i1119 =  (int32_t)0; i1119 <  (int32_t)480; i1119++){
Arr4DIdxRowM(tmp602, (int32_t)1, (int32_t)480, (int32_t)14, (int32_t)14,i1118,i1119,i1120,i1121) = Arr4DIdxRowM(tmp599, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i1114,i1115,i1116,i1117);
i1117 = (i1117 +  (int64_t)1);
if ((i1117 ==  (int64_t)480)) {
i1117 =  (int64_t)0;
i1116 = (i1116 +  (int64_t)1);
if ((i1116 ==  (int64_t)14)) {
i1116 =  (int64_t)0;
i1115 = (i1115 +  (int64_t)1);
if ((i1115 ==  (int64_t)14)) {
i1115 =  (int64_t)0;
i1114 = (i1114 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp599);

uint64_t* tmp604 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);

int64_t i1129;

int64_t i1128;

int64_t i1127;

int64_t i1126;

int64_t i1125;

int64_t i1124;

int64_t i1123;

int64_t i1122;
i1122 =  (int64_t)0;
i1123 =  (int64_t)0;
i1124 =  (int64_t)0;
i1125 =  (int64_t)0;
for (uint32_t i1126 =  (int32_t)0; i1126 <  (int32_t)1; i1126++){
for (uint32_t i1129 =  (int32_t)0; i1129 <  (int32_t)480; i1129++){
for (uint32_t i1127 =  (int32_t)0; i1127 <  (int32_t)14; i1127++){
for (uint32_t i1128 =  (int32_t)0; i1128 <  (int32_t)14; i1128++){
Arr4DIdxRowM(tmp604, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i1126,i1127,i1128,i1129) = Arr4DIdxRowM(tmp602, (int32_t)1, (int32_t)480, (int32_t)14, (int32_t)14,i1122,i1123,i1124,i1125);
i1125 = (i1125 +  (int64_t)1);
if ((i1125 ==  (int64_t)14)) {
i1125 =  (int64_t)0;
i1124 = (i1124 +  (int64_t)1);
if ((i1124 ==  (int64_t)14)) {
i1124 =  (int64_t)0;
i1123 = (i1123 +  (int64_t)1);
if ((i1123 ==  (int64_t)480)) {
i1123 =  (int64_t)0;
i1122 = (i1122 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)480,  (int32_t)14,  (int32_t)14, tmp602);

uint64_t* tmp606 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp604, tmp606,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp604);

uint64_t* tmp608 = make_array<uint64_t>( (int32_t)1,  (int32_t)480,  (int32_t)14,  (int32_t)14);

int64_t i1137;

int64_t i1136;

int64_t i1135;

int64_t i1134;

int64_t i1133;

int64_t i1132;

int64_t i1131;

int64_t i1130;
i1130 =  (int64_t)0;
i1131 =  (int64_t)0;
i1132 =  (int64_t)0;
i1133 =  (int64_t)0;
for (uint32_t i1134 =  (int32_t)0; i1134 <  (int32_t)1; i1134++){
for (uint32_t i1136 =  (int32_t)0; i1136 <  (int32_t)14; i1136++){
for (uint32_t i1137 =  (int32_t)0; i1137 <  (int32_t)14; i1137++){
for (uint32_t i1135 =  (int32_t)0; i1135 <  (int32_t)480; i1135++){
Arr4DIdxRowM(tmp608, (int32_t)1, (int32_t)480, (int32_t)14, (int32_t)14,i1134,i1135,i1136,i1137) = Arr4DIdxRowM(tmp606, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i1130,i1131,i1132,i1133);
i1133 = (i1133 +  (int64_t)1);
if ((i1133 ==  (int64_t)480)) {
i1133 =  (int64_t)0;
i1132 = (i1132 +  (int64_t)1);
if ((i1132 ==  (int64_t)14)) {
i1132 =  (int64_t)0;
i1131 = (i1131 +  (int64_t)1);
if ((i1131 ==  (int64_t)14)) {
i1131 =  (int64_t)0;
i1130 = (i1130 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp606);

uint64_t* tmp610 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);

int64_t i1145;

int64_t i1144;

int64_t i1143;

int64_t i1142;

int64_t i1141;

int64_t i1140;

int64_t i1139;

int64_t i1138;
i1138 =  (int64_t)0;
i1139 =  (int64_t)0;
i1140 =  (int64_t)0;
i1141 =  (int64_t)0;
for (uint32_t i1142 =  (int32_t)0; i1142 <  (int32_t)1; i1142++){
for (uint32_t i1145 =  (int32_t)0; i1145 <  (int32_t)480; i1145++){
for (uint32_t i1143 =  (int32_t)0; i1143 <  (int32_t)14; i1143++){
for (uint32_t i1144 =  (int32_t)0; i1144 <  (int32_t)14; i1144++){
Arr4DIdxRowM(tmp610, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i1142,i1143,i1144,i1145) = Arr4DIdxRowM(tmp608, (int32_t)1, (int32_t)480, (int32_t)14, (int32_t)14,i1138,i1139,i1140,i1141);
i1141 = (i1141 +  (int64_t)1);
if ((i1141 ==  (int64_t)14)) {
i1141 =  (int64_t)0;
i1140 = (i1140 +  (int64_t)1);
if ((i1140 ==  (int64_t)14)) {
i1140 =  (int64_t)0;
i1139 = (i1139 +  (int64_t)1);
if ((i1139 ==  (int64_t)480)) {
i1139 =  (int64_t)0;
i1138 = (i1138 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)480,  (int32_t)14,  (int32_t)14, tmp608);

uint64_t* tmp612 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)480,  (int32_t)80);

int64_t i1153;

int64_t i1152;

int64_t i1151;

int64_t i1150;

int64_t i1149;

int64_t i1148;

int64_t i1147;

int64_t i1146;
i1146 =  (int64_t)0;
i1147 =  (int64_t)0;
i1148 =  (int64_t)0;
i1149 =  (int64_t)0;
for (uint32_t i1153 =  (int32_t)0; i1153 <  (int32_t)80; i1153++){
for (uint32_t i1152 =  (int32_t)0; i1152 <  (int32_t)480; i1152++){
for (uint32_t i1150 =  (int32_t)0; i1150 <  (int32_t)1; i1150++){
for (uint32_t i1151 =  (int32_t)0; i1151 <  (int32_t)1; i1151++){
Arr4DIdxRowM(tmp612, (int32_t)1, (int32_t)1, (int32_t)480, (int32_t)80,i1150,i1151,i1152,i1153) = Arr4DIdxRowM(tmp55, (int32_t)80, (int32_t)480, (int32_t)1, (int32_t)1,i1146,i1147,i1148,i1149);
i1149 = (i1149 +  (int64_t)1);
if ((i1149 ==  (int64_t)1)) {
i1149 =  (int64_t)0;
i1148 = (i1148 +  (int64_t)1);
if ((i1148 ==  (int64_t)1)) {
i1148 =  (int64_t)0;
i1147 = (i1147 +  (int64_t)1);
if ((i1147 ==  (int64_t)480)) {
i1147 =  (int64_t)0;
i1146 = (i1146 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)80,  (int32_t)480,  (int32_t)1,  (int32_t)1, tmp55);

uint64_t* tmp614 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480,  (int32_t)1,  (int32_t)1,  (int32_t)80,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp610, tmp612, tmp614);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)480,  (int32_t)80, tmp612);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp610);

uint64_t* tmp617 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)80);

int64_t i1158;

int64_t i1157;

int64_t i1156;

int64_t i1155;

int64_t i1154;
i1154 =  (int64_t)0;
for (uint32_t i1155 =  (int32_t)0; i1155 <  (int32_t)1; i1155++){
for (uint32_t i1156 =  (int32_t)0; i1156 <  (int32_t)1; i1156++){
for (uint32_t i1157 =  (int32_t)0; i1157 <  (int32_t)1; i1157++){
for (uint32_t i1158 =  (int32_t)0; i1158 <  (int32_t)80; i1158++){
Arr4DIdxRowM(tmp617, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)80,i1155,i1156,i1157,i1158) = Arr1DIdxRowM(tmp56, (int32_t)80,i1154);
i1154 = (i1154 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)80, tmp56);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)80, tmp617,  kScale);

uint64_t* tmp619 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)14; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)14; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)80; i3++){
Arr4DIdxRowM(tmp619, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)80,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp614, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)80,i0,i1,i2,i3), Arr4DIdxRowM(tmp617, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)80,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80, tmp614);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)80, tmp617);

uint64_t* tmp622 = make_array<uint64_t>( (int32_t)1,  (int32_t)80,  (int32_t)14,  (int32_t)14);

int64_t i1166;

int64_t i1165;

int64_t i1164;

int64_t i1163;

int64_t i1162;

int64_t i1161;

int64_t i1160;

int64_t i1159;
i1159 =  (int64_t)0;
i1160 =  (int64_t)0;
i1161 =  (int64_t)0;
i1162 =  (int64_t)0;
for (uint32_t i1163 =  (int32_t)0; i1163 <  (int32_t)1; i1163++){
for (uint32_t i1165 =  (int32_t)0; i1165 <  (int32_t)14; i1165++){
for (uint32_t i1166 =  (int32_t)0; i1166 <  (int32_t)14; i1166++){
for (uint32_t i1164 =  (int32_t)0; i1164 <  (int32_t)80; i1164++){
Arr4DIdxRowM(tmp622, (int32_t)1, (int32_t)80, (int32_t)14, (int32_t)14,i1163,i1164,i1165,i1166) = Arr4DIdxRowM(tmp619, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)80,i1159,i1160,i1161,i1162);
i1162 = (i1162 +  (int64_t)1);
if ((i1162 ==  (int64_t)80)) {
i1162 =  (int64_t)0;
i1161 = (i1161 +  (int64_t)1);
if ((i1161 ==  (int64_t)14)) {
i1161 =  (int64_t)0;
i1160 = (i1160 +  (int64_t)1);
if ((i1160 ==  (int64_t)14)) {
i1160 =  (int64_t)0;
i1159 = (i1159 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80, tmp619);

uint64_t* tmp624 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80);

int64_t i1174;

int64_t i1173;

int64_t i1172;

int64_t i1171;

int64_t i1170;

int64_t i1169;

int64_t i1168;

int64_t i1167;
i1167 =  (int64_t)0;
i1168 =  (int64_t)0;
i1169 =  (int64_t)0;
i1170 =  (int64_t)0;
for (uint32_t i1171 =  (int32_t)0; i1171 <  (int32_t)1; i1171++){
for (uint32_t i1174 =  (int32_t)0; i1174 <  (int32_t)80; i1174++){
for (uint32_t i1172 =  (int32_t)0; i1172 <  (int32_t)14; i1172++){
for (uint32_t i1173 =  (int32_t)0; i1173 <  (int32_t)14; i1173++){
Arr4DIdxRowM(tmp624, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)80,i1171,i1172,i1173,i1174) = Arr4DIdxRowM(tmp622, (int32_t)1, (int32_t)80, (int32_t)14, (int32_t)14,i1167,i1168,i1169,i1170);
i1170 = (i1170 +  (int64_t)1);
if ((i1170 ==  (int64_t)14)) {
i1170 =  (int64_t)0;
i1169 = (i1169 +  (int64_t)1);
if ((i1169 ==  (int64_t)14)) {
i1169 =  (int64_t)0;
i1168 = (i1168 +  (int64_t)1);
if ((i1168 ==  (int64_t)80)) {
i1168 =  (int64_t)0;
i1167 = (i1167 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)80,  (int32_t)14,  (int32_t)14, tmp622);

uint64_t* tmp626 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80);

int64_t i1182;

int64_t i1181;

int64_t i1180;

int64_t i1179;

int64_t i1178;

int64_t i1177;

int64_t i1176;

int64_t i1175;
i1175 =  (int64_t)0;
i1176 =  (int64_t)0;
i1177 =  (int64_t)0;
i1178 =  (int64_t)0;
for (uint32_t i1179 =  (int32_t)0; i1179 <  (int32_t)1; i1179++){
for (uint32_t i1182 =  (int32_t)0; i1182 <  (int32_t)80; i1182++){
for (uint32_t i1180 =  (int32_t)0; i1180 <  (int32_t)14; i1180++){
for (uint32_t i1181 =  (int32_t)0; i1181 <  (int32_t)14; i1181++){
Arr4DIdxRowM(tmp626, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)80,i1179,i1180,i1181,i1182) = Arr4DIdxRowM(tmp569, (int32_t)1, (int32_t)80, (int32_t)14, (int32_t)14,i1175,i1176,i1177,i1178);
i1178 = (i1178 +  (int64_t)1);
if ((i1178 ==  (int64_t)14)) {
i1178 =  (int64_t)0;
i1177 = (i1177 +  (int64_t)1);
if ((i1177 ==  (int64_t)14)) {
i1177 =  (int64_t)0;
i1176 = (i1176 +  (int64_t)1);
if ((i1176 ==  (int64_t)80)) {
i1176 =  (int64_t)0;
i1175 = (i1175 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)80,  (int32_t)14,  (int32_t)14, tmp569);

uint64_t* tmp628 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)14; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)14; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)80; i3++){
Arr4DIdxRowM(tmp628, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)80,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp624, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)80,i0,i1,i2,i3), Arr4DIdxRowM(tmp626, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)80,i0,i1,i2,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80, tmp624);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80, tmp626);

uint64_t* tmp631 = make_array<uint64_t>( (int32_t)1,  (int32_t)80,  (int32_t)14,  (int32_t)14);

int64_t i1190;

int64_t i1189;

int64_t i1188;

int64_t i1187;

int64_t i1186;

int64_t i1185;

int64_t i1184;

int64_t i1183;
i1183 =  (int64_t)0;
i1184 =  (int64_t)0;
i1185 =  (int64_t)0;
i1186 =  (int64_t)0;
for (uint32_t i1187 =  (int32_t)0; i1187 <  (int32_t)1; i1187++){
for (uint32_t i1189 =  (int32_t)0; i1189 <  (int32_t)14; i1189++){
for (uint32_t i1190 =  (int32_t)0; i1190 <  (int32_t)14; i1190++){
for (uint32_t i1188 =  (int32_t)0; i1188 <  (int32_t)80; i1188++){
Arr4DIdxRowM(tmp631, (int32_t)1, (int32_t)80, (int32_t)14, (int32_t)14,i1187,i1188,i1189,i1190) = Arr4DIdxRowM(tmp628, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)80,i1183,i1184,i1185,i1186);
i1186 = (i1186 +  (int64_t)1);
if ((i1186 ==  (int64_t)80)) {
i1186 =  (int64_t)0;
i1185 = (i1185 +  (int64_t)1);
if ((i1185 ==  (int64_t)14)) {
i1185 =  (int64_t)0;
i1184 = (i1184 +  (int64_t)1);
if ((i1184 ==  (int64_t)14)) {
i1184 =  (int64_t)0;
i1183 = (i1183 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80, tmp628);

uint64_t* tmp633 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80);

int64_t i1198;

int64_t i1197;

int64_t i1196;

int64_t i1195;

int64_t i1194;

int64_t i1193;

int64_t i1192;

int64_t i1191;
i1191 =  (int64_t)0;
i1192 =  (int64_t)0;
i1193 =  (int64_t)0;
i1194 =  (int64_t)0;
for (uint32_t i1195 =  (int32_t)0; i1195 <  (int32_t)1; i1195++){
for (uint32_t i1198 =  (int32_t)0; i1198 <  (int32_t)80; i1198++){
for (uint32_t i1196 =  (int32_t)0; i1196 <  (int32_t)14; i1196++){
for (uint32_t i1197 =  (int32_t)0; i1197 <  (int32_t)14; i1197++){
Arr4DIdxRowM(tmp633, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)80,i1195,i1196,i1197,i1198) = Arr4DIdxRowM(tmp631, (int32_t)1, (int32_t)80, (int32_t)14, (int32_t)14,i1191,i1192,i1193,i1194);
i1194 = (i1194 +  (int64_t)1);
if ((i1194 ==  (int64_t)14)) {
i1194 =  (int64_t)0;
i1193 = (i1193 +  (int64_t)1);
if ((i1193 ==  (int64_t)14)) {
i1193 =  (int64_t)0;
i1192 = (i1192 +  (int64_t)1);
if ((i1192 ==  (int64_t)80)) {
i1192 =  (int64_t)0;
i1191 = (i1191 +  (int64_t)1);
}
}
}
}
}
}
}

uint64_t* tmp634 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)80,  (int32_t)480);

int64_t i1206;

int64_t i1205;

int64_t i1204;

int64_t i1203;

int64_t i1202;

int64_t i1201;

int64_t i1200;

int64_t i1199;
i1199 =  (int64_t)0;
i1200 =  (int64_t)0;
i1201 =  (int64_t)0;
i1202 =  (int64_t)0;
for (uint32_t i1206 =  (int32_t)0; i1206 <  (int32_t)480; i1206++){
for (uint32_t i1205 =  (int32_t)0; i1205 <  (int32_t)80; i1205++){
for (uint32_t i1203 =  (int32_t)0; i1203 <  (int32_t)1; i1203++){
for (uint32_t i1204 =  (int32_t)0; i1204 <  (int32_t)1; i1204++){
Arr4DIdxRowM(tmp634, (int32_t)1, (int32_t)1, (int32_t)80, (int32_t)480,i1203,i1204,i1205,i1206) = Arr4DIdxRowM(tmp57, (int32_t)480, (int32_t)80, (int32_t)1, (int32_t)1,i1199,i1200,i1201,i1202);
i1202 = (i1202 +  (int64_t)1);
if ((i1202 ==  (int64_t)1)) {
i1202 =  (int64_t)0;
i1201 = (i1201 +  (int64_t)1);
if ((i1201 ==  (int64_t)1)) {
i1201 =  (int64_t)0;
i1200 = (i1200 +  (int64_t)1);
if ((i1200 ==  (int64_t)80)) {
i1200 =  (int64_t)0;
i1199 = (i1199 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)480,  (int32_t)80,  (int32_t)1,  (int32_t)1, tmp57);

uint64_t* tmp636 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80, tmp633,  kScale);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80,  (int32_t)1,  (int32_t)1,  (int32_t)480,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp633, tmp634, tmp636);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80, tmp633);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)80,  (int32_t)480, tmp634);

uint64_t* tmp639 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)480);

int64_t i1211;

int64_t i1210;

int64_t i1209;

int64_t i1208;

int64_t i1207;
i1207 =  (int64_t)0;
for (uint32_t i1208 =  (int32_t)0; i1208 <  (int32_t)1; i1208++){
for (uint32_t i1209 =  (int32_t)0; i1209 <  (int32_t)1; i1209++){
for (uint32_t i1210 =  (int32_t)0; i1210 <  (int32_t)1; i1210++){
for (uint32_t i1211 =  (int32_t)0; i1211 <  (int32_t)480; i1211++){
Arr4DIdxRowM(tmp639, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)480,i1208,i1209,i1210,i1211) = Arr1DIdxRowM(tmp58, (int32_t)480,i1207);
i1207 = (i1207 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)480, tmp58);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)480, tmp639,  kScale);

uint64_t* tmp641 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)14; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)14; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)480; i3++){
Arr4DIdxRowM(tmp641, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp636, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i0,i1,i2,i3), Arr4DIdxRowM(tmp639, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)480,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp636);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)480, tmp639);

uint64_t* tmp644 = make_array<uint64_t>( (int32_t)1,  (int32_t)480,  (int32_t)14,  (int32_t)14);

int64_t i1219;

int64_t i1218;

int64_t i1217;

int64_t i1216;

int64_t i1215;

int64_t i1214;

int64_t i1213;

int64_t i1212;
i1212 =  (int64_t)0;
i1213 =  (int64_t)0;
i1214 =  (int64_t)0;
i1215 =  (int64_t)0;
for (uint32_t i1216 =  (int32_t)0; i1216 <  (int32_t)1; i1216++){
for (uint32_t i1218 =  (int32_t)0; i1218 <  (int32_t)14; i1218++){
for (uint32_t i1219 =  (int32_t)0; i1219 <  (int32_t)14; i1219++){
for (uint32_t i1217 =  (int32_t)0; i1217 <  (int32_t)480; i1217++){
Arr4DIdxRowM(tmp644, (int32_t)1, (int32_t)480, (int32_t)14, (int32_t)14,i1216,i1217,i1218,i1219) = Arr4DIdxRowM(tmp641, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i1212,i1213,i1214,i1215);
i1215 = (i1215 +  (int64_t)1);
if ((i1215 ==  (int64_t)480)) {
i1215 =  (int64_t)0;
i1214 = (i1214 +  (int64_t)1);
if ((i1214 ==  (int64_t)14)) {
i1214 =  (int64_t)0;
i1213 = (i1213 +  (int64_t)1);
if ((i1213 ==  (int64_t)14)) {
i1213 =  (int64_t)0;
i1212 = (i1212 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp641);

uint64_t* tmp646 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);

int64_t i1227;

int64_t i1226;

int64_t i1225;

int64_t i1224;

int64_t i1223;

int64_t i1222;

int64_t i1221;

int64_t i1220;
i1220 =  (int64_t)0;
i1221 =  (int64_t)0;
i1222 =  (int64_t)0;
i1223 =  (int64_t)0;
for (uint32_t i1224 =  (int32_t)0; i1224 <  (int32_t)1; i1224++){
for (uint32_t i1227 =  (int32_t)0; i1227 <  (int32_t)480; i1227++){
for (uint32_t i1225 =  (int32_t)0; i1225 <  (int32_t)14; i1225++){
for (uint32_t i1226 =  (int32_t)0; i1226 <  (int32_t)14; i1226++){
Arr4DIdxRowM(tmp646, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i1224,i1225,i1226,i1227) = Arr4DIdxRowM(tmp644, (int32_t)1, (int32_t)480, (int32_t)14, (int32_t)14,i1220,i1221,i1222,i1223);
i1223 = (i1223 +  (int64_t)1);
if ((i1223 ==  (int64_t)14)) {
i1223 =  (int64_t)0;
i1222 = (i1222 +  (int64_t)1);
if ((i1222 ==  (int64_t)14)) {
i1222 =  (int64_t)0;
i1221 = (i1221 +  (int64_t)1);
if ((i1221 ==  (int64_t)480)) {
i1221 =  (int64_t)0;
i1220 = (i1220 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)480,  (int32_t)14,  (int32_t)14, tmp644);

uint64_t* tmp648 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp646, tmp648,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp646);

uint64_t* tmp650 = make_array<uint64_t>( (int32_t)1,  (int32_t)480,  (int32_t)14,  (int32_t)14);

int64_t i1235;

int64_t i1234;

int64_t i1233;

int64_t i1232;

int64_t i1231;

int64_t i1230;

int64_t i1229;

int64_t i1228;
i1228 =  (int64_t)0;
i1229 =  (int64_t)0;
i1230 =  (int64_t)0;
i1231 =  (int64_t)0;
for (uint32_t i1232 =  (int32_t)0; i1232 <  (int32_t)1; i1232++){
for (uint32_t i1234 =  (int32_t)0; i1234 <  (int32_t)14; i1234++){
for (uint32_t i1235 =  (int32_t)0; i1235 <  (int32_t)14; i1235++){
for (uint32_t i1233 =  (int32_t)0; i1233 <  (int32_t)480; i1233++){
Arr4DIdxRowM(tmp650, (int32_t)1, (int32_t)480, (int32_t)14, (int32_t)14,i1232,i1233,i1234,i1235) = Arr4DIdxRowM(tmp648, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i1228,i1229,i1230,i1231);
i1231 = (i1231 +  (int64_t)1);
if ((i1231 ==  (int64_t)480)) {
i1231 =  (int64_t)0;
i1230 = (i1230 +  (int64_t)1);
if ((i1230 ==  (int64_t)14)) {
i1230 =  (int64_t)0;
i1229 = (i1229 +  (int64_t)1);
if ((i1229 ==  (int64_t)14)) {
i1229 =  (int64_t)0;
i1228 = (i1228 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp648);

uint64_t* tmp652 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);

int64_t i1243;

int64_t i1242;

int64_t i1241;

int64_t i1240;

int64_t i1239;

int64_t i1238;

int64_t i1237;

int64_t i1236;
i1236 =  (int64_t)0;
i1237 =  (int64_t)0;
i1238 =  (int64_t)0;
i1239 =  (int64_t)0;
for (uint32_t i1240 =  (int32_t)0; i1240 <  (int32_t)1; i1240++){
for (uint32_t i1243 =  (int32_t)0; i1243 <  (int32_t)480; i1243++){
for (uint32_t i1241 =  (int32_t)0; i1241 <  (int32_t)14; i1241++){
for (uint32_t i1242 =  (int32_t)0; i1242 <  (int32_t)14; i1242++){
Arr4DIdxRowM(tmp652, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i1240,i1241,i1242,i1243) = Arr4DIdxRowM(tmp650, (int32_t)1, (int32_t)480, (int32_t)14, (int32_t)14,i1236,i1237,i1238,i1239);
i1239 = (i1239 +  (int64_t)1);
if ((i1239 ==  (int64_t)14)) {
i1239 =  (int64_t)0;
i1238 = (i1238 +  (int64_t)1);
if ((i1238 ==  (int64_t)14)) {
i1238 =  (int64_t)0;
i1237 = (i1237 +  (int64_t)1);
if ((i1237 ==  (int64_t)480)) {
i1237 =  (int64_t)0;
i1236 = (i1236 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)480,  (int32_t)14,  (int32_t)14, tmp650);

uint64_t* tmp654 = make_array<uint64_t>( (int32_t)5,  (int32_t)5,  (int32_t)1,  (int32_t)480);

int64_t i1251;

int64_t i1250;

int64_t i1249;

int64_t i1248;

int64_t i1247;

int64_t i1246;

int64_t i1245;

int64_t i1244;
i1244 =  (int64_t)0;
i1245 =  (int64_t)0;
i1246 =  (int64_t)0;
i1247 =  (int64_t)0;
for (uint32_t i1251 =  (int32_t)0; i1251 <  (int32_t)480; i1251++){
for (uint32_t i1250 =  (int32_t)0; i1250 <  (int32_t)1; i1250++){
for (uint32_t i1248 =  (int32_t)0; i1248 <  (int32_t)5; i1248++){
for (uint32_t i1249 =  (int32_t)0; i1249 <  (int32_t)5; i1249++){
Arr4DIdxRowM(tmp654, (int32_t)5, (int32_t)5, (int32_t)1, (int32_t)480,i1248,i1249,i1250,i1251) = Arr4DIdxRowM(tmp59, (int32_t)480, (int32_t)1, (int32_t)5, (int32_t)5,i1244,i1245,i1246,i1247);
i1247 = (i1247 +  (int64_t)1);
if ((i1247 ==  (int64_t)5)) {
i1247 =  (int64_t)0;
i1246 = (i1246 +  (int64_t)1);
if ((i1246 ==  (int64_t)5)) {
i1246 =  (int64_t)0;
i1245 = (i1245 +  (int64_t)1);
if ((i1245 ==  (int64_t)1)) {
i1245 =  (int64_t)0;
i1244 = (i1244 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)480,  (int32_t)1,  (int32_t)5,  (int32_t)5, tmp59);

uint64_t* tmp656 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480,  (int32_t)5,  (int32_t)5,  (int32_t)480,  (int32_t)2,  (int32_t)2,  (int32_t)2,  (int32_t)2,  (int32_t)1,  (int32_t)1,  (int32_t)480, tmp652, tmp654, tmp656);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp652);
ClearMemSecret4( (int32_t)5,  (int32_t)5,  (int32_t)1,  (int32_t)480, tmp654);

uint64_t* tmp659 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)480);

int64_t i1256;

int64_t i1255;

int64_t i1254;

int64_t i1253;

int64_t i1252;
i1252 =  (int64_t)0;
for (uint32_t i1253 =  (int32_t)0; i1253 <  (int32_t)1; i1253++){
for (uint32_t i1254 =  (int32_t)0; i1254 <  (int32_t)1; i1254++){
for (uint32_t i1255 =  (int32_t)0; i1255 <  (int32_t)1; i1255++){
for (uint32_t i1256 =  (int32_t)0; i1256 <  (int32_t)480; i1256++){
Arr4DIdxRowM(tmp659, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)480,i1253,i1254,i1255,i1256) = Arr1DIdxRowM(tmp60, (int32_t)480,i1252);
i1252 = (i1252 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)480, tmp60);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)480, tmp659,  kScale);

uint64_t* tmp661 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)14; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)14; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)480; i3++){
Arr4DIdxRowM(tmp661, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp656, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i0,i1,i2,i3), Arr4DIdxRowM(tmp659, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)480,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp656);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)480, tmp659);

uint64_t* tmp664 = make_array<uint64_t>( (int32_t)1,  (int32_t)480,  (int32_t)14,  (int32_t)14);

int64_t i1264;

int64_t i1263;

int64_t i1262;

int64_t i1261;

int64_t i1260;

int64_t i1259;

int64_t i1258;

int64_t i1257;
i1257 =  (int64_t)0;
i1258 =  (int64_t)0;
i1259 =  (int64_t)0;
i1260 =  (int64_t)0;
for (uint32_t i1261 =  (int32_t)0; i1261 <  (int32_t)1; i1261++){
for (uint32_t i1263 =  (int32_t)0; i1263 <  (int32_t)14; i1263++){
for (uint32_t i1264 =  (int32_t)0; i1264 <  (int32_t)14; i1264++){
for (uint32_t i1262 =  (int32_t)0; i1262 <  (int32_t)480; i1262++){
Arr4DIdxRowM(tmp664, (int32_t)1, (int32_t)480, (int32_t)14, (int32_t)14,i1261,i1262,i1263,i1264) = Arr4DIdxRowM(tmp661, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i1257,i1258,i1259,i1260);
i1260 = (i1260 +  (int64_t)1);
if ((i1260 ==  (int64_t)480)) {
i1260 =  (int64_t)0;
i1259 = (i1259 +  (int64_t)1);
if ((i1259 ==  (int64_t)14)) {
i1259 =  (int64_t)0;
i1258 = (i1258 +  (int64_t)1);
if ((i1258 ==  (int64_t)14)) {
i1258 =  (int64_t)0;
i1257 = (i1257 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp661);

uint64_t* tmp666 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);

int64_t i1272;

int64_t i1271;

int64_t i1270;

int64_t i1269;

int64_t i1268;

int64_t i1267;

int64_t i1266;

int64_t i1265;
i1265 =  (int64_t)0;
i1266 =  (int64_t)0;
i1267 =  (int64_t)0;
i1268 =  (int64_t)0;
for (uint32_t i1269 =  (int32_t)0; i1269 <  (int32_t)1; i1269++){
for (uint32_t i1272 =  (int32_t)0; i1272 <  (int32_t)480; i1272++){
for (uint32_t i1270 =  (int32_t)0; i1270 <  (int32_t)14; i1270++){
for (uint32_t i1271 =  (int32_t)0; i1271 <  (int32_t)14; i1271++){
Arr4DIdxRowM(tmp666, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i1269,i1270,i1271,i1272) = Arr4DIdxRowM(tmp664, (int32_t)1, (int32_t)480, (int32_t)14, (int32_t)14,i1265,i1266,i1267,i1268);
i1268 = (i1268 +  (int64_t)1);
if ((i1268 ==  (int64_t)14)) {
i1268 =  (int64_t)0;
i1267 = (i1267 +  (int64_t)1);
if ((i1267 ==  (int64_t)14)) {
i1267 =  (int64_t)0;
i1266 = (i1266 +  (int64_t)1);
if ((i1266 ==  (int64_t)480)) {
i1266 =  (int64_t)0;
i1265 = (i1265 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)480,  (int32_t)14,  (int32_t)14, tmp664);

uint64_t* tmp668 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp666, tmp668,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp666);

uint64_t* tmp670 = make_array<uint64_t>( (int32_t)1,  (int32_t)480,  (int32_t)14,  (int32_t)14);

int64_t i1280;

int64_t i1279;

int64_t i1278;

int64_t i1277;

int64_t i1276;

int64_t i1275;

int64_t i1274;

int64_t i1273;
i1273 =  (int64_t)0;
i1274 =  (int64_t)0;
i1275 =  (int64_t)0;
i1276 =  (int64_t)0;
for (uint32_t i1277 =  (int32_t)0; i1277 <  (int32_t)1; i1277++){
for (uint32_t i1279 =  (int32_t)0; i1279 <  (int32_t)14; i1279++){
for (uint32_t i1280 =  (int32_t)0; i1280 <  (int32_t)14; i1280++){
for (uint32_t i1278 =  (int32_t)0; i1278 <  (int32_t)480; i1278++){
Arr4DIdxRowM(tmp670, (int32_t)1, (int32_t)480, (int32_t)14, (int32_t)14,i1277,i1278,i1279,i1280) = Arr4DIdxRowM(tmp668, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i1273,i1274,i1275,i1276);
i1276 = (i1276 +  (int64_t)1);
if ((i1276 ==  (int64_t)480)) {
i1276 =  (int64_t)0;
i1275 = (i1275 +  (int64_t)1);
if ((i1275 ==  (int64_t)14)) {
i1275 =  (int64_t)0;
i1274 = (i1274 +  (int64_t)1);
if ((i1274 ==  (int64_t)14)) {
i1274 =  (int64_t)0;
i1273 = (i1273 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp668);

uint64_t* tmp672 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);

int64_t i1288;

int64_t i1287;

int64_t i1286;

int64_t i1285;

int64_t i1284;

int64_t i1283;

int64_t i1282;

int64_t i1281;
i1281 =  (int64_t)0;
i1282 =  (int64_t)0;
i1283 =  (int64_t)0;
i1284 =  (int64_t)0;
for (uint32_t i1285 =  (int32_t)0; i1285 <  (int32_t)1; i1285++){
for (uint32_t i1288 =  (int32_t)0; i1288 <  (int32_t)480; i1288++){
for (uint32_t i1286 =  (int32_t)0; i1286 <  (int32_t)14; i1286++){
for (uint32_t i1287 =  (int32_t)0; i1287 <  (int32_t)14; i1287++){
Arr4DIdxRowM(tmp672, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i1285,i1286,i1287,i1288) = Arr4DIdxRowM(tmp670, (int32_t)1, (int32_t)480, (int32_t)14, (int32_t)14,i1281,i1282,i1283,i1284);
i1284 = (i1284 +  (int64_t)1);
if ((i1284 ==  (int64_t)14)) {
i1284 =  (int64_t)0;
i1283 = (i1283 +  (int64_t)1);
if ((i1283 ==  (int64_t)14)) {
i1283 =  (int64_t)0;
i1282 = (i1282 +  (int64_t)1);
if ((i1282 ==  (int64_t)480)) {
i1282 =  (int64_t)0;
i1281 = (i1281 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)480,  (int32_t)14,  (int32_t)14, tmp670);

uint64_t* tmp674 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)480,  (int32_t)80);

int64_t i1296;

int64_t i1295;

int64_t i1294;

int64_t i1293;

int64_t i1292;

int64_t i1291;

int64_t i1290;

int64_t i1289;
i1289 =  (int64_t)0;
i1290 =  (int64_t)0;
i1291 =  (int64_t)0;
i1292 =  (int64_t)0;
for (uint32_t i1296 =  (int32_t)0; i1296 <  (int32_t)80; i1296++){
for (uint32_t i1295 =  (int32_t)0; i1295 <  (int32_t)480; i1295++){
for (uint32_t i1293 =  (int32_t)0; i1293 <  (int32_t)1; i1293++){
for (uint32_t i1294 =  (int32_t)0; i1294 <  (int32_t)1; i1294++){
Arr4DIdxRowM(tmp674, (int32_t)1, (int32_t)1, (int32_t)480, (int32_t)80,i1293,i1294,i1295,i1296) = Arr4DIdxRowM(tmp61, (int32_t)80, (int32_t)480, (int32_t)1, (int32_t)1,i1289,i1290,i1291,i1292);
i1292 = (i1292 +  (int64_t)1);
if ((i1292 ==  (int64_t)1)) {
i1292 =  (int64_t)0;
i1291 = (i1291 +  (int64_t)1);
if ((i1291 ==  (int64_t)1)) {
i1291 =  (int64_t)0;
i1290 = (i1290 +  (int64_t)1);
if ((i1290 ==  (int64_t)480)) {
i1290 =  (int64_t)0;
i1289 = (i1289 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)80,  (int32_t)480,  (int32_t)1,  (int32_t)1, tmp61);

uint64_t* tmp676 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480,  (int32_t)1,  (int32_t)1,  (int32_t)80,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp672, tmp674, tmp676);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)480,  (int32_t)80, tmp674);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp672);

uint64_t* tmp679 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)80);

int64_t i1301;

int64_t i1300;

int64_t i1299;

int64_t i1298;

int64_t i1297;
i1297 =  (int64_t)0;
for (uint32_t i1298 =  (int32_t)0; i1298 <  (int32_t)1; i1298++){
for (uint32_t i1299 =  (int32_t)0; i1299 <  (int32_t)1; i1299++){
for (uint32_t i1300 =  (int32_t)0; i1300 <  (int32_t)1; i1300++){
for (uint32_t i1301 =  (int32_t)0; i1301 <  (int32_t)80; i1301++){
Arr4DIdxRowM(tmp679, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)80,i1298,i1299,i1300,i1301) = Arr1DIdxRowM(tmp62, (int32_t)80,i1297);
i1297 = (i1297 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)80, tmp62);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)80, tmp679,  kScale);

uint64_t* tmp681 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)14; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)14; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)80; i3++){
Arr4DIdxRowM(tmp681, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)80,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp676, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)80,i0,i1,i2,i3), Arr4DIdxRowM(tmp679, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)80,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)80, tmp679);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80, tmp676);

uint64_t* tmp684 = make_array<uint64_t>( (int32_t)1,  (int32_t)80,  (int32_t)14,  (int32_t)14);

int64_t i1309;

int64_t i1308;

int64_t i1307;

int64_t i1306;

int64_t i1305;

int64_t i1304;

int64_t i1303;

int64_t i1302;
i1302 =  (int64_t)0;
i1303 =  (int64_t)0;
i1304 =  (int64_t)0;
i1305 =  (int64_t)0;
for (uint32_t i1306 =  (int32_t)0; i1306 <  (int32_t)1; i1306++){
for (uint32_t i1308 =  (int32_t)0; i1308 <  (int32_t)14; i1308++){
for (uint32_t i1309 =  (int32_t)0; i1309 <  (int32_t)14; i1309++){
for (uint32_t i1307 =  (int32_t)0; i1307 <  (int32_t)80; i1307++){
Arr4DIdxRowM(tmp684, (int32_t)1, (int32_t)80, (int32_t)14, (int32_t)14,i1306,i1307,i1308,i1309) = Arr4DIdxRowM(tmp681, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)80,i1302,i1303,i1304,i1305);
i1305 = (i1305 +  (int64_t)1);
if ((i1305 ==  (int64_t)80)) {
i1305 =  (int64_t)0;
i1304 = (i1304 +  (int64_t)1);
if ((i1304 ==  (int64_t)14)) {
i1304 =  (int64_t)0;
i1303 = (i1303 +  (int64_t)1);
if ((i1303 ==  (int64_t)14)) {
i1303 =  (int64_t)0;
i1302 = (i1302 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80, tmp681);

uint64_t* tmp686 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80);

int64_t i1317;

int64_t i1316;

int64_t i1315;

int64_t i1314;

int64_t i1313;

int64_t i1312;

int64_t i1311;

int64_t i1310;
i1310 =  (int64_t)0;
i1311 =  (int64_t)0;
i1312 =  (int64_t)0;
i1313 =  (int64_t)0;
for (uint32_t i1314 =  (int32_t)0; i1314 <  (int32_t)1; i1314++){
for (uint32_t i1317 =  (int32_t)0; i1317 <  (int32_t)80; i1317++){
for (uint32_t i1315 =  (int32_t)0; i1315 <  (int32_t)14; i1315++){
for (uint32_t i1316 =  (int32_t)0; i1316 <  (int32_t)14; i1316++){
Arr4DIdxRowM(tmp686, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)80,i1314,i1315,i1316,i1317) = Arr4DIdxRowM(tmp684, (int32_t)1, (int32_t)80, (int32_t)14, (int32_t)14,i1310,i1311,i1312,i1313);
i1313 = (i1313 +  (int64_t)1);
if ((i1313 ==  (int64_t)14)) {
i1313 =  (int64_t)0;
i1312 = (i1312 +  (int64_t)1);
if ((i1312 ==  (int64_t)14)) {
i1312 =  (int64_t)0;
i1311 = (i1311 +  (int64_t)1);
if ((i1311 ==  (int64_t)80)) {
i1311 =  (int64_t)0;
i1310 = (i1310 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)80,  (int32_t)14,  (int32_t)14, tmp684);

uint64_t* tmp688 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80);

int64_t i1325;

int64_t i1324;

int64_t i1323;

int64_t i1322;

int64_t i1321;

int64_t i1320;

int64_t i1319;

int64_t i1318;
i1318 =  (int64_t)0;
i1319 =  (int64_t)0;
i1320 =  (int64_t)0;
i1321 =  (int64_t)0;
for (uint32_t i1322 =  (int32_t)0; i1322 <  (int32_t)1; i1322++){
for (uint32_t i1325 =  (int32_t)0; i1325 <  (int32_t)80; i1325++){
for (uint32_t i1323 =  (int32_t)0; i1323 <  (int32_t)14; i1323++){
for (uint32_t i1324 =  (int32_t)0; i1324 <  (int32_t)14; i1324++){
Arr4DIdxRowM(tmp688, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)80,i1322,i1323,i1324,i1325) = Arr4DIdxRowM(tmp631, (int32_t)1, (int32_t)80, (int32_t)14, (int32_t)14,i1318,i1319,i1320,i1321);
i1321 = (i1321 +  (int64_t)1);
if ((i1321 ==  (int64_t)14)) {
i1321 =  (int64_t)0;
i1320 = (i1320 +  (int64_t)1);
if ((i1320 ==  (int64_t)14)) {
i1320 =  (int64_t)0;
i1319 = (i1319 +  (int64_t)1);
if ((i1319 ==  (int64_t)80)) {
i1319 =  (int64_t)0;
i1318 = (i1318 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)80,  (int32_t)14,  (int32_t)14, tmp631);

uint64_t* tmp690 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)14; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)14; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)80; i3++){
Arr4DIdxRowM(tmp690, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)80,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp686, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)80,i0,i1,i2,i3), Arr4DIdxRowM(tmp688, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)80,i0,i1,i2,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80, tmp686);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80, tmp688);

uint64_t* tmp693 = make_array<uint64_t>( (int32_t)1,  (int32_t)80,  (int32_t)14,  (int32_t)14);

int64_t i1333;

int64_t i1332;

int64_t i1331;

int64_t i1330;

int64_t i1329;

int64_t i1328;

int64_t i1327;

int64_t i1326;
i1326 =  (int64_t)0;
i1327 =  (int64_t)0;
i1328 =  (int64_t)0;
i1329 =  (int64_t)0;
for (uint32_t i1330 =  (int32_t)0; i1330 <  (int32_t)1; i1330++){
for (uint32_t i1332 =  (int32_t)0; i1332 <  (int32_t)14; i1332++){
for (uint32_t i1333 =  (int32_t)0; i1333 <  (int32_t)14; i1333++){
for (uint32_t i1331 =  (int32_t)0; i1331 <  (int32_t)80; i1331++){
Arr4DIdxRowM(tmp693, (int32_t)1, (int32_t)80, (int32_t)14, (int32_t)14,i1330,i1331,i1332,i1333) = Arr4DIdxRowM(tmp690, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)80,i1326,i1327,i1328,i1329);
i1329 = (i1329 +  (int64_t)1);
if ((i1329 ==  (int64_t)80)) {
i1329 =  (int64_t)0;
i1328 = (i1328 +  (int64_t)1);
if ((i1328 ==  (int64_t)14)) {
i1328 =  (int64_t)0;
i1327 = (i1327 +  (int64_t)1);
if ((i1327 ==  (int64_t)14)) {
i1327 =  (int64_t)0;
i1326 = (i1326 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80, tmp690);

uint64_t* tmp695 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80);

int64_t i1341;

int64_t i1340;

int64_t i1339;

int64_t i1338;

int64_t i1337;

int64_t i1336;

int64_t i1335;

int64_t i1334;
i1334 =  (int64_t)0;
i1335 =  (int64_t)0;
i1336 =  (int64_t)0;
i1337 =  (int64_t)0;
for (uint32_t i1338 =  (int32_t)0; i1338 <  (int32_t)1; i1338++){
for (uint32_t i1341 =  (int32_t)0; i1341 <  (int32_t)80; i1341++){
for (uint32_t i1339 =  (int32_t)0; i1339 <  (int32_t)14; i1339++){
for (uint32_t i1340 =  (int32_t)0; i1340 <  (int32_t)14; i1340++){
Arr4DIdxRowM(tmp695, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)80,i1338,i1339,i1340,i1341) = Arr4DIdxRowM(tmp693, (int32_t)1, (int32_t)80, (int32_t)14, (int32_t)14,i1334,i1335,i1336,i1337);
i1337 = (i1337 +  (int64_t)1);
if ((i1337 ==  (int64_t)14)) {
i1337 =  (int64_t)0;
i1336 = (i1336 +  (int64_t)1);
if ((i1336 ==  (int64_t)14)) {
i1336 =  (int64_t)0;
i1335 = (i1335 +  (int64_t)1);
if ((i1335 ==  (int64_t)80)) {
i1335 =  (int64_t)0;
i1334 = (i1334 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)80,  (int32_t)14,  (int32_t)14, tmp693);

uint64_t* tmp697 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)80,  (int32_t)480);

int64_t i1349;

int64_t i1348;

int64_t i1347;

int64_t i1346;

int64_t i1345;

int64_t i1344;

int64_t i1343;

int64_t i1342;
i1342 =  (int64_t)0;
i1343 =  (int64_t)0;
i1344 =  (int64_t)0;
i1345 =  (int64_t)0;
for (uint32_t i1349 =  (int32_t)0; i1349 <  (int32_t)480; i1349++){
for (uint32_t i1348 =  (int32_t)0; i1348 <  (int32_t)80; i1348++){
for (uint32_t i1346 =  (int32_t)0; i1346 <  (int32_t)1; i1346++){
for (uint32_t i1347 =  (int32_t)0; i1347 <  (int32_t)1; i1347++){
Arr4DIdxRowM(tmp697, (int32_t)1, (int32_t)1, (int32_t)80, (int32_t)480,i1346,i1347,i1348,i1349) = Arr4DIdxRowM(tmp63, (int32_t)480, (int32_t)80, (int32_t)1, (int32_t)1,i1342,i1343,i1344,i1345);
i1345 = (i1345 +  (int64_t)1);
if ((i1345 ==  (int64_t)1)) {
i1345 =  (int64_t)0;
i1344 = (i1344 +  (int64_t)1);
if ((i1344 ==  (int64_t)1)) {
i1344 =  (int64_t)0;
i1343 = (i1343 +  (int64_t)1);
if ((i1343 ==  (int64_t)80)) {
i1343 =  (int64_t)0;
i1342 = (i1342 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)480,  (int32_t)80,  (int32_t)1,  (int32_t)1, tmp63);

uint64_t* tmp699 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80, tmp695,  kScale);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80,  (int32_t)1,  (int32_t)1,  (int32_t)480,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp695, tmp697, tmp699);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)80, tmp695);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)80,  (int32_t)480, tmp697);

uint64_t* tmp702 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)480);

int64_t i1354;

int64_t i1353;

int64_t i1352;

int64_t i1351;

int64_t i1350;
i1350 =  (int64_t)0;
for (uint32_t i1351 =  (int32_t)0; i1351 <  (int32_t)1; i1351++){
for (uint32_t i1352 =  (int32_t)0; i1352 <  (int32_t)1; i1352++){
for (uint32_t i1353 =  (int32_t)0; i1353 <  (int32_t)1; i1353++){
for (uint32_t i1354 =  (int32_t)0; i1354 <  (int32_t)480; i1354++){
Arr4DIdxRowM(tmp702, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)480,i1351,i1352,i1353,i1354) = Arr1DIdxRowM(tmp64, (int32_t)480,i1350);
i1350 = (i1350 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)480, tmp64);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)480, tmp702,  kScale);

uint64_t* tmp704 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)14; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)14; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)480; i3++){
Arr4DIdxRowM(tmp704, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp699, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i0,i1,i2,i3), Arr4DIdxRowM(tmp702, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)480,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp699);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)480, tmp702);

uint64_t* tmp707 = make_array<uint64_t>( (int32_t)1,  (int32_t)480,  (int32_t)14,  (int32_t)14);

int64_t i1362;

int64_t i1361;

int64_t i1360;

int64_t i1359;

int64_t i1358;

int64_t i1357;

int64_t i1356;

int64_t i1355;
i1355 =  (int64_t)0;
i1356 =  (int64_t)0;
i1357 =  (int64_t)0;
i1358 =  (int64_t)0;
for (uint32_t i1359 =  (int32_t)0; i1359 <  (int32_t)1; i1359++){
for (uint32_t i1361 =  (int32_t)0; i1361 <  (int32_t)14; i1361++){
for (uint32_t i1362 =  (int32_t)0; i1362 <  (int32_t)14; i1362++){
for (uint32_t i1360 =  (int32_t)0; i1360 <  (int32_t)480; i1360++){
Arr4DIdxRowM(tmp707, (int32_t)1, (int32_t)480, (int32_t)14, (int32_t)14,i1359,i1360,i1361,i1362) = Arr4DIdxRowM(tmp704, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i1355,i1356,i1357,i1358);
i1358 = (i1358 +  (int64_t)1);
if ((i1358 ==  (int64_t)480)) {
i1358 =  (int64_t)0;
i1357 = (i1357 +  (int64_t)1);
if ((i1357 ==  (int64_t)14)) {
i1357 =  (int64_t)0;
i1356 = (i1356 +  (int64_t)1);
if ((i1356 ==  (int64_t)14)) {
i1356 =  (int64_t)0;
i1355 = (i1355 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp704);

uint64_t* tmp709 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);

int64_t i1370;

int64_t i1369;

int64_t i1368;

int64_t i1367;

int64_t i1366;

int64_t i1365;

int64_t i1364;

int64_t i1363;
i1363 =  (int64_t)0;
i1364 =  (int64_t)0;
i1365 =  (int64_t)0;
i1366 =  (int64_t)0;
for (uint32_t i1367 =  (int32_t)0; i1367 <  (int32_t)1; i1367++){
for (uint32_t i1370 =  (int32_t)0; i1370 <  (int32_t)480; i1370++){
for (uint32_t i1368 =  (int32_t)0; i1368 <  (int32_t)14; i1368++){
for (uint32_t i1369 =  (int32_t)0; i1369 <  (int32_t)14; i1369++){
Arr4DIdxRowM(tmp709, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i1367,i1368,i1369,i1370) = Arr4DIdxRowM(tmp707, (int32_t)1, (int32_t)480, (int32_t)14, (int32_t)14,i1363,i1364,i1365,i1366);
i1366 = (i1366 +  (int64_t)1);
if ((i1366 ==  (int64_t)14)) {
i1366 =  (int64_t)0;
i1365 = (i1365 +  (int64_t)1);
if ((i1365 ==  (int64_t)14)) {
i1365 =  (int64_t)0;
i1364 = (i1364 +  (int64_t)1);
if ((i1364 ==  (int64_t)480)) {
i1364 =  (int64_t)0;
i1363 = (i1363 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)480,  (int32_t)14,  (int32_t)14, tmp707);

uint64_t* tmp711 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp709, tmp711,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp709);

uint64_t* tmp713 = make_array<uint64_t>( (int32_t)1,  (int32_t)480,  (int32_t)14,  (int32_t)14);

int64_t i1378;

int64_t i1377;

int64_t i1376;

int64_t i1375;

int64_t i1374;

int64_t i1373;

int64_t i1372;

int64_t i1371;
i1371 =  (int64_t)0;
i1372 =  (int64_t)0;
i1373 =  (int64_t)0;
i1374 =  (int64_t)0;
for (uint32_t i1375 =  (int32_t)0; i1375 <  (int32_t)1; i1375++){
for (uint32_t i1377 =  (int32_t)0; i1377 <  (int32_t)14; i1377++){
for (uint32_t i1378 =  (int32_t)0; i1378 <  (int32_t)14; i1378++){
for (uint32_t i1376 =  (int32_t)0; i1376 <  (int32_t)480; i1376++){
Arr4DIdxRowM(tmp713, (int32_t)1, (int32_t)480, (int32_t)14, (int32_t)14,i1375,i1376,i1377,i1378) = Arr4DIdxRowM(tmp711, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i1371,i1372,i1373,i1374);
i1374 = (i1374 +  (int64_t)1);
if ((i1374 ==  (int64_t)480)) {
i1374 =  (int64_t)0;
i1373 = (i1373 +  (int64_t)1);
if ((i1373 ==  (int64_t)14)) {
i1373 =  (int64_t)0;
i1372 = (i1372 +  (int64_t)1);
if ((i1372 ==  (int64_t)14)) {
i1372 =  (int64_t)0;
i1371 = (i1371 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp711);

uint64_t* tmp715 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);

int64_t i1386;

int64_t i1385;

int64_t i1384;

int64_t i1383;

int64_t i1382;

int64_t i1381;

int64_t i1380;

int64_t i1379;
i1379 =  (int64_t)0;
i1380 =  (int64_t)0;
i1381 =  (int64_t)0;
i1382 =  (int64_t)0;
for (uint32_t i1383 =  (int32_t)0; i1383 <  (int32_t)1; i1383++){
for (uint32_t i1386 =  (int32_t)0; i1386 <  (int32_t)480; i1386++){
for (uint32_t i1384 =  (int32_t)0; i1384 <  (int32_t)14; i1384++){
for (uint32_t i1385 =  (int32_t)0; i1385 <  (int32_t)14; i1385++){
Arr4DIdxRowM(tmp715, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i1383,i1384,i1385,i1386) = Arr4DIdxRowM(tmp713, (int32_t)1, (int32_t)480, (int32_t)14, (int32_t)14,i1379,i1380,i1381,i1382);
i1382 = (i1382 +  (int64_t)1);
if ((i1382 ==  (int64_t)14)) {
i1382 =  (int64_t)0;
i1381 = (i1381 +  (int64_t)1);
if ((i1381 ==  (int64_t)14)) {
i1381 =  (int64_t)0;
i1380 = (i1380 +  (int64_t)1);
if ((i1380 ==  (int64_t)480)) {
i1380 =  (int64_t)0;
i1379 = (i1379 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)480,  (int32_t)14,  (int32_t)14, tmp713);

uint64_t* tmp717 = make_array<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)1,  (int32_t)480);

int64_t i1394;

int64_t i1393;

int64_t i1392;

int64_t i1391;

int64_t i1390;

int64_t i1389;

int64_t i1388;

int64_t i1387;
i1387 =  (int64_t)0;
i1388 =  (int64_t)0;
i1389 =  (int64_t)0;
i1390 =  (int64_t)0;
for (uint32_t i1394 =  (int32_t)0; i1394 <  (int32_t)480; i1394++){
for (uint32_t i1393 =  (int32_t)0; i1393 <  (int32_t)1; i1393++){
for (uint32_t i1391 =  (int32_t)0; i1391 <  (int32_t)3; i1391++){
for (uint32_t i1392 =  (int32_t)0; i1392 <  (int32_t)3; i1392++){
Arr4DIdxRowM(tmp717, (int32_t)3, (int32_t)3, (int32_t)1, (int32_t)480,i1391,i1392,i1393,i1394) = Arr4DIdxRowM(tmp65, (int32_t)480, (int32_t)1, (int32_t)3, (int32_t)3,i1387,i1388,i1389,i1390);
i1390 = (i1390 +  (int64_t)1);
if ((i1390 ==  (int64_t)3)) {
i1390 =  (int64_t)0;
i1389 = (i1389 +  (int64_t)1);
if ((i1389 ==  (int64_t)3)) {
i1389 =  (int64_t)0;
i1388 = (i1388 +  (int64_t)1);
if ((i1388 ==  (int64_t)1)) {
i1388 =  (int64_t)0;
i1387 = (i1387 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)480,  (int32_t)1,  (int32_t)3,  (int32_t)3, tmp65);

uint64_t* tmp719 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480,  (int32_t)3,  (int32_t)3,  (int32_t)480,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)480, tmp715, tmp717, tmp719);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp715);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)1,  (int32_t)480, tmp717);

uint64_t* tmp722 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)480);

int64_t i1399;

int64_t i1398;

int64_t i1397;

int64_t i1396;

int64_t i1395;
i1395 =  (int64_t)0;
for (uint32_t i1396 =  (int32_t)0; i1396 <  (int32_t)1; i1396++){
for (uint32_t i1397 =  (int32_t)0; i1397 <  (int32_t)1; i1397++){
for (uint32_t i1398 =  (int32_t)0; i1398 <  (int32_t)1; i1398++){
for (uint32_t i1399 =  (int32_t)0; i1399 <  (int32_t)480; i1399++){
Arr4DIdxRowM(tmp722, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)480,i1396,i1397,i1398,i1399) = Arr1DIdxRowM(tmp66, (int32_t)480,i1395);
i1395 = (i1395 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)480, tmp66);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)480, tmp722,  kScale);

uint64_t* tmp724 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)14; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)14; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)480; i3++){
Arr4DIdxRowM(tmp724, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp719, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i0,i1,i2,i3), Arr4DIdxRowM(tmp722, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)480,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)480, tmp722);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp719);

uint64_t* tmp727 = make_array<uint64_t>( (int32_t)1,  (int32_t)480,  (int32_t)14,  (int32_t)14);

int64_t i1407;

int64_t i1406;

int64_t i1405;

int64_t i1404;

int64_t i1403;

int64_t i1402;

int64_t i1401;

int64_t i1400;
i1400 =  (int64_t)0;
i1401 =  (int64_t)0;
i1402 =  (int64_t)0;
i1403 =  (int64_t)0;
for (uint32_t i1404 =  (int32_t)0; i1404 <  (int32_t)1; i1404++){
for (uint32_t i1406 =  (int32_t)0; i1406 <  (int32_t)14; i1406++){
for (uint32_t i1407 =  (int32_t)0; i1407 <  (int32_t)14; i1407++){
for (uint32_t i1405 =  (int32_t)0; i1405 <  (int32_t)480; i1405++){
Arr4DIdxRowM(tmp727, (int32_t)1, (int32_t)480, (int32_t)14, (int32_t)14,i1404,i1405,i1406,i1407) = Arr4DIdxRowM(tmp724, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i1400,i1401,i1402,i1403);
i1403 = (i1403 +  (int64_t)1);
if ((i1403 ==  (int64_t)480)) {
i1403 =  (int64_t)0;
i1402 = (i1402 +  (int64_t)1);
if ((i1402 ==  (int64_t)14)) {
i1402 =  (int64_t)0;
i1401 = (i1401 +  (int64_t)1);
if ((i1401 ==  (int64_t)14)) {
i1401 =  (int64_t)0;
i1400 = (i1400 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp724);

uint64_t* tmp729 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);

int64_t i1415;

int64_t i1414;

int64_t i1413;

int64_t i1412;

int64_t i1411;

int64_t i1410;

int64_t i1409;

int64_t i1408;
i1408 =  (int64_t)0;
i1409 =  (int64_t)0;
i1410 =  (int64_t)0;
i1411 =  (int64_t)0;
for (uint32_t i1412 =  (int32_t)0; i1412 <  (int32_t)1; i1412++){
for (uint32_t i1415 =  (int32_t)0; i1415 <  (int32_t)480; i1415++){
for (uint32_t i1413 =  (int32_t)0; i1413 <  (int32_t)14; i1413++){
for (uint32_t i1414 =  (int32_t)0; i1414 <  (int32_t)14; i1414++){
Arr4DIdxRowM(tmp729, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i1412,i1413,i1414,i1415) = Arr4DIdxRowM(tmp727, (int32_t)1, (int32_t)480, (int32_t)14, (int32_t)14,i1408,i1409,i1410,i1411);
i1411 = (i1411 +  (int64_t)1);
if ((i1411 ==  (int64_t)14)) {
i1411 =  (int64_t)0;
i1410 = (i1410 +  (int64_t)1);
if ((i1410 ==  (int64_t)14)) {
i1410 =  (int64_t)0;
i1409 = (i1409 +  (int64_t)1);
if ((i1409 ==  (int64_t)480)) {
i1409 =  (int64_t)0;
i1408 = (i1408 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)480,  (int32_t)14,  (int32_t)14, tmp727);

uint64_t* tmp731 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp729, tmp731,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp729);

uint64_t* tmp733 = make_array<uint64_t>( (int32_t)1,  (int32_t)480,  (int32_t)14,  (int32_t)14);

int64_t i1423;

int64_t i1422;

int64_t i1421;

int64_t i1420;

int64_t i1419;

int64_t i1418;

int64_t i1417;

int64_t i1416;
i1416 =  (int64_t)0;
i1417 =  (int64_t)0;
i1418 =  (int64_t)0;
i1419 =  (int64_t)0;
for (uint32_t i1420 =  (int32_t)0; i1420 <  (int32_t)1; i1420++){
for (uint32_t i1422 =  (int32_t)0; i1422 <  (int32_t)14; i1422++){
for (uint32_t i1423 =  (int32_t)0; i1423 <  (int32_t)14; i1423++){
for (uint32_t i1421 =  (int32_t)0; i1421 <  (int32_t)480; i1421++){
Arr4DIdxRowM(tmp733, (int32_t)1, (int32_t)480, (int32_t)14, (int32_t)14,i1420,i1421,i1422,i1423) = Arr4DIdxRowM(tmp731, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i1416,i1417,i1418,i1419);
i1419 = (i1419 +  (int64_t)1);
if ((i1419 ==  (int64_t)480)) {
i1419 =  (int64_t)0;
i1418 = (i1418 +  (int64_t)1);
if ((i1418 ==  (int64_t)14)) {
i1418 =  (int64_t)0;
i1417 = (i1417 +  (int64_t)1);
if ((i1417 ==  (int64_t)14)) {
i1417 =  (int64_t)0;
i1416 = (i1416 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp731);

uint64_t* tmp735 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480);

int64_t i1431;

int64_t i1430;

int64_t i1429;

int64_t i1428;

int64_t i1427;

int64_t i1426;

int64_t i1425;

int64_t i1424;
i1424 =  (int64_t)0;
i1425 =  (int64_t)0;
i1426 =  (int64_t)0;
i1427 =  (int64_t)0;
for (uint32_t i1428 =  (int32_t)0; i1428 <  (int32_t)1; i1428++){
for (uint32_t i1431 =  (int32_t)0; i1431 <  (int32_t)480; i1431++){
for (uint32_t i1429 =  (int32_t)0; i1429 <  (int32_t)14; i1429++){
for (uint32_t i1430 =  (int32_t)0; i1430 <  (int32_t)14; i1430++){
Arr4DIdxRowM(tmp735, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)480,i1428,i1429,i1430,i1431) = Arr4DIdxRowM(tmp733, (int32_t)1, (int32_t)480, (int32_t)14, (int32_t)14,i1424,i1425,i1426,i1427);
i1427 = (i1427 +  (int64_t)1);
if ((i1427 ==  (int64_t)14)) {
i1427 =  (int64_t)0;
i1426 = (i1426 +  (int64_t)1);
if ((i1426 ==  (int64_t)14)) {
i1426 =  (int64_t)0;
i1425 = (i1425 +  (int64_t)1);
if ((i1425 ==  (int64_t)480)) {
i1425 =  (int64_t)0;
i1424 = (i1424 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)480,  (int32_t)14,  (int32_t)14, tmp733);

uint64_t* tmp737 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)480,  (int32_t)96);

int64_t i1439;

int64_t i1438;

int64_t i1437;

int64_t i1436;

int64_t i1435;

int64_t i1434;

int64_t i1433;

int64_t i1432;
i1432 =  (int64_t)0;
i1433 =  (int64_t)0;
i1434 =  (int64_t)0;
i1435 =  (int64_t)0;
for (uint32_t i1439 =  (int32_t)0; i1439 <  (int32_t)96; i1439++){
for (uint32_t i1438 =  (int32_t)0; i1438 <  (int32_t)480; i1438++){
for (uint32_t i1436 =  (int32_t)0; i1436 <  (int32_t)1; i1436++){
for (uint32_t i1437 =  (int32_t)0; i1437 <  (int32_t)1; i1437++){
Arr4DIdxRowM(tmp737, (int32_t)1, (int32_t)1, (int32_t)480, (int32_t)96,i1436,i1437,i1438,i1439) = Arr4DIdxRowM(tmp67, (int32_t)96, (int32_t)480, (int32_t)1, (int32_t)1,i1432,i1433,i1434,i1435);
i1435 = (i1435 +  (int64_t)1);
if ((i1435 ==  (int64_t)1)) {
i1435 =  (int64_t)0;
i1434 = (i1434 +  (int64_t)1);
if ((i1434 ==  (int64_t)1)) {
i1434 =  (int64_t)0;
i1433 = (i1433 +  (int64_t)1);
if ((i1433 ==  (int64_t)480)) {
i1433 =  (int64_t)0;
i1432 = (i1432 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)96,  (int32_t)480,  (int32_t)1,  (int32_t)1, tmp67);

uint64_t* tmp739 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)96);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480,  (int32_t)1,  (int32_t)1,  (int32_t)96,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp735, tmp737, tmp739);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)480,  (int32_t)96, tmp737);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)480, tmp735);

uint64_t* tmp742 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)96);

int64_t i1444;

int64_t i1443;

int64_t i1442;

int64_t i1441;

int64_t i1440;
i1440 =  (int64_t)0;
for (uint32_t i1441 =  (int32_t)0; i1441 <  (int32_t)1; i1441++){
for (uint32_t i1442 =  (int32_t)0; i1442 <  (int32_t)1; i1442++){
for (uint32_t i1443 =  (int32_t)0; i1443 <  (int32_t)1; i1443++){
for (uint32_t i1444 =  (int32_t)0; i1444 <  (int32_t)96; i1444++){
Arr4DIdxRowM(tmp742, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)96,i1441,i1442,i1443,i1444) = Arr1DIdxRowM(tmp68, (int32_t)96,i1440);
i1440 = (i1440 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)96, tmp68);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)96, tmp742,  kScale);

uint64_t* tmp744 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)96);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)14; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)14; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)96; i3++){
Arr4DIdxRowM(tmp744, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)96,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp739, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)96,i0,i1,i2,i3), Arr4DIdxRowM(tmp742, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)96,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)96, tmp739);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)96, tmp742);

uint64_t* tmp747 = make_array<uint64_t>( (int32_t)1,  (int32_t)96,  (int32_t)14,  (int32_t)14);

int64_t i1452;

int64_t i1451;

int64_t i1450;

int64_t i1449;

int64_t i1448;

int64_t i1447;

int64_t i1446;

int64_t i1445;
i1445 =  (int64_t)0;
i1446 =  (int64_t)0;
i1447 =  (int64_t)0;
i1448 =  (int64_t)0;
for (uint32_t i1449 =  (int32_t)0; i1449 <  (int32_t)1; i1449++){
for (uint32_t i1451 =  (int32_t)0; i1451 <  (int32_t)14; i1451++){
for (uint32_t i1452 =  (int32_t)0; i1452 <  (int32_t)14; i1452++){
for (uint32_t i1450 =  (int32_t)0; i1450 <  (int32_t)96; i1450++){
Arr4DIdxRowM(tmp747, (int32_t)1, (int32_t)96, (int32_t)14, (int32_t)14,i1449,i1450,i1451,i1452) = Arr4DIdxRowM(tmp744, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)96,i1445,i1446,i1447,i1448);
i1448 = (i1448 +  (int64_t)1);
if ((i1448 ==  (int64_t)96)) {
i1448 =  (int64_t)0;
i1447 = (i1447 +  (int64_t)1);
if ((i1447 ==  (int64_t)14)) {
i1447 =  (int64_t)0;
i1446 = (i1446 +  (int64_t)1);
if ((i1446 ==  (int64_t)14)) {
i1446 =  (int64_t)0;
i1445 = (i1445 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)96, tmp744);

uint64_t* tmp749 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)96);

int64_t i1460;

int64_t i1459;

int64_t i1458;

int64_t i1457;

int64_t i1456;

int64_t i1455;

int64_t i1454;

int64_t i1453;
i1453 =  (int64_t)0;
i1454 =  (int64_t)0;
i1455 =  (int64_t)0;
i1456 =  (int64_t)0;
for (uint32_t i1457 =  (int32_t)0; i1457 <  (int32_t)1; i1457++){
for (uint32_t i1460 =  (int32_t)0; i1460 <  (int32_t)96; i1460++){
for (uint32_t i1458 =  (int32_t)0; i1458 <  (int32_t)14; i1458++){
for (uint32_t i1459 =  (int32_t)0; i1459 <  (int32_t)14; i1459++){
Arr4DIdxRowM(tmp749, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)96,i1457,i1458,i1459,i1460) = Arr4DIdxRowM(tmp747, (int32_t)1, (int32_t)96, (int32_t)14, (int32_t)14,i1453,i1454,i1455,i1456);
i1456 = (i1456 +  (int64_t)1);
if ((i1456 ==  (int64_t)14)) {
i1456 =  (int64_t)0;
i1455 = (i1455 +  (int64_t)1);
if ((i1455 ==  (int64_t)14)) {
i1455 =  (int64_t)0;
i1454 = (i1454 +  (int64_t)1);
if ((i1454 ==  (int64_t)96)) {
i1454 =  (int64_t)0;
i1453 = (i1453 +  (int64_t)1);
}
}
}
}
}
}
}

uint64_t* tmp750 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)96,  (int32_t)576);

int64_t i1468;

int64_t i1467;

int64_t i1466;

int64_t i1465;

int64_t i1464;

int64_t i1463;

int64_t i1462;

int64_t i1461;
i1461 =  (int64_t)0;
i1462 =  (int64_t)0;
i1463 =  (int64_t)0;
i1464 =  (int64_t)0;
for (uint32_t i1468 =  (int32_t)0; i1468 <  (int32_t)576; i1468++){
for (uint32_t i1467 =  (int32_t)0; i1467 <  (int32_t)96; i1467++){
for (uint32_t i1465 =  (int32_t)0; i1465 <  (int32_t)1; i1465++){
for (uint32_t i1466 =  (int32_t)0; i1466 <  (int32_t)1; i1466++){
Arr4DIdxRowM(tmp750, (int32_t)1, (int32_t)1, (int32_t)96, (int32_t)576,i1465,i1466,i1467,i1468) = Arr4DIdxRowM(tmp69, (int32_t)576, (int32_t)96, (int32_t)1, (int32_t)1,i1461,i1462,i1463,i1464);
i1464 = (i1464 +  (int64_t)1);
if ((i1464 ==  (int64_t)1)) {
i1464 =  (int64_t)0;
i1463 = (i1463 +  (int64_t)1);
if ((i1463 ==  (int64_t)1)) {
i1463 =  (int64_t)0;
i1462 = (i1462 +  (int64_t)1);
if ((i1462 ==  (int64_t)96)) {
i1462 =  (int64_t)0;
i1461 = (i1461 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)576,  (int32_t)96,  (int32_t)1,  (int32_t)1, tmp69);

uint64_t* tmp752 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)96, tmp749,  kScale);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)96,  (int32_t)1,  (int32_t)1,  (int32_t)576,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp749, tmp750, tmp752);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)96, tmp749);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)96,  (int32_t)576, tmp750);

uint64_t* tmp755 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)576);

int64_t i1473;

int64_t i1472;

int64_t i1471;

int64_t i1470;

int64_t i1469;
i1469 =  (int64_t)0;
for (uint32_t i1470 =  (int32_t)0; i1470 <  (int32_t)1; i1470++){
for (uint32_t i1471 =  (int32_t)0; i1471 <  (int32_t)1; i1471++){
for (uint32_t i1472 =  (int32_t)0; i1472 <  (int32_t)1; i1472++){
for (uint32_t i1473 =  (int32_t)0; i1473 <  (int32_t)576; i1473++){
Arr4DIdxRowM(tmp755, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)576,i1470,i1471,i1472,i1473) = Arr1DIdxRowM(tmp70, (int32_t)576,i1469);
i1469 = (i1469 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)576, tmp70);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)576, tmp755,  kScale);

uint64_t* tmp757 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)14; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)14; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)576; i3++){
Arr4DIdxRowM(tmp757, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)576,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp752, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)576,i0,i1,i2,i3), Arr4DIdxRowM(tmp755, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)576,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)576, tmp755);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp752);

uint64_t* tmp760 = make_array<uint64_t>( (int32_t)1,  (int32_t)576,  (int32_t)14,  (int32_t)14);

int64_t i1481;

int64_t i1480;

int64_t i1479;

int64_t i1478;

int64_t i1477;

int64_t i1476;

int64_t i1475;

int64_t i1474;
i1474 =  (int64_t)0;
i1475 =  (int64_t)0;
i1476 =  (int64_t)0;
i1477 =  (int64_t)0;
for (uint32_t i1478 =  (int32_t)0; i1478 <  (int32_t)1; i1478++){
for (uint32_t i1480 =  (int32_t)0; i1480 <  (int32_t)14; i1480++){
for (uint32_t i1481 =  (int32_t)0; i1481 <  (int32_t)14; i1481++){
for (uint32_t i1479 =  (int32_t)0; i1479 <  (int32_t)576; i1479++){
Arr4DIdxRowM(tmp760, (int32_t)1, (int32_t)576, (int32_t)14, (int32_t)14,i1478,i1479,i1480,i1481) = Arr4DIdxRowM(tmp757, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)576,i1474,i1475,i1476,i1477);
i1477 = (i1477 +  (int64_t)1);
if ((i1477 ==  (int64_t)576)) {
i1477 =  (int64_t)0;
i1476 = (i1476 +  (int64_t)1);
if ((i1476 ==  (int64_t)14)) {
i1476 =  (int64_t)0;
i1475 = (i1475 +  (int64_t)1);
if ((i1475 ==  (int64_t)14)) {
i1475 =  (int64_t)0;
i1474 = (i1474 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp757);

uint64_t* tmp762 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576);

int64_t i1489;

int64_t i1488;

int64_t i1487;

int64_t i1486;

int64_t i1485;

int64_t i1484;

int64_t i1483;

int64_t i1482;
i1482 =  (int64_t)0;
i1483 =  (int64_t)0;
i1484 =  (int64_t)0;
i1485 =  (int64_t)0;
for (uint32_t i1486 =  (int32_t)0; i1486 <  (int32_t)1; i1486++){
for (uint32_t i1489 =  (int32_t)0; i1489 <  (int32_t)576; i1489++){
for (uint32_t i1487 =  (int32_t)0; i1487 <  (int32_t)14; i1487++){
for (uint32_t i1488 =  (int32_t)0; i1488 <  (int32_t)14; i1488++){
Arr4DIdxRowM(tmp762, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)576,i1486,i1487,i1488,i1489) = Arr4DIdxRowM(tmp760, (int32_t)1, (int32_t)576, (int32_t)14, (int32_t)14,i1482,i1483,i1484,i1485);
i1485 = (i1485 +  (int64_t)1);
if ((i1485 ==  (int64_t)14)) {
i1485 =  (int64_t)0;
i1484 = (i1484 +  (int64_t)1);
if ((i1484 ==  (int64_t)14)) {
i1484 =  (int64_t)0;
i1483 = (i1483 +  (int64_t)1);
if ((i1483 ==  (int64_t)576)) {
i1483 =  (int64_t)0;
i1482 = (i1482 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)576,  (int32_t)14,  (int32_t)14, tmp760);

uint64_t* tmp764 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp762, tmp764,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp762);

uint64_t* tmp766 = make_array<uint64_t>( (int32_t)1,  (int32_t)576,  (int32_t)14,  (int32_t)14);

int64_t i1497;

int64_t i1496;

int64_t i1495;

int64_t i1494;

int64_t i1493;

int64_t i1492;

int64_t i1491;

int64_t i1490;
i1490 =  (int64_t)0;
i1491 =  (int64_t)0;
i1492 =  (int64_t)0;
i1493 =  (int64_t)0;
for (uint32_t i1494 =  (int32_t)0; i1494 <  (int32_t)1; i1494++){
for (uint32_t i1496 =  (int32_t)0; i1496 <  (int32_t)14; i1496++){
for (uint32_t i1497 =  (int32_t)0; i1497 <  (int32_t)14; i1497++){
for (uint32_t i1495 =  (int32_t)0; i1495 <  (int32_t)576; i1495++){
Arr4DIdxRowM(tmp766, (int32_t)1, (int32_t)576, (int32_t)14, (int32_t)14,i1494,i1495,i1496,i1497) = Arr4DIdxRowM(tmp764, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)576,i1490,i1491,i1492,i1493);
i1493 = (i1493 +  (int64_t)1);
if ((i1493 ==  (int64_t)576)) {
i1493 =  (int64_t)0;
i1492 = (i1492 +  (int64_t)1);
if ((i1492 ==  (int64_t)14)) {
i1492 =  (int64_t)0;
i1491 = (i1491 +  (int64_t)1);
if ((i1491 ==  (int64_t)14)) {
i1491 =  (int64_t)0;
i1490 = (i1490 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp764);

uint64_t* tmp768 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576);

int64_t i1505;

int64_t i1504;

int64_t i1503;

int64_t i1502;

int64_t i1501;

int64_t i1500;

int64_t i1499;

int64_t i1498;
i1498 =  (int64_t)0;
i1499 =  (int64_t)0;
i1500 =  (int64_t)0;
i1501 =  (int64_t)0;
for (uint32_t i1502 =  (int32_t)0; i1502 <  (int32_t)1; i1502++){
for (uint32_t i1505 =  (int32_t)0; i1505 <  (int32_t)576; i1505++){
for (uint32_t i1503 =  (int32_t)0; i1503 <  (int32_t)14; i1503++){
for (uint32_t i1504 =  (int32_t)0; i1504 <  (int32_t)14; i1504++){
Arr4DIdxRowM(tmp768, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)576,i1502,i1503,i1504,i1505) = Arr4DIdxRowM(tmp766, (int32_t)1, (int32_t)576, (int32_t)14, (int32_t)14,i1498,i1499,i1500,i1501);
i1501 = (i1501 +  (int64_t)1);
if ((i1501 ==  (int64_t)14)) {
i1501 =  (int64_t)0;
i1500 = (i1500 +  (int64_t)1);
if ((i1500 ==  (int64_t)14)) {
i1500 =  (int64_t)0;
i1499 = (i1499 +  (int64_t)1);
if ((i1499 ==  (int64_t)576)) {
i1499 =  (int64_t)0;
i1498 = (i1498 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)576,  (int32_t)14,  (int32_t)14, tmp766);

uint64_t* tmp770 = make_array<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)1,  (int32_t)576);

int64_t i1513;

int64_t i1512;

int64_t i1511;

int64_t i1510;

int64_t i1509;

int64_t i1508;

int64_t i1507;

int64_t i1506;
i1506 =  (int64_t)0;
i1507 =  (int64_t)0;
i1508 =  (int64_t)0;
i1509 =  (int64_t)0;
for (uint32_t i1513 =  (int32_t)0; i1513 <  (int32_t)576; i1513++){
for (uint32_t i1512 =  (int32_t)0; i1512 <  (int32_t)1; i1512++){
for (uint32_t i1510 =  (int32_t)0; i1510 <  (int32_t)3; i1510++){
for (uint32_t i1511 =  (int32_t)0; i1511 <  (int32_t)3; i1511++){
Arr4DIdxRowM(tmp770, (int32_t)3, (int32_t)3, (int32_t)1, (int32_t)576,i1510,i1511,i1512,i1513) = Arr4DIdxRowM(tmp71, (int32_t)576, (int32_t)1, (int32_t)3, (int32_t)3,i1506,i1507,i1508,i1509);
i1509 = (i1509 +  (int64_t)1);
if ((i1509 ==  (int64_t)3)) {
i1509 =  (int64_t)0;
i1508 = (i1508 +  (int64_t)1);
if ((i1508 ==  (int64_t)3)) {
i1508 =  (int64_t)0;
i1507 = (i1507 +  (int64_t)1);
if ((i1507 ==  (int64_t)1)) {
i1507 =  (int64_t)0;
i1506 = (i1506 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)576,  (int32_t)1,  (int32_t)3,  (int32_t)3, tmp71);

uint64_t* tmp772 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576,  (int32_t)3,  (int32_t)3,  (int32_t)576,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)576, tmp768, tmp770, tmp772);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp768);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)1,  (int32_t)576, tmp770);

uint64_t* tmp775 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)576);

int64_t i1518;

int64_t i1517;

int64_t i1516;

int64_t i1515;

int64_t i1514;
i1514 =  (int64_t)0;
for (uint32_t i1515 =  (int32_t)0; i1515 <  (int32_t)1; i1515++){
for (uint32_t i1516 =  (int32_t)0; i1516 <  (int32_t)1; i1516++){
for (uint32_t i1517 =  (int32_t)0; i1517 <  (int32_t)1; i1517++){
for (uint32_t i1518 =  (int32_t)0; i1518 <  (int32_t)576; i1518++){
Arr4DIdxRowM(tmp775, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)576,i1515,i1516,i1517,i1518) = Arr1DIdxRowM(tmp72, (int32_t)576,i1514);
i1514 = (i1514 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)576, tmp72);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)576, tmp775,  kScale);

uint64_t* tmp777 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)14; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)14; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)576; i3++){
Arr4DIdxRowM(tmp777, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)576,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp772, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)576,i0,i1,i2,i3), Arr4DIdxRowM(tmp775, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)576,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp772);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)576, tmp775);

uint64_t* tmp780 = make_array<uint64_t>( (int32_t)1,  (int32_t)576,  (int32_t)14,  (int32_t)14);

int64_t i1526;

int64_t i1525;

int64_t i1524;

int64_t i1523;

int64_t i1522;

int64_t i1521;

int64_t i1520;

int64_t i1519;
i1519 =  (int64_t)0;
i1520 =  (int64_t)0;
i1521 =  (int64_t)0;
i1522 =  (int64_t)0;
for (uint32_t i1523 =  (int32_t)0; i1523 <  (int32_t)1; i1523++){
for (uint32_t i1525 =  (int32_t)0; i1525 <  (int32_t)14; i1525++){
for (uint32_t i1526 =  (int32_t)0; i1526 <  (int32_t)14; i1526++){
for (uint32_t i1524 =  (int32_t)0; i1524 <  (int32_t)576; i1524++){
Arr4DIdxRowM(tmp780, (int32_t)1, (int32_t)576, (int32_t)14, (int32_t)14,i1523,i1524,i1525,i1526) = Arr4DIdxRowM(tmp777, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)576,i1519,i1520,i1521,i1522);
i1522 = (i1522 +  (int64_t)1);
if ((i1522 ==  (int64_t)576)) {
i1522 =  (int64_t)0;
i1521 = (i1521 +  (int64_t)1);
if ((i1521 ==  (int64_t)14)) {
i1521 =  (int64_t)0;
i1520 = (i1520 +  (int64_t)1);
if ((i1520 ==  (int64_t)14)) {
i1520 =  (int64_t)0;
i1519 = (i1519 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp777);

uint64_t* tmp782 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576);

int64_t i1534;

int64_t i1533;

int64_t i1532;

int64_t i1531;

int64_t i1530;

int64_t i1529;

int64_t i1528;

int64_t i1527;
i1527 =  (int64_t)0;
i1528 =  (int64_t)0;
i1529 =  (int64_t)0;
i1530 =  (int64_t)0;
for (uint32_t i1531 =  (int32_t)0; i1531 <  (int32_t)1; i1531++){
for (uint32_t i1534 =  (int32_t)0; i1534 <  (int32_t)576; i1534++){
for (uint32_t i1532 =  (int32_t)0; i1532 <  (int32_t)14; i1532++){
for (uint32_t i1533 =  (int32_t)0; i1533 <  (int32_t)14; i1533++){
Arr4DIdxRowM(tmp782, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)576,i1531,i1532,i1533,i1534) = Arr4DIdxRowM(tmp780, (int32_t)1, (int32_t)576, (int32_t)14, (int32_t)14,i1527,i1528,i1529,i1530);
i1530 = (i1530 +  (int64_t)1);
if ((i1530 ==  (int64_t)14)) {
i1530 =  (int64_t)0;
i1529 = (i1529 +  (int64_t)1);
if ((i1529 ==  (int64_t)14)) {
i1529 =  (int64_t)0;
i1528 = (i1528 +  (int64_t)1);
if ((i1528 ==  (int64_t)576)) {
i1528 =  (int64_t)0;
i1527 = (i1527 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)576,  (int32_t)14,  (int32_t)14, tmp780);

uint64_t* tmp784 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp782, tmp784,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp782);

uint64_t* tmp786 = make_array<uint64_t>( (int32_t)1,  (int32_t)576,  (int32_t)14,  (int32_t)14);

int64_t i1542;

int64_t i1541;

int64_t i1540;

int64_t i1539;

int64_t i1538;

int64_t i1537;

int64_t i1536;

int64_t i1535;
i1535 =  (int64_t)0;
i1536 =  (int64_t)0;
i1537 =  (int64_t)0;
i1538 =  (int64_t)0;
for (uint32_t i1539 =  (int32_t)0; i1539 <  (int32_t)1; i1539++){
for (uint32_t i1541 =  (int32_t)0; i1541 <  (int32_t)14; i1541++){
for (uint32_t i1542 =  (int32_t)0; i1542 <  (int32_t)14; i1542++){
for (uint32_t i1540 =  (int32_t)0; i1540 <  (int32_t)576; i1540++){
Arr4DIdxRowM(tmp786, (int32_t)1, (int32_t)576, (int32_t)14, (int32_t)14,i1539,i1540,i1541,i1542) = Arr4DIdxRowM(tmp784, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)576,i1535,i1536,i1537,i1538);
i1538 = (i1538 +  (int64_t)1);
if ((i1538 ==  (int64_t)576)) {
i1538 =  (int64_t)0;
i1537 = (i1537 +  (int64_t)1);
if ((i1537 ==  (int64_t)14)) {
i1537 =  (int64_t)0;
i1536 = (i1536 +  (int64_t)1);
if ((i1536 ==  (int64_t)14)) {
i1536 =  (int64_t)0;
i1535 = (i1535 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp784);

uint64_t* tmp788 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576);

int64_t i1550;

int64_t i1549;

int64_t i1548;

int64_t i1547;

int64_t i1546;

int64_t i1545;

int64_t i1544;

int64_t i1543;
i1543 =  (int64_t)0;
i1544 =  (int64_t)0;
i1545 =  (int64_t)0;
i1546 =  (int64_t)0;
for (uint32_t i1547 =  (int32_t)0; i1547 <  (int32_t)1; i1547++){
for (uint32_t i1550 =  (int32_t)0; i1550 <  (int32_t)576; i1550++){
for (uint32_t i1548 =  (int32_t)0; i1548 <  (int32_t)14; i1548++){
for (uint32_t i1549 =  (int32_t)0; i1549 <  (int32_t)14; i1549++){
Arr4DIdxRowM(tmp788, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)576,i1547,i1548,i1549,i1550) = Arr4DIdxRowM(tmp786, (int32_t)1, (int32_t)576, (int32_t)14, (int32_t)14,i1543,i1544,i1545,i1546);
i1546 = (i1546 +  (int64_t)1);
if ((i1546 ==  (int64_t)14)) {
i1546 =  (int64_t)0;
i1545 = (i1545 +  (int64_t)1);
if ((i1545 ==  (int64_t)14)) {
i1545 =  (int64_t)0;
i1544 = (i1544 +  (int64_t)1);
if ((i1544 ==  (int64_t)576)) {
i1544 =  (int64_t)0;
i1543 = (i1543 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)576,  (int32_t)14,  (int32_t)14, tmp786);

uint64_t* tmp790 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)576,  (int32_t)96);

int64_t i1558;

int64_t i1557;

int64_t i1556;

int64_t i1555;

int64_t i1554;

int64_t i1553;

int64_t i1552;

int64_t i1551;
i1551 =  (int64_t)0;
i1552 =  (int64_t)0;
i1553 =  (int64_t)0;
i1554 =  (int64_t)0;
for (uint32_t i1558 =  (int32_t)0; i1558 <  (int32_t)96; i1558++){
for (uint32_t i1557 =  (int32_t)0; i1557 <  (int32_t)576; i1557++){
for (uint32_t i1555 =  (int32_t)0; i1555 <  (int32_t)1; i1555++){
for (uint32_t i1556 =  (int32_t)0; i1556 <  (int32_t)1; i1556++){
Arr4DIdxRowM(tmp790, (int32_t)1, (int32_t)1, (int32_t)576, (int32_t)96,i1555,i1556,i1557,i1558) = Arr4DIdxRowM(tmp73, (int32_t)96, (int32_t)576, (int32_t)1, (int32_t)1,i1551,i1552,i1553,i1554);
i1554 = (i1554 +  (int64_t)1);
if ((i1554 ==  (int64_t)1)) {
i1554 =  (int64_t)0;
i1553 = (i1553 +  (int64_t)1);
if ((i1553 ==  (int64_t)1)) {
i1553 =  (int64_t)0;
i1552 = (i1552 +  (int64_t)1);
if ((i1552 ==  (int64_t)576)) {
i1552 =  (int64_t)0;
i1551 = (i1551 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)96,  (int32_t)576,  (int32_t)1,  (int32_t)1, tmp73);

uint64_t* tmp792 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)96);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576,  (int32_t)1,  (int32_t)1,  (int32_t)96,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp788, tmp790, tmp792);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp788);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)576,  (int32_t)96, tmp790);

uint64_t* tmp795 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)96);

int64_t i1563;

int64_t i1562;

int64_t i1561;

int64_t i1560;

int64_t i1559;
i1559 =  (int64_t)0;
for (uint32_t i1560 =  (int32_t)0; i1560 <  (int32_t)1; i1560++){
for (uint32_t i1561 =  (int32_t)0; i1561 <  (int32_t)1; i1561++){
for (uint32_t i1562 =  (int32_t)0; i1562 <  (int32_t)1; i1562++){
for (uint32_t i1563 =  (int32_t)0; i1563 <  (int32_t)96; i1563++){
Arr4DIdxRowM(tmp795, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)96,i1560,i1561,i1562,i1563) = Arr1DIdxRowM(tmp74, (int32_t)96,i1559);
i1559 = (i1559 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)96, tmp74);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)96, tmp795,  kScale);

uint64_t* tmp797 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)96);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)14; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)14; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)96; i3++){
Arr4DIdxRowM(tmp797, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)96,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp792, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)96,i0,i1,i2,i3), Arr4DIdxRowM(tmp795, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)96,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)96, tmp792);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)96, tmp795);

uint64_t* tmp800 = make_array<uint64_t>( (int32_t)1,  (int32_t)96,  (int32_t)14,  (int32_t)14);

int64_t i1571;

int64_t i1570;

int64_t i1569;

int64_t i1568;

int64_t i1567;

int64_t i1566;

int64_t i1565;

int64_t i1564;
i1564 =  (int64_t)0;
i1565 =  (int64_t)0;
i1566 =  (int64_t)0;
i1567 =  (int64_t)0;
for (uint32_t i1568 =  (int32_t)0; i1568 <  (int32_t)1; i1568++){
for (uint32_t i1570 =  (int32_t)0; i1570 <  (int32_t)14; i1570++){
for (uint32_t i1571 =  (int32_t)0; i1571 <  (int32_t)14; i1571++){
for (uint32_t i1569 =  (int32_t)0; i1569 <  (int32_t)96; i1569++){
Arr4DIdxRowM(tmp800, (int32_t)1, (int32_t)96, (int32_t)14, (int32_t)14,i1568,i1569,i1570,i1571) = Arr4DIdxRowM(tmp797, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)96,i1564,i1565,i1566,i1567);
i1567 = (i1567 +  (int64_t)1);
if ((i1567 ==  (int64_t)96)) {
i1567 =  (int64_t)0;
i1566 = (i1566 +  (int64_t)1);
if ((i1566 ==  (int64_t)14)) {
i1566 =  (int64_t)0;
i1565 = (i1565 +  (int64_t)1);
if ((i1565 ==  (int64_t)14)) {
i1565 =  (int64_t)0;
i1564 = (i1564 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)96, tmp797);

uint64_t* tmp802 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)96);

int64_t i1579;

int64_t i1578;

int64_t i1577;

int64_t i1576;

int64_t i1575;

int64_t i1574;

int64_t i1573;

int64_t i1572;
i1572 =  (int64_t)0;
i1573 =  (int64_t)0;
i1574 =  (int64_t)0;
i1575 =  (int64_t)0;
for (uint32_t i1576 =  (int32_t)0; i1576 <  (int32_t)1; i1576++){
for (uint32_t i1579 =  (int32_t)0; i1579 <  (int32_t)96; i1579++){
for (uint32_t i1577 =  (int32_t)0; i1577 <  (int32_t)14; i1577++){
for (uint32_t i1578 =  (int32_t)0; i1578 <  (int32_t)14; i1578++){
Arr4DIdxRowM(tmp802, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)96,i1576,i1577,i1578,i1579) = Arr4DIdxRowM(tmp800, (int32_t)1, (int32_t)96, (int32_t)14, (int32_t)14,i1572,i1573,i1574,i1575);
i1575 = (i1575 +  (int64_t)1);
if ((i1575 ==  (int64_t)14)) {
i1575 =  (int64_t)0;
i1574 = (i1574 +  (int64_t)1);
if ((i1574 ==  (int64_t)14)) {
i1574 =  (int64_t)0;
i1573 = (i1573 +  (int64_t)1);
if ((i1573 ==  (int64_t)96)) {
i1573 =  (int64_t)0;
i1572 = (i1572 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)96,  (int32_t)14,  (int32_t)14, tmp800);

uint64_t* tmp804 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)96);

int64_t i1587;

int64_t i1586;

int64_t i1585;

int64_t i1584;

int64_t i1583;

int64_t i1582;

int64_t i1581;

int64_t i1580;
i1580 =  (int64_t)0;
i1581 =  (int64_t)0;
i1582 =  (int64_t)0;
i1583 =  (int64_t)0;
for (uint32_t i1584 =  (int32_t)0; i1584 <  (int32_t)1; i1584++){
for (uint32_t i1587 =  (int32_t)0; i1587 <  (int32_t)96; i1587++){
for (uint32_t i1585 =  (int32_t)0; i1585 <  (int32_t)14; i1585++){
for (uint32_t i1586 =  (int32_t)0; i1586 <  (int32_t)14; i1586++){
Arr4DIdxRowM(tmp804, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)96,i1584,i1585,i1586,i1587) = Arr4DIdxRowM(tmp747, (int32_t)1, (int32_t)96, (int32_t)14, (int32_t)14,i1580,i1581,i1582,i1583);
i1583 = (i1583 +  (int64_t)1);
if ((i1583 ==  (int64_t)14)) {
i1583 =  (int64_t)0;
i1582 = (i1582 +  (int64_t)1);
if ((i1582 ==  (int64_t)14)) {
i1582 =  (int64_t)0;
i1581 = (i1581 +  (int64_t)1);
if ((i1581 ==  (int64_t)96)) {
i1581 =  (int64_t)0;
i1580 = (i1580 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)96,  (int32_t)14,  (int32_t)14, tmp747);

uint64_t* tmp806 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)96);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)14; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)14; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)96; i3++){
Arr4DIdxRowM(tmp806, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)96,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp802, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)96,i0,i1,i2,i3), Arr4DIdxRowM(tmp804, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)96,i0,i1,i2,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)96, tmp804);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)96, tmp802);

uint64_t* tmp809 = make_array<uint64_t>( (int32_t)1,  (int32_t)96,  (int32_t)14,  (int32_t)14);

int64_t i1595;

int64_t i1594;

int64_t i1593;

int64_t i1592;

int64_t i1591;

int64_t i1590;

int64_t i1589;

int64_t i1588;
i1588 =  (int64_t)0;
i1589 =  (int64_t)0;
i1590 =  (int64_t)0;
i1591 =  (int64_t)0;
for (uint32_t i1592 =  (int32_t)0; i1592 <  (int32_t)1; i1592++){
for (uint32_t i1594 =  (int32_t)0; i1594 <  (int32_t)14; i1594++){
for (uint32_t i1595 =  (int32_t)0; i1595 <  (int32_t)14; i1595++){
for (uint32_t i1593 =  (int32_t)0; i1593 <  (int32_t)96; i1593++){
Arr4DIdxRowM(tmp809, (int32_t)1, (int32_t)96, (int32_t)14, (int32_t)14,i1592,i1593,i1594,i1595) = Arr4DIdxRowM(tmp806, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)96,i1588,i1589,i1590,i1591);
i1591 = (i1591 +  (int64_t)1);
if ((i1591 ==  (int64_t)96)) {
i1591 =  (int64_t)0;
i1590 = (i1590 +  (int64_t)1);
if ((i1590 ==  (int64_t)14)) {
i1590 =  (int64_t)0;
i1589 = (i1589 +  (int64_t)1);
if ((i1589 ==  (int64_t)14)) {
i1589 =  (int64_t)0;
i1588 = (i1588 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)96, tmp806);

uint64_t* tmp811 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)96);

int64_t i1603;

int64_t i1602;

int64_t i1601;

int64_t i1600;

int64_t i1599;

int64_t i1598;

int64_t i1597;

int64_t i1596;
i1596 =  (int64_t)0;
i1597 =  (int64_t)0;
i1598 =  (int64_t)0;
i1599 =  (int64_t)0;
for (uint32_t i1600 =  (int32_t)0; i1600 <  (int32_t)1; i1600++){
for (uint32_t i1603 =  (int32_t)0; i1603 <  (int32_t)96; i1603++){
for (uint32_t i1601 =  (int32_t)0; i1601 <  (int32_t)14; i1601++){
for (uint32_t i1602 =  (int32_t)0; i1602 <  (int32_t)14; i1602++){
Arr4DIdxRowM(tmp811, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)96,i1600,i1601,i1602,i1603) = Arr4DIdxRowM(tmp809, (int32_t)1, (int32_t)96, (int32_t)14, (int32_t)14,i1596,i1597,i1598,i1599);
i1599 = (i1599 +  (int64_t)1);
if ((i1599 ==  (int64_t)14)) {
i1599 =  (int64_t)0;
i1598 = (i1598 +  (int64_t)1);
if ((i1598 ==  (int64_t)14)) {
i1598 =  (int64_t)0;
i1597 = (i1597 +  (int64_t)1);
if ((i1597 ==  (int64_t)96)) {
i1597 =  (int64_t)0;
i1596 = (i1596 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)96,  (int32_t)14,  (int32_t)14, tmp809);

uint64_t* tmp813 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)96,  (int32_t)576);

int64_t i1611;

int64_t i1610;

int64_t i1609;

int64_t i1608;

int64_t i1607;

int64_t i1606;

int64_t i1605;

int64_t i1604;
i1604 =  (int64_t)0;
i1605 =  (int64_t)0;
i1606 =  (int64_t)0;
i1607 =  (int64_t)0;
for (uint32_t i1611 =  (int32_t)0; i1611 <  (int32_t)576; i1611++){
for (uint32_t i1610 =  (int32_t)0; i1610 <  (int32_t)96; i1610++){
for (uint32_t i1608 =  (int32_t)0; i1608 <  (int32_t)1; i1608++){
for (uint32_t i1609 =  (int32_t)0; i1609 <  (int32_t)1; i1609++){
Arr4DIdxRowM(tmp813, (int32_t)1, (int32_t)1, (int32_t)96, (int32_t)576,i1608,i1609,i1610,i1611) = Arr4DIdxRowM(tmp75, (int32_t)576, (int32_t)96, (int32_t)1, (int32_t)1,i1604,i1605,i1606,i1607);
i1607 = (i1607 +  (int64_t)1);
if ((i1607 ==  (int64_t)1)) {
i1607 =  (int64_t)0;
i1606 = (i1606 +  (int64_t)1);
if ((i1606 ==  (int64_t)1)) {
i1606 =  (int64_t)0;
i1605 = (i1605 +  (int64_t)1);
if ((i1605 ==  (int64_t)96)) {
i1605 =  (int64_t)0;
i1604 = (i1604 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)576,  (int32_t)96,  (int32_t)1,  (int32_t)1, tmp75);

uint64_t* tmp815 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)96, tmp811,  kScale);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)96,  (int32_t)1,  (int32_t)1,  (int32_t)576,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp811, tmp813, tmp815);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)96,  (int32_t)576, tmp813);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)96, tmp811);

uint64_t* tmp818 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)576);

int64_t i1616;

int64_t i1615;

int64_t i1614;

int64_t i1613;

int64_t i1612;
i1612 =  (int64_t)0;
for (uint32_t i1613 =  (int32_t)0; i1613 <  (int32_t)1; i1613++){
for (uint32_t i1614 =  (int32_t)0; i1614 <  (int32_t)1; i1614++){
for (uint32_t i1615 =  (int32_t)0; i1615 <  (int32_t)1; i1615++){
for (uint32_t i1616 =  (int32_t)0; i1616 <  (int32_t)576; i1616++){
Arr4DIdxRowM(tmp818, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)576,i1613,i1614,i1615,i1616) = Arr1DIdxRowM(tmp76, (int32_t)576,i1612);
i1612 = (i1612 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)576, tmp76);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)576, tmp818,  kScale);

uint64_t* tmp820 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)14; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)14; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)576; i3++){
Arr4DIdxRowM(tmp820, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)576,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp815, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)576,i0,i1,i2,i3), Arr4DIdxRowM(tmp818, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)576,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp815);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)576, tmp818);

uint64_t* tmp823 = make_array<uint64_t>( (int32_t)1,  (int32_t)576,  (int32_t)14,  (int32_t)14);

int64_t i1624;

int64_t i1623;

int64_t i1622;

int64_t i1621;

int64_t i1620;

int64_t i1619;

int64_t i1618;

int64_t i1617;
i1617 =  (int64_t)0;
i1618 =  (int64_t)0;
i1619 =  (int64_t)0;
i1620 =  (int64_t)0;
for (uint32_t i1621 =  (int32_t)0; i1621 <  (int32_t)1; i1621++){
for (uint32_t i1623 =  (int32_t)0; i1623 <  (int32_t)14; i1623++){
for (uint32_t i1624 =  (int32_t)0; i1624 <  (int32_t)14; i1624++){
for (uint32_t i1622 =  (int32_t)0; i1622 <  (int32_t)576; i1622++){
Arr4DIdxRowM(tmp823, (int32_t)1, (int32_t)576, (int32_t)14, (int32_t)14,i1621,i1622,i1623,i1624) = Arr4DIdxRowM(tmp820, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)576,i1617,i1618,i1619,i1620);
i1620 = (i1620 +  (int64_t)1);
if ((i1620 ==  (int64_t)576)) {
i1620 =  (int64_t)0;
i1619 = (i1619 +  (int64_t)1);
if ((i1619 ==  (int64_t)14)) {
i1619 =  (int64_t)0;
i1618 = (i1618 +  (int64_t)1);
if ((i1618 ==  (int64_t)14)) {
i1618 =  (int64_t)0;
i1617 = (i1617 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp820);

uint64_t* tmp825 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576);

int64_t i1632;

int64_t i1631;

int64_t i1630;

int64_t i1629;

int64_t i1628;

int64_t i1627;

int64_t i1626;

int64_t i1625;
i1625 =  (int64_t)0;
i1626 =  (int64_t)0;
i1627 =  (int64_t)0;
i1628 =  (int64_t)0;
for (uint32_t i1629 =  (int32_t)0; i1629 <  (int32_t)1; i1629++){
for (uint32_t i1632 =  (int32_t)0; i1632 <  (int32_t)576; i1632++){
for (uint32_t i1630 =  (int32_t)0; i1630 <  (int32_t)14; i1630++){
for (uint32_t i1631 =  (int32_t)0; i1631 <  (int32_t)14; i1631++){
Arr4DIdxRowM(tmp825, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)576,i1629,i1630,i1631,i1632) = Arr4DIdxRowM(tmp823, (int32_t)1, (int32_t)576, (int32_t)14, (int32_t)14,i1625,i1626,i1627,i1628);
i1628 = (i1628 +  (int64_t)1);
if ((i1628 ==  (int64_t)14)) {
i1628 =  (int64_t)0;
i1627 = (i1627 +  (int64_t)1);
if ((i1627 ==  (int64_t)14)) {
i1627 =  (int64_t)0;
i1626 = (i1626 +  (int64_t)1);
if ((i1626 ==  (int64_t)576)) {
i1626 =  (int64_t)0;
i1625 = (i1625 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)576,  (int32_t)14,  (int32_t)14, tmp823);

uint64_t* tmp827 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp825, tmp827,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp825);

uint64_t* tmp829 = make_array<uint64_t>( (int32_t)1,  (int32_t)576,  (int32_t)14,  (int32_t)14);

int64_t i1640;

int64_t i1639;

int64_t i1638;

int64_t i1637;

int64_t i1636;

int64_t i1635;

int64_t i1634;

int64_t i1633;
i1633 =  (int64_t)0;
i1634 =  (int64_t)0;
i1635 =  (int64_t)0;
i1636 =  (int64_t)0;
for (uint32_t i1637 =  (int32_t)0; i1637 <  (int32_t)1; i1637++){
for (uint32_t i1639 =  (int32_t)0; i1639 <  (int32_t)14; i1639++){
for (uint32_t i1640 =  (int32_t)0; i1640 <  (int32_t)14; i1640++){
for (uint32_t i1638 =  (int32_t)0; i1638 <  (int32_t)576; i1638++){
Arr4DIdxRowM(tmp829, (int32_t)1, (int32_t)576, (int32_t)14, (int32_t)14,i1637,i1638,i1639,i1640) = Arr4DIdxRowM(tmp827, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)576,i1633,i1634,i1635,i1636);
i1636 = (i1636 +  (int64_t)1);
if ((i1636 ==  (int64_t)576)) {
i1636 =  (int64_t)0;
i1635 = (i1635 +  (int64_t)1);
if ((i1635 ==  (int64_t)14)) {
i1635 =  (int64_t)0;
i1634 = (i1634 +  (int64_t)1);
if ((i1634 ==  (int64_t)14)) {
i1634 =  (int64_t)0;
i1633 = (i1633 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp827);

uint64_t* tmp831 = make_array<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576);

int64_t i1648;

int64_t i1647;

int64_t i1646;

int64_t i1645;

int64_t i1644;

int64_t i1643;

int64_t i1642;

int64_t i1641;
i1641 =  (int64_t)0;
i1642 =  (int64_t)0;
i1643 =  (int64_t)0;
i1644 =  (int64_t)0;
for (uint32_t i1645 =  (int32_t)0; i1645 <  (int32_t)1; i1645++){
for (uint32_t i1648 =  (int32_t)0; i1648 <  (int32_t)576; i1648++){
for (uint32_t i1646 =  (int32_t)0; i1646 <  (int32_t)14; i1646++){
for (uint32_t i1647 =  (int32_t)0; i1647 <  (int32_t)14; i1647++){
Arr4DIdxRowM(tmp831, (int32_t)1, (int32_t)14, (int32_t)14, (int32_t)576,i1645,i1646,i1647,i1648) = Arr4DIdxRowM(tmp829, (int32_t)1, (int32_t)576, (int32_t)14, (int32_t)14,i1641,i1642,i1643,i1644);
i1644 = (i1644 +  (int64_t)1);
if ((i1644 ==  (int64_t)14)) {
i1644 =  (int64_t)0;
i1643 = (i1643 +  (int64_t)1);
if ((i1643 ==  (int64_t)14)) {
i1643 =  (int64_t)0;
i1642 = (i1642 +  (int64_t)1);
if ((i1642 ==  (int64_t)576)) {
i1642 =  (int64_t)0;
i1641 = (i1641 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)576,  (int32_t)14,  (int32_t)14, tmp829);

uint64_t* tmp833 = make_array<uint64_t>( (int32_t)5,  (int32_t)5,  (int32_t)1,  (int32_t)576);

int64_t i1656;

int64_t i1655;

int64_t i1654;

int64_t i1653;

int64_t i1652;

int64_t i1651;

int64_t i1650;

int64_t i1649;
i1649 =  (int64_t)0;
i1650 =  (int64_t)0;
i1651 =  (int64_t)0;
i1652 =  (int64_t)0;
for (uint32_t i1656 =  (int32_t)0; i1656 <  (int32_t)576; i1656++){
for (uint32_t i1655 =  (int32_t)0; i1655 <  (int32_t)1; i1655++){
for (uint32_t i1653 =  (int32_t)0; i1653 <  (int32_t)5; i1653++){
for (uint32_t i1654 =  (int32_t)0; i1654 <  (int32_t)5; i1654++){
Arr4DIdxRowM(tmp833, (int32_t)5, (int32_t)5, (int32_t)1, (int32_t)576,i1653,i1654,i1655,i1656) = Arr4DIdxRowM(tmp77, (int32_t)576, (int32_t)1, (int32_t)5, (int32_t)5,i1649,i1650,i1651,i1652);
i1652 = (i1652 +  (int64_t)1);
if ((i1652 ==  (int64_t)5)) {
i1652 =  (int64_t)0;
i1651 = (i1651 +  (int64_t)1);
if ((i1651 ==  (int64_t)5)) {
i1651 =  (int64_t)0;
i1650 = (i1650 +  (int64_t)1);
if ((i1650 ==  (int64_t)1)) {
i1650 =  (int64_t)0;
i1649 = (i1649 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)576,  (int32_t)1,  (int32_t)5,  (int32_t)5, tmp77);

uint64_t* tmp835 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)576);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576,  (int32_t)5,  (int32_t)5,  (int32_t)576,  (int32_t)2,  (int32_t)2,  (int32_t)2,  (int32_t)2,  (int32_t)2,  (int32_t)2,  (int32_t)576, tmp831, tmp833, tmp835);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)576, tmp831);
ClearMemSecret4( (int32_t)5,  (int32_t)5,  (int32_t)1,  (int32_t)576, tmp833);

uint64_t* tmp838 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)576);

int64_t i1661;

int64_t i1660;

int64_t i1659;

int64_t i1658;

int64_t i1657;
i1657 =  (int64_t)0;
for (uint32_t i1658 =  (int32_t)0; i1658 <  (int32_t)1; i1658++){
for (uint32_t i1659 =  (int32_t)0; i1659 <  (int32_t)1; i1659++){
for (uint32_t i1660 =  (int32_t)0; i1660 <  (int32_t)1; i1660++){
for (uint32_t i1661 =  (int32_t)0; i1661 <  (int32_t)576; i1661++){
Arr4DIdxRowM(tmp838, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)576,i1658,i1659,i1660,i1661) = Arr1DIdxRowM(tmp78, (int32_t)576,i1657);
i1657 = (i1657 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)576, tmp78);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)576, tmp838,  kScale);

uint64_t* tmp840 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)576);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)7; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)7; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)576; i3++){
Arr4DIdxRowM(tmp840, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)576,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp835, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)576,i0,i1,i2,i3), Arr4DIdxRowM(tmp838, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)576,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)576, tmp835);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)576, tmp838);

uint64_t* tmp843 = make_array<uint64_t>( (int32_t)1,  (int32_t)576,  (int32_t)7,  (int32_t)7);

int64_t i1669;

int64_t i1668;

int64_t i1667;

int64_t i1666;

int64_t i1665;

int64_t i1664;

int64_t i1663;

int64_t i1662;
i1662 =  (int64_t)0;
i1663 =  (int64_t)0;
i1664 =  (int64_t)0;
i1665 =  (int64_t)0;
for (uint32_t i1666 =  (int32_t)0; i1666 <  (int32_t)1; i1666++){
for (uint32_t i1668 =  (int32_t)0; i1668 <  (int32_t)7; i1668++){
for (uint32_t i1669 =  (int32_t)0; i1669 <  (int32_t)7; i1669++){
for (uint32_t i1667 =  (int32_t)0; i1667 <  (int32_t)576; i1667++){
Arr4DIdxRowM(tmp843, (int32_t)1, (int32_t)576, (int32_t)7, (int32_t)7,i1666,i1667,i1668,i1669) = Arr4DIdxRowM(tmp840, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)576,i1662,i1663,i1664,i1665);
i1665 = (i1665 +  (int64_t)1);
if ((i1665 ==  (int64_t)576)) {
i1665 =  (int64_t)0;
i1664 = (i1664 +  (int64_t)1);
if ((i1664 ==  (int64_t)7)) {
i1664 =  (int64_t)0;
i1663 = (i1663 +  (int64_t)1);
if ((i1663 ==  (int64_t)7)) {
i1663 =  (int64_t)0;
i1662 = (i1662 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)576, tmp840);

uint64_t* tmp845 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)576);

int64_t i1677;

int64_t i1676;

int64_t i1675;

int64_t i1674;

int64_t i1673;

int64_t i1672;

int64_t i1671;

int64_t i1670;
i1670 =  (int64_t)0;
i1671 =  (int64_t)0;
i1672 =  (int64_t)0;
i1673 =  (int64_t)0;
for (uint32_t i1674 =  (int32_t)0; i1674 <  (int32_t)1; i1674++){
for (uint32_t i1677 =  (int32_t)0; i1677 <  (int32_t)576; i1677++){
for (uint32_t i1675 =  (int32_t)0; i1675 <  (int32_t)7; i1675++){
for (uint32_t i1676 =  (int32_t)0; i1676 <  (int32_t)7; i1676++){
Arr4DIdxRowM(tmp845, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)576,i1674,i1675,i1676,i1677) = Arr4DIdxRowM(tmp843, (int32_t)1, (int32_t)576, (int32_t)7, (int32_t)7,i1670,i1671,i1672,i1673);
i1673 = (i1673 +  (int64_t)1);
if ((i1673 ==  (int64_t)7)) {
i1673 =  (int64_t)0;
i1672 = (i1672 +  (int64_t)1);
if ((i1672 ==  (int64_t)7)) {
i1672 =  (int64_t)0;
i1671 = (i1671 +  (int64_t)1);
if ((i1671 ==  (int64_t)576)) {
i1671 =  (int64_t)0;
i1670 = (i1670 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)576,  (int32_t)7,  (int32_t)7, tmp843);

uint64_t* tmp847 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)576);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)576, tmp845, tmp847,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)576, tmp845);

uint64_t* tmp849 = make_array<uint64_t>( (int32_t)1,  (int32_t)576,  (int32_t)7,  (int32_t)7);

int64_t i1685;

int64_t i1684;

int64_t i1683;

int64_t i1682;

int64_t i1681;

int64_t i1680;

int64_t i1679;

int64_t i1678;
i1678 =  (int64_t)0;
i1679 =  (int64_t)0;
i1680 =  (int64_t)0;
i1681 =  (int64_t)0;
for (uint32_t i1682 =  (int32_t)0; i1682 <  (int32_t)1; i1682++){
for (uint32_t i1684 =  (int32_t)0; i1684 <  (int32_t)7; i1684++){
for (uint32_t i1685 =  (int32_t)0; i1685 <  (int32_t)7; i1685++){
for (uint32_t i1683 =  (int32_t)0; i1683 <  (int32_t)576; i1683++){
Arr4DIdxRowM(tmp849, (int32_t)1, (int32_t)576, (int32_t)7, (int32_t)7,i1682,i1683,i1684,i1685) = Arr4DIdxRowM(tmp847, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)576,i1678,i1679,i1680,i1681);
i1681 = (i1681 +  (int64_t)1);
if ((i1681 ==  (int64_t)576)) {
i1681 =  (int64_t)0;
i1680 = (i1680 +  (int64_t)1);
if ((i1680 ==  (int64_t)7)) {
i1680 =  (int64_t)0;
i1679 = (i1679 +  (int64_t)1);
if ((i1679 ==  (int64_t)7)) {
i1679 =  (int64_t)0;
i1678 = (i1678 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)576, tmp847);

uint64_t* tmp851 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)576);

int64_t i1693;

int64_t i1692;

int64_t i1691;

int64_t i1690;

int64_t i1689;

int64_t i1688;

int64_t i1687;

int64_t i1686;
i1686 =  (int64_t)0;
i1687 =  (int64_t)0;
i1688 =  (int64_t)0;
i1689 =  (int64_t)0;
for (uint32_t i1690 =  (int32_t)0; i1690 <  (int32_t)1; i1690++){
for (uint32_t i1693 =  (int32_t)0; i1693 <  (int32_t)576; i1693++){
for (uint32_t i1691 =  (int32_t)0; i1691 <  (int32_t)7; i1691++){
for (uint32_t i1692 =  (int32_t)0; i1692 <  (int32_t)7; i1692++){
Arr4DIdxRowM(tmp851, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)576,i1690,i1691,i1692,i1693) = Arr4DIdxRowM(tmp849, (int32_t)1, (int32_t)576, (int32_t)7, (int32_t)7,i1686,i1687,i1688,i1689);
i1689 = (i1689 +  (int64_t)1);
if ((i1689 ==  (int64_t)7)) {
i1689 =  (int64_t)0;
i1688 = (i1688 +  (int64_t)1);
if ((i1688 ==  (int64_t)7)) {
i1688 =  (int64_t)0;
i1687 = (i1687 +  (int64_t)1);
if ((i1687 ==  (int64_t)576)) {
i1687 =  (int64_t)0;
i1686 = (i1686 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)576,  (int32_t)7,  (int32_t)7, tmp849);

uint64_t* tmp853 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)576,  (int32_t)192);

int64_t i1701;

int64_t i1700;

int64_t i1699;

int64_t i1698;

int64_t i1697;

int64_t i1696;

int64_t i1695;

int64_t i1694;
i1694 =  (int64_t)0;
i1695 =  (int64_t)0;
i1696 =  (int64_t)0;
i1697 =  (int64_t)0;
for (uint32_t i1701 =  (int32_t)0; i1701 <  (int32_t)192; i1701++){
for (uint32_t i1700 =  (int32_t)0; i1700 <  (int32_t)576; i1700++){
for (uint32_t i1698 =  (int32_t)0; i1698 <  (int32_t)1; i1698++){
for (uint32_t i1699 =  (int32_t)0; i1699 <  (int32_t)1; i1699++){
Arr4DIdxRowM(tmp853, (int32_t)1, (int32_t)1, (int32_t)576, (int32_t)192,i1698,i1699,i1700,i1701) = Arr4DIdxRowM(tmp79, (int32_t)192, (int32_t)576, (int32_t)1, (int32_t)1,i1694,i1695,i1696,i1697);
i1697 = (i1697 +  (int64_t)1);
if ((i1697 ==  (int64_t)1)) {
i1697 =  (int64_t)0;
i1696 = (i1696 +  (int64_t)1);
if ((i1696 ==  (int64_t)1)) {
i1696 =  (int64_t)0;
i1695 = (i1695 +  (int64_t)1);
if ((i1695 ==  (int64_t)576)) {
i1695 =  (int64_t)0;
i1694 = (i1694 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)192,  (int32_t)576,  (int32_t)1,  (int32_t)1, tmp79);

uint64_t* tmp855 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)576,  (int32_t)1,  (int32_t)1,  (int32_t)192,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp851, tmp853, tmp855);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)576, tmp851);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)576,  (int32_t)192, tmp853);

uint64_t* tmp858 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)192);

int64_t i1706;

int64_t i1705;

int64_t i1704;

int64_t i1703;

int64_t i1702;
i1702 =  (int64_t)0;
for (uint32_t i1703 =  (int32_t)0; i1703 <  (int32_t)1; i1703++){
for (uint32_t i1704 =  (int32_t)0; i1704 <  (int32_t)1; i1704++){
for (uint32_t i1705 =  (int32_t)0; i1705 <  (int32_t)1; i1705++){
for (uint32_t i1706 =  (int32_t)0; i1706 <  (int32_t)192; i1706++){
Arr4DIdxRowM(tmp858, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)192,i1703,i1704,i1705,i1706) = Arr1DIdxRowM(tmp80, (int32_t)192,i1702);
i1702 = (i1702 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)192, tmp80);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)192, tmp858,  kScale);

uint64_t* tmp860 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)7; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)7; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)192; i3++){
Arr4DIdxRowM(tmp860, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp855, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i0,i1,i2,i3), Arr4DIdxRowM(tmp858, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)192,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)192, tmp858);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192, tmp855);

uint64_t* tmp863 = make_array<uint64_t>( (int32_t)1,  (int32_t)192,  (int32_t)7,  (int32_t)7);

int64_t i1714;

int64_t i1713;

int64_t i1712;

int64_t i1711;

int64_t i1710;

int64_t i1709;

int64_t i1708;

int64_t i1707;
i1707 =  (int64_t)0;
i1708 =  (int64_t)0;
i1709 =  (int64_t)0;
i1710 =  (int64_t)0;
for (uint32_t i1711 =  (int32_t)0; i1711 <  (int32_t)1; i1711++){
for (uint32_t i1713 =  (int32_t)0; i1713 <  (int32_t)7; i1713++){
for (uint32_t i1714 =  (int32_t)0; i1714 <  (int32_t)7; i1714++){
for (uint32_t i1712 =  (int32_t)0; i1712 <  (int32_t)192; i1712++){
Arr4DIdxRowM(tmp863, (int32_t)1, (int32_t)192, (int32_t)7, (int32_t)7,i1711,i1712,i1713,i1714) = Arr4DIdxRowM(tmp860, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i1707,i1708,i1709,i1710);
i1710 = (i1710 +  (int64_t)1);
if ((i1710 ==  (int64_t)192)) {
i1710 =  (int64_t)0;
i1709 = (i1709 +  (int64_t)1);
if ((i1709 ==  (int64_t)7)) {
i1709 =  (int64_t)0;
i1708 = (i1708 +  (int64_t)1);
if ((i1708 ==  (int64_t)7)) {
i1708 =  (int64_t)0;
i1707 = (i1707 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192, tmp860);

uint64_t* tmp865 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192);

int64_t i1722;

int64_t i1721;

int64_t i1720;

int64_t i1719;

int64_t i1718;

int64_t i1717;

int64_t i1716;

int64_t i1715;
i1715 =  (int64_t)0;
i1716 =  (int64_t)0;
i1717 =  (int64_t)0;
i1718 =  (int64_t)0;
for (uint32_t i1719 =  (int32_t)0; i1719 <  (int32_t)1; i1719++){
for (uint32_t i1722 =  (int32_t)0; i1722 <  (int32_t)192; i1722++){
for (uint32_t i1720 =  (int32_t)0; i1720 <  (int32_t)7; i1720++){
for (uint32_t i1721 =  (int32_t)0; i1721 <  (int32_t)7; i1721++){
Arr4DIdxRowM(tmp865, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i1719,i1720,i1721,i1722) = Arr4DIdxRowM(tmp863, (int32_t)1, (int32_t)192, (int32_t)7, (int32_t)7,i1715,i1716,i1717,i1718);
i1718 = (i1718 +  (int64_t)1);
if ((i1718 ==  (int64_t)7)) {
i1718 =  (int64_t)0;
i1717 = (i1717 +  (int64_t)1);
if ((i1717 ==  (int64_t)7)) {
i1717 =  (int64_t)0;
i1716 = (i1716 +  (int64_t)1);
if ((i1716 ==  (int64_t)192)) {
i1716 =  (int64_t)0;
i1715 = (i1715 +  (int64_t)1);
}
}
}
}
}
}
}

uint64_t* tmp866 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)192,  (int32_t)1152);

int64_t i1730;

int64_t i1729;

int64_t i1728;

int64_t i1727;

int64_t i1726;

int64_t i1725;

int64_t i1724;

int64_t i1723;
i1723 =  (int64_t)0;
i1724 =  (int64_t)0;
i1725 =  (int64_t)0;
i1726 =  (int64_t)0;
for (uint32_t i1730 =  (int32_t)0; i1730 <  (int32_t)1152; i1730++){
for (uint32_t i1729 =  (int32_t)0; i1729 <  (int32_t)192; i1729++){
for (uint32_t i1727 =  (int32_t)0; i1727 <  (int32_t)1; i1727++){
for (uint32_t i1728 =  (int32_t)0; i1728 <  (int32_t)1; i1728++){
Arr4DIdxRowM(tmp866, (int32_t)1, (int32_t)1, (int32_t)192, (int32_t)1152,i1727,i1728,i1729,i1730) = Arr4DIdxRowM(tmp81, (int32_t)1152, (int32_t)192, (int32_t)1, (int32_t)1,i1723,i1724,i1725,i1726);
i1726 = (i1726 +  (int64_t)1);
if ((i1726 ==  (int64_t)1)) {
i1726 =  (int64_t)0;
i1725 = (i1725 +  (int64_t)1);
if ((i1725 ==  (int64_t)1)) {
i1725 =  (int64_t)0;
i1724 = (i1724 +  (int64_t)1);
if ((i1724 ==  (int64_t)192)) {
i1724 =  (int64_t)0;
i1723 = (i1723 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1152,  (int32_t)192,  (int32_t)1,  (int32_t)1, tmp81);

uint64_t* tmp868 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192, tmp865,  kScale);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192,  (int32_t)1,  (int32_t)1,  (int32_t)1152,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp865, tmp866, tmp868);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)192,  (int32_t)1152, tmp866);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192, tmp865);

uint64_t* tmp871 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1152);

int64_t i1735;

int64_t i1734;

int64_t i1733;

int64_t i1732;

int64_t i1731;
i1731 =  (int64_t)0;
for (uint32_t i1732 =  (int32_t)0; i1732 <  (int32_t)1; i1732++){
for (uint32_t i1733 =  (int32_t)0; i1733 <  (int32_t)1; i1733++){
for (uint32_t i1734 =  (int32_t)0; i1734 <  (int32_t)1; i1734++){
for (uint32_t i1735 =  (int32_t)0; i1735 <  (int32_t)1152; i1735++){
Arr4DIdxRowM(tmp871, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1152,i1732,i1733,i1734,i1735) = Arr1DIdxRowM(tmp82, (int32_t)1152,i1731);
i1731 = (i1731 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)1152, tmp82);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1152, tmp871,  kScale);

uint64_t* tmp873 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)7; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)7; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)1152; i3++){
Arr4DIdxRowM(tmp873, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp868, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i0,i1,i2,i3), Arr4DIdxRowM(tmp871, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1152,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp868);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1152, tmp871);

uint64_t* tmp876 = make_array<uint64_t>( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7);

int64_t i1743;

int64_t i1742;

int64_t i1741;

int64_t i1740;

int64_t i1739;

int64_t i1738;

int64_t i1737;

int64_t i1736;
i1736 =  (int64_t)0;
i1737 =  (int64_t)0;
i1738 =  (int64_t)0;
i1739 =  (int64_t)0;
for (uint32_t i1740 =  (int32_t)0; i1740 <  (int32_t)1; i1740++){
for (uint32_t i1742 =  (int32_t)0; i1742 <  (int32_t)7; i1742++){
for (uint32_t i1743 =  (int32_t)0; i1743 <  (int32_t)7; i1743++){
for (uint32_t i1741 =  (int32_t)0; i1741 <  (int32_t)1152; i1741++){
Arr4DIdxRowM(tmp876, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i1740,i1741,i1742,i1743) = Arr4DIdxRowM(tmp873, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i1736,i1737,i1738,i1739);
i1739 = (i1739 +  (int64_t)1);
if ((i1739 ==  (int64_t)1152)) {
i1739 =  (int64_t)0;
i1738 = (i1738 +  (int64_t)1);
if ((i1738 ==  (int64_t)7)) {
i1738 =  (int64_t)0;
i1737 = (i1737 +  (int64_t)1);
if ((i1737 ==  (int64_t)7)) {
i1737 =  (int64_t)0;
i1736 = (i1736 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp873);

uint64_t* tmp878 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);

int64_t i1751;

int64_t i1750;

int64_t i1749;

int64_t i1748;

int64_t i1747;

int64_t i1746;

int64_t i1745;

int64_t i1744;
i1744 =  (int64_t)0;
i1745 =  (int64_t)0;
i1746 =  (int64_t)0;
i1747 =  (int64_t)0;
for (uint32_t i1748 =  (int32_t)0; i1748 <  (int32_t)1; i1748++){
for (uint32_t i1751 =  (int32_t)0; i1751 <  (int32_t)1152; i1751++){
for (uint32_t i1749 =  (int32_t)0; i1749 <  (int32_t)7; i1749++){
for (uint32_t i1750 =  (int32_t)0; i1750 <  (int32_t)7; i1750++){
Arr4DIdxRowM(tmp878, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i1748,i1749,i1750,i1751) = Arr4DIdxRowM(tmp876, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i1744,i1745,i1746,i1747);
i1747 = (i1747 +  (int64_t)1);
if ((i1747 ==  (int64_t)7)) {
i1747 =  (int64_t)0;
i1746 = (i1746 +  (int64_t)1);
if ((i1746 ==  (int64_t)7)) {
i1746 =  (int64_t)0;
i1745 = (i1745 +  (int64_t)1);
if ((i1745 ==  (int64_t)1152)) {
i1745 =  (int64_t)0;
i1744 = (i1744 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7, tmp876);

uint64_t* tmp880 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp878, tmp880,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp878);

uint64_t* tmp882 = make_array<uint64_t>( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7);

int64_t i1759;

int64_t i1758;

int64_t i1757;

int64_t i1756;

int64_t i1755;

int64_t i1754;

int64_t i1753;

int64_t i1752;
i1752 =  (int64_t)0;
i1753 =  (int64_t)0;
i1754 =  (int64_t)0;
i1755 =  (int64_t)0;
for (uint32_t i1756 =  (int32_t)0; i1756 <  (int32_t)1; i1756++){
for (uint32_t i1758 =  (int32_t)0; i1758 <  (int32_t)7; i1758++){
for (uint32_t i1759 =  (int32_t)0; i1759 <  (int32_t)7; i1759++){
for (uint32_t i1757 =  (int32_t)0; i1757 <  (int32_t)1152; i1757++){
Arr4DIdxRowM(tmp882, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i1756,i1757,i1758,i1759) = Arr4DIdxRowM(tmp880, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i1752,i1753,i1754,i1755);
i1755 = (i1755 +  (int64_t)1);
if ((i1755 ==  (int64_t)1152)) {
i1755 =  (int64_t)0;
i1754 = (i1754 +  (int64_t)1);
if ((i1754 ==  (int64_t)7)) {
i1754 =  (int64_t)0;
i1753 = (i1753 +  (int64_t)1);
if ((i1753 ==  (int64_t)7)) {
i1753 =  (int64_t)0;
i1752 = (i1752 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp880);

uint64_t* tmp884 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);

int64_t i1767;

int64_t i1766;

int64_t i1765;

int64_t i1764;

int64_t i1763;

int64_t i1762;

int64_t i1761;

int64_t i1760;
i1760 =  (int64_t)0;
i1761 =  (int64_t)0;
i1762 =  (int64_t)0;
i1763 =  (int64_t)0;
for (uint32_t i1764 =  (int32_t)0; i1764 <  (int32_t)1; i1764++){
for (uint32_t i1767 =  (int32_t)0; i1767 <  (int32_t)1152; i1767++){
for (uint32_t i1765 =  (int32_t)0; i1765 <  (int32_t)7; i1765++){
for (uint32_t i1766 =  (int32_t)0; i1766 <  (int32_t)7; i1766++){
Arr4DIdxRowM(tmp884, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i1764,i1765,i1766,i1767) = Arr4DIdxRowM(tmp882, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i1760,i1761,i1762,i1763);
i1763 = (i1763 +  (int64_t)1);
if ((i1763 ==  (int64_t)7)) {
i1763 =  (int64_t)0;
i1762 = (i1762 +  (int64_t)1);
if ((i1762 ==  (int64_t)7)) {
i1762 =  (int64_t)0;
i1761 = (i1761 +  (int64_t)1);
if ((i1761 ==  (int64_t)1152)) {
i1761 =  (int64_t)0;
i1760 = (i1760 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7, tmp882);

uint64_t* tmp886 = make_array<uint64_t>( (int32_t)5,  (int32_t)5,  (int32_t)1,  (int32_t)1152);

int64_t i1775;

int64_t i1774;

int64_t i1773;

int64_t i1772;

int64_t i1771;

int64_t i1770;

int64_t i1769;

int64_t i1768;
i1768 =  (int64_t)0;
i1769 =  (int64_t)0;
i1770 =  (int64_t)0;
i1771 =  (int64_t)0;
for (uint32_t i1775 =  (int32_t)0; i1775 <  (int32_t)1152; i1775++){
for (uint32_t i1774 =  (int32_t)0; i1774 <  (int32_t)1; i1774++){
for (uint32_t i1772 =  (int32_t)0; i1772 <  (int32_t)5; i1772++){
for (uint32_t i1773 =  (int32_t)0; i1773 <  (int32_t)5; i1773++){
Arr4DIdxRowM(tmp886, (int32_t)5, (int32_t)5, (int32_t)1, (int32_t)1152,i1772,i1773,i1774,i1775) = Arr4DIdxRowM(tmp83, (int32_t)1152, (int32_t)1, (int32_t)5, (int32_t)5,i1768,i1769,i1770,i1771);
i1771 = (i1771 +  (int64_t)1);
if ((i1771 ==  (int64_t)5)) {
i1771 =  (int64_t)0;
i1770 = (i1770 +  (int64_t)1);
if ((i1770 ==  (int64_t)5)) {
i1770 =  (int64_t)0;
i1769 = (i1769 +  (int64_t)1);
if ((i1769 ==  (int64_t)1)) {
i1769 =  (int64_t)0;
i1768 = (i1768 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1152,  (int32_t)1,  (int32_t)5,  (int32_t)5, tmp83);

uint64_t* tmp888 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152,  (int32_t)5,  (int32_t)5,  (int32_t)1152,  (int32_t)2,  (int32_t)2,  (int32_t)2,  (int32_t)2,  (int32_t)1,  (int32_t)1,  (int32_t)1152, tmp884, tmp886, tmp888);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp884);
ClearMemSecret4( (int32_t)5,  (int32_t)5,  (int32_t)1,  (int32_t)1152, tmp886);

uint64_t* tmp891 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1152);

int64_t i1780;

int64_t i1779;

int64_t i1778;

int64_t i1777;

int64_t i1776;
i1776 =  (int64_t)0;
for (uint32_t i1777 =  (int32_t)0; i1777 <  (int32_t)1; i1777++){
for (uint32_t i1778 =  (int32_t)0; i1778 <  (int32_t)1; i1778++){
for (uint32_t i1779 =  (int32_t)0; i1779 <  (int32_t)1; i1779++){
for (uint32_t i1780 =  (int32_t)0; i1780 <  (int32_t)1152; i1780++){
Arr4DIdxRowM(tmp891, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1152,i1777,i1778,i1779,i1780) = Arr1DIdxRowM(tmp84, (int32_t)1152,i1776);
i1776 = (i1776 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)1152, tmp84);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1152, tmp891,  kScale);

uint64_t* tmp893 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)7; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)7; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)1152; i3++){
Arr4DIdxRowM(tmp893, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp888, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i0,i1,i2,i3), Arr4DIdxRowM(tmp891, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1152,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1152, tmp891);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp888);

uint64_t* tmp896 = make_array<uint64_t>( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7);

int64_t i1788;

int64_t i1787;

int64_t i1786;

int64_t i1785;

int64_t i1784;

int64_t i1783;

int64_t i1782;

int64_t i1781;
i1781 =  (int64_t)0;
i1782 =  (int64_t)0;
i1783 =  (int64_t)0;
i1784 =  (int64_t)0;
for (uint32_t i1785 =  (int32_t)0; i1785 <  (int32_t)1; i1785++){
for (uint32_t i1787 =  (int32_t)0; i1787 <  (int32_t)7; i1787++){
for (uint32_t i1788 =  (int32_t)0; i1788 <  (int32_t)7; i1788++){
for (uint32_t i1786 =  (int32_t)0; i1786 <  (int32_t)1152; i1786++){
Arr4DIdxRowM(tmp896, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i1785,i1786,i1787,i1788) = Arr4DIdxRowM(tmp893, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i1781,i1782,i1783,i1784);
i1784 = (i1784 +  (int64_t)1);
if ((i1784 ==  (int64_t)1152)) {
i1784 =  (int64_t)0;
i1783 = (i1783 +  (int64_t)1);
if ((i1783 ==  (int64_t)7)) {
i1783 =  (int64_t)0;
i1782 = (i1782 +  (int64_t)1);
if ((i1782 ==  (int64_t)7)) {
i1782 =  (int64_t)0;
i1781 = (i1781 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp893);

uint64_t* tmp898 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);

int64_t i1796;

int64_t i1795;

int64_t i1794;

int64_t i1793;

int64_t i1792;

int64_t i1791;

int64_t i1790;

int64_t i1789;
i1789 =  (int64_t)0;
i1790 =  (int64_t)0;
i1791 =  (int64_t)0;
i1792 =  (int64_t)0;
for (uint32_t i1793 =  (int32_t)0; i1793 <  (int32_t)1; i1793++){
for (uint32_t i1796 =  (int32_t)0; i1796 <  (int32_t)1152; i1796++){
for (uint32_t i1794 =  (int32_t)0; i1794 <  (int32_t)7; i1794++){
for (uint32_t i1795 =  (int32_t)0; i1795 <  (int32_t)7; i1795++){
Arr4DIdxRowM(tmp898, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i1793,i1794,i1795,i1796) = Arr4DIdxRowM(tmp896, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i1789,i1790,i1791,i1792);
i1792 = (i1792 +  (int64_t)1);
if ((i1792 ==  (int64_t)7)) {
i1792 =  (int64_t)0;
i1791 = (i1791 +  (int64_t)1);
if ((i1791 ==  (int64_t)7)) {
i1791 =  (int64_t)0;
i1790 = (i1790 +  (int64_t)1);
if ((i1790 ==  (int64_t)1152)) {
i1790 =  (int64_t)0;
i1789 = (i1789 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7, tmp896);

uint64_t* tmp900 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp898, tmp900,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp898);

uint64_t* tmp902 = make_array<uint64_t>( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7);

int64_t i1804;

int64_t i1803;

int64_t i1802;

int64_t i1801;

int64_t i1800;

int64_t i1799;

int64_t i1798;

int64_t i1797;
i1797 =  (int64_t)0;
i1798 =  (int64_t)0;
i1799 =  (int64_t)0;
i1800 =  (int64_t)0;
for (uint32_t i1801 =  (int32_t)0; i1801 <  (int32_t)1; i1801++){
for (uint32_t i1803 =  (int32_t)0; i1803 <  (int32_t)7; i1803++){
for (uint32_t i1804 =  (int32_t)0; i1804 <  (int32_t)7; i1804++){
for (uint32_t i1802 =  (int32_t)0; i1802 <  (int32_t)1152; i1802++){
Arr4DIdxRowM(tmp902, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i1801,i1802,i1803,i1804) = Arr4DIdxRowM(tmp900, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i1797,i1798,i1799,i1800);
i1800 = (i1800 +  (int64_t)1);
if ((i1800 ==  (int64_t)1152)) {
i1800 =  (int64_t)0;
i1799 = (i1799 +  (int64_t)1);
if ((i1799 ==  (int64_t)7)) {
i1799 =  (int64_t)0;
i1798 = (i1798 +  (int64_t)1);
if ((i1798 ==  (int64_t)7)) {
i1798 =  (int64_t)0;
i1797 = (i1797 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp900);

uint64_t* tmp904 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);

int64_t i1812;

int64_t i1811;

int64_t i1810;

int64_t i1809;

int64_t i1808;

int64_t i1807;

int64_t i1806;

int64_t i1805;
i1805 =  (int64_t)0;
i1806 =  (int64_t)0;
i1807 =  (int64_t)0;
i1808 =  (int64_t)0;
for (uint32_t i1809 =  (int32_t)0; i1809 <  (int32_t)1; i1809++){
for (uint32_t i1812 =  (int32_t)0; i1812 <  (int32_t)1152; i1812++){
for (uint32_t i1810 =  (int32_t)0; i1810 <  (int32_t)7; i1810++){
for (uint32_t i1811 =  (int32_t)0; i1811 <  (int32_t)7; i1811++){
Arr4DIdxRowM(tmp904, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i1809,i1810,i1811,i1812) = Arr4DIdxRowM(tmp902, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i1805,i1806,i1807,i1808);
i1808 = (i1808 +  (int64_t)1);
if ((i1808 ==  (int64_t)7)) {
i1808 =  (int64_t)0;
i1807 = (i1807 +  (int64_t)1);
if ((i1807 ==  (int64_t)7)) {
i1807 =  (int64_t)0;
i1806 = (i1806 +  (int64_t)1);
if ((i1806 ==  (int64_t)1152)) {
i1806 =  (int64_t)0;
i1805 = (i1805 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7, tmp902);

uint64_t* tmp906 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1152,  (int32_t)192);

int64_t i1820;

int64_t i1819;

int64_t i1818;

int64_t i1817;

int64_t i1816;

int64_t i1815;

int64_t i1814;

int64_t i1813;
i1813 =  (int64_t)0;
i1814 =  (int64_t)0;
i1815 =  (int64_t)0;
i1816 =  (int64_t)0;
for (uint32_t i1820 =  (int32_t)0; i1820 <  (int32_t)192; i1820++){
for (uint32_t i1819 =  (int32_t)0; i1819 <  (int32_t)1152; i1819++){
for (uint32_t i1817 =  (int32_t)0; i1817 <  (int32_t)1; i1817++){
for (uint32_t i1818 =  (int32_t)0; i1818 <  (int32_t)1; i1818++){
Arr4DIdxRowM(tmp906, (int32_t)1, (int32_t)1, (int32_t)1152, (int32_t)192,i1817,i1818,i1819,i1820) = Arr4DIdxRowM(tmp85, (int32_t)192, (int32_t)1152, (int32_t)1, (int32_t)1,i1813,i1814,i1815,i1816);
i1816 = (i1816 +  (int64_t)1);
if ((i1816 ==  (int64_t)1)) {
i1816 =  (int64_t)0;
i1815 = (i1815 +  (int64_t)1);
if ((i1815 ==  (int64_t)1)) {
i1815 =  (int64_t)0;
i1814 = (i1814 +  (int64_t)1);
if ((i1814 ==  (int64_t)1152)) {
i1814 =  (int64_t)0;
i1813 = (i1813 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)192,  (int32_t)1152,  (int32_t)1,  (int32_t)1, tmp85);

uint64_t* tmp908 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152,  (int32_t)1,  (int32_t)1,  (int32_t)192,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp904, tmp906, tmp908);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1152,  (int32_t)192, tmp906);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp904);

uint64_t* tmp911 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)192);

int64_t i1825;

int64_t i1824;

int64_t i1823;

int64_t i1822;

int64_t i1821;
i1821 =  (int64_t)0;
for (uint32_t i1822 =  (int32_t)0; i1822 <  (int32_t)1; i1822++){
for (uint32_t i1823 =  (int32_t)0; i1823 <  (int32_t)1; i1823++){
for (uint32_t i1824 =  (int32_t)0; i1824 <  (int32_t)1; i1824++){
for (uint32_t i1825 =  (int32_t)0; i1825 <  (int32_t)192; i1825++){
Arr4DIdxRowM(tmp911, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)192,i1822,i1823,i1824,i1825) = Arr1DIdxRowM(tmp86, (int32_t)192,i1821);
i1821 = (i1821 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)192, tmp86);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)192, tmp911,  kScale);

uint64_t* tmp913 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)7; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)7; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)192; i3++){
Arr4DIdxRowM(tmp913, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp908, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i0,i1,i2,i3), Arr4DIdxRowM(tmp911, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)192,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192, tmp908);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)192, tmp911);

uint64_t* tmp916 = make_array<uint64_t>( (int32_t)1,  (int32_t)192,  (int32_t)7,  (int32_t)7);

int64_t i1833;

int64_t i1832;

int64_t i1831;

int64_t i1830;

int64_t i1829;

int64_t i1828;

int64_t i1827;

int64_t i1826;
i1826 =  (int64_t)0;
i1827 =  (int64_t)0;
i1828 =  (int64_t)0;
i1829 =  (int64_t)0;
for (uint32_t i1830 =  (int32_t)0; i1830 <  (int32_t)1; i1830++){
for (uint32_t i1832 =  (int32_t)0; i1832 <  (int32_t)7; i1832++){
for (uint32_t i1833 =  (int32_t)0; i1833 <  (int32_t)7; i1833++){
for (uint32_t i1831 =  (int32_t)0; i1831 <  (int32_t)192; i1831++){
Arr4DIdxRowM(tmp916, (int32_t)1, (int32_t)192, (int32_t)7, (int32_t)7,i1830,i1831,i1832,i1833) = Arr4DIdxRowM(tmp913, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i1826,i1827,i1828,i1829);
i1829 = (i1829 +  (int64_t)1);
if ((i1829 ==  (int64_t)192)) {
i1829 =  (int64_t)0;
i1828 = (i1828 +  (int64_t)1);
if ((i1828 ==  (int64_t)7)) {
i1828 =  (int64_t)0;
i1827 = (i1827 +  (int64_t)1);
if ((i1827 ==  (int64_t)7)) {
i1827 =  (int64_t)0;
i1826 = (i1826 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192, tmp913);

uint64_t* tmp918 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192);

int64_t i1841;

int64_t i1840;

int64_t i1839;

int64_t i1838;

int64_t i1837;

int64_t i1836;

int64_t i1835;

int64_t i1834;
i1834 =  (int64_t)0;
i1835 =  (int64_t)0;
i1836 =  (int64_t)0;
i1837 =  (int64_t)0;
for (uint32_t i1838 =  (int32_t)0; i1838 <  (int32_t)1; i1838++){
for (uint32_t i1841 =  (int32_t)0; i1841 <  (int32_t)192; i1841++){
for (uint32_t i1839 =  (int32_t)0; i1839 <  (int32_t)7; i1839++){
for (uint32_t i1840 =  (int32_t)0; i1840 <  (int32_t)7; i1840++){
Arr4DIdxRowM(tmp918, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i1838,i1839,i1840,i1841) = Arr4DIdxRowM(tmp916, (int32_t)1, (int32_t)192, (int32_t)7, (int32_t)7,i1834,i1835,i1836,i1837);
i1837 = (i1837 +  (int64_t)1);
if ((i1837 ==  (int64_t)7)) {
i1837 =  (int64_t)0;
i1836 = (i1836 +  (int64_t)1);
if ((i1836 ==  (int64_t)7)) {
i1836 =  (int64_t)0;
i1835 = (i1835 +  (int64_t)1);
if ((i1835 ==  (int64_t)192)) {
i1835 =  (int64_t)0;
i1834 = (i1834 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)192,  (int32_t)7,  (int32_t)7, tmp916);

uint64_t* tmp920 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192);

int64_t i1849;

int64_t i1848;

int64_t i1847;

int64_t i1846;

int64_t i1845;

int64_t i1844;

int64_t i1843;

int64_t i1842;
i1842 =  (int64_t)0;
i1843 =  (int64_t)0;
i1844 =  (int64_t)0;
i1845 =  (int64_t)0;
for (uint32_t i1846 =  (int32_t)0; i1846 <  (int32_t)1; i1846++){
for (uint32_t i1849 =  (int32_t)0; i1849 <  (int32_t)192; i1849++){
for (uint32_t i1847 =  (int32_t)0; i1847 <  (int32_t)7; i1847++){
for (uint32_t i1848 =  (int32_t)0; i1848 <  (int32_t)7; i1848++){
Arr4DIdxRowM(tmp920, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i1846,i1847,i1848,i1849) = Arr4DIdxRowM(tmp863, (int32_t)1, (int32_t)192, (int32_t)7, (int32_t)7,i1842,i1843,i1844,i1845);
i1845 = (i1845 +  (int64_t)1);
if ((i1845 ==  (int64_t)7)) {
i1845 =  (int64_t)0;
i1844 = (i1844 +  (int64_t)1);
if ((i1844 ==  (int64_t)7)) {
i1844 =  (int64_t)0;
i1843 = (i1843 +  (int64_t)1);
if ((i1843 ==  (int64_t)192)) {
i1843 =  (int64_t)0;
i1842 = (i1842 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)192,  (int32_t)7,  (int32_t)7, tmp863);

uint64_t* tmp922 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)7; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)7; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)192; i3++){
Arr4DIdxRowM(tmp922, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp918, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i0,i1,i2,i3), Arr4DIdxRowM(tmp920, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i0,i1,i2,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192, tmp918);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192, tmp920);

uint64_t* tmp925 = make_array<uint64_t>( (int32_t)1,  (int32_t)192,  (int32_t)7,  (int32_t)7);

int64_t i1857;

int64_t i1856;

int64_t i1855;

int64_t i1854;

int64_t i1853;

int64_t i1852;

int64_t i1851;

int64_t i1850;
i1850 =  (int64_t)0;
i1851 =  (int64_t)0;
i1852 =  (int64_t)0;
i1853 =  (int64_t)0;
for (uint32_t i1854 =  (int32_t)0; i1854 <  (int32_t)1; i1854++){
for (uint32_t i1856 =  (int32_t)0; i1856 <  (int32_t)7; i1856++){
for (uint32_t i1857 =  (int32_t)0; i1857 <  (int32_t)7; i1857++){
for (uint32_t i1855 =  (int32_t)0; i1855 <  (int32_t)192; i1855++){
Arr4DIdxRowM(tmp925, (int32_t)1, (int32_t)192, (int32_t)7, (int32_t)7,i1854,i1855,i1856,i1857) = Arr4DIdxRowM(tmp922, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i1850,i1851,i1852,i1853);
i1853 = (i1853 +  (int64_t)1);
if ((i1853 ==  (int64_t)192)) {
i1853 =  (int64_t)0;
i1852 = (i1852 +  (int64_t)1);
if ((i1852 ==  (int64_t)7)) {
i1852 =  (int64_t)0;
i1851 = (i1851 +  (int64_t)1);
if ((i1851 ==  (int64_t)7)) {
i1851 =  (int64_t)0;
i1850 = (i1850 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192, tmp922);

uint64_t* tmp927 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192);

int64_t i1865;

int64_t i1864;

int64_t i1863;

int64_t i1862;

int64_t i1861;

int64_t i1860;

int64_t i1859;

int64_t i1858;
i1858 =  (int64_t)0;
i1859 =  (int64_t)0;
i1860 =  (int64_t)0;
i1861 =  (int64_t)0;
for (uint32_t i1862 =  (int32_t)0; i1862 <  (int32_t)1; i1862++){
for (uint32_t i1865 =  (int32_t)0; i1865 <  (int32_t)192; i1865++){
for (uint32_t i1863 =  (int32_t)0; i1863 <  (int32_t)7; i1863++){
for (uint32_t i1864 =  (int32_t)0; i1864 <  (int32_t)7; i1864++){
Arr4DIdxRowM(tmp927, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i1862,i1863,i1864,i1865) = Arr4DIdxRowM(tmp925, (int32_t)1, (int32_t)192, (int32_t)7, (int32_t)7,i1858,i1859,i1860,i1861);
i1861 = (i1861 +  (int64_t)1);
if ((i1861 ==  (int64_t)7)) {
i1861 =  (int64_t)0;
i1860 = (i1860 +  (int64_t)1);
if ((i1860 ==  (int64_t)7)) {
i1860 =  (int64_t)0;
i1859 = (i1859 +  (int64_t)1);
if ((i1859 ==  (int64_t)192)) {
i1859 =  (int64_t)0;
i1858 = (i1858 +  (int64_t)1);
}
}
}
}
}
}
}

uint64_t* tmp928 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)192,  (int32_t)1152);

int64_t i1873;

int64_t i1872;

int64_t i1871;

int64_t i1870;

int64_t i1869;

int64_t i1868;

int64_t i1867;

int64_t i1866;
i1866 =  (int64_t)0;
i1867 =  (int64_t)0;
i1868 =  (int64_t)0;
i1869 =  (int64_t)0;
for (uint32_t i1873 =  (int32_t)0; i1873 <  (int32_t)1152; i1873++){
for (uint32_t i1872 =  (int32_t)0; i1872 <  (int32_t)192; i1872++){
for (uint32_t i1870 =  (int32_t)0; i1870 <  (int32_t)1; i1870++){
for (uint32_t i1871 =  (int32_t)0; i1871 <  (int32_t)1; i1871++){
Arr4DIdxRowM(tmp928, (int32_t)1, (int32_t)1, (int32_t)192, (int32_t)1152,i1870,i1871,i1872,i1873) = Arr4DIdxRowM(tmp87, (int32_t)1152, (int32_t)192, (int32_t)1, (int32_t)1,i1866,i1867,i1868,i1869);
i1869 = (i1869 +  (int64_t)1);
if ((i1869 ==  (int64_t)1)) {
i1869 =  (int64_t)0;
i1868 = (i1868 +  (int64_t)1);
if ((i1868 ==  (int64_t)1)) {
i1868 =  (int64_t)0;
i1867 = (i1867 +  (int64_t)1);
if ((i1867 ==  (int64_t)192)) {
i1867 =  (int64_t)0;
i1866 = (i1866 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1152,  (int32_t)192,  (int32_t)1,  (int32_t)1, tmp87);

uint64_t* tmp930 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192, tmp927,  kScale);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192,  (int32_t)1,  (int32_t)1,  (int32_t)1152,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp927, tmp928, tmp930);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192, tmp927);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)192,  (int32_t)1152, tmp928);

uint64_t* tmp933 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1152);

int64_t i1878;

int64_t i1877;

int64_t i1876;

int64_t i1875;

int64_t i1874;
i1874 =  (int64_t)0;
for (uint32_t i1875 =  (int32_t)0; i1875 <  (int32_t)1; i1875++){
for (uint32_t i1876 =  (int32_t)0; i1876 <  (int32_t)1; i1876++){
for (uint32_t i1877 =  (int32_t)0; i1877 <  (int32_t)1; i1877++){
for (uint32_t i1878 =  (int32_t)0; i1878 <  (int32_t)1152; i1878++){
Arr4DIdxRowM(tmp933, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1152,i1875,i1876,i1877,i1878) = Arr1DIdxRowM(tmp88, (int32_t)1152,i1874);
i1874 = (i1874 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)1152, tmp88);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1152, tmp933,  kScale);

uint64_t* tmp935 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)7; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)7; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)1152; i3++){
Arr4DIdxRowM(tmp935, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp930, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i0,i1,i2,i3), Arr4DIdxRowM(tmp933, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1152,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1152, tmp933);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp930);

uint64_t* tmp938 = make_array<uint64_t>( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7);

int64_t i1886;

int64_t i1885;

int64_t i1884;

int64_t i1883;

int64_t i1882;

int64_t i1881;

int64_t i1880;

int64_t i1879;
i1879 =  (int64_t)0;
i1880 =  (int64_t)0;
i1881 =  (int64_t)0;
i1882 =  (int64_t)0;
for (uint32_t i1883 =  (int32_t)0; i1883 <  (int32_t)1; i1883++){
for (uint32_t i1885 =  (int32_t)0; i1885 <  (int32_t)7; i1885++){
for (uint32_t i1886 =  (int32_t)0; i1886 <  (int32_t)7; i1886++){
for (uint32_t i1884 =  (int32_t)0; i1884 <  (int32_t)1152; i1884++){
Arr4DIdxRowM(tmp938, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i1883,i1884,i1885,i1886) = Arr4DIdxRowM(tmp935, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i1879,i1880,i1881,i1882);
i1882 = (i1882 +  (int64_t)1);
if ((i1882 ==  (int64_t)1152)) {
i1882 =  (int64_t)0;
i1881 = (i1881 +  (int64_t)1);
if ((i1881 ==  (int64_t)7)) {
i1881 =  (int64_t)0;
i1880 = (i1880 +  (int64_t)1);
if ((i1880 ==  (int64_t)7)) {
i1880 =  (int64_t)0;
i1879 = (i1879 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp935);

uint64_t* tmp940 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);

int64_t i1894;

int64_t i1893;

int64_t i1892;

int64_t i1891;

int64_t i1890;

int64_t i1889;

int64_t i1888;

int64_t i1887;
i1887 =  (int64_t)0;
i1888 =  (int64_t)0;
i1889 =  (int64_t)0;
i1890 =  (int64_t)0;
for (uint32_t i1891 =  (int32_t)0; i1891 <  (int32_t)1; i1891++){
for (uint32_t i1894 =  (int32_t)0; i1894 <  (int32_t)1152; i1894++){
for (uint32_t i1892 =  (int32_t)0; i1892 <  (int32_t)7; i1892++){
for (uint32_t i1893 =  (int32_t)0; i1893 <  (int32_t)7; i1893++){
Arr4DIdxRowM(tmp940, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i1891,i1892,i1893,i1894) = Arr4DIdxRowM(tmp938, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i1887,i1888,i1889,i1890);
i1890 = (i1890 +  (int64_t)1);
if ((i1890 ==  (int64_t)7)) {
i1890 =  (int64_t)0;
i1889 = (i1889 +  (int64_t)1);
if ((i1889 ==  (int64_t)7)) {
i1889 =  (int64_t)0;
i1888 = (i1888 +  (int64_t)1);
if ((i1888 ==  (int64_t)1152)) {
i1888 =  (int64_t)0;
i1887 = (i1887 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7, tmp938);

uint64_t* tmp942 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp940, tmp942,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp940);

uint64_t* tmp944 = make_array<uint64_t>( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7);

int64_t i1902;

int64_t i1901;

int64_t i1900;

int64_t i1899;

int64_t i1898;

int64_t i1897;

int64_t i1896;

int64_t i1895;
i1895 =  (int64_t)0;
i1896 =  (int64_t)0;
i1897 =  (int64_t)0;
i1898 =  (int64_t)0;
for (uint32_t i1899 =  (int32_t)0; i1899 <  (int32_t)1; i1899++){
for (uint32_t i1901 =  (int32_t)0; i1901 <  (int32_t)7; i1901++){
for (uint32_t i1902 =  (int32_t)0; i1902 <  (int32_t)7; i1902++){
for (uint32_t i1900 =  (int32_t)0; i1900 <  (int32_t)1152; i1900++){
Arr4DIdxRowM(tmp944, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i1899,i1900,i1901,i1902) = Arr4DIdxRowM(tmp942, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i1895,i1896,i1897,i1898);
i1898 = (i1898 +  (int64_t)1);
if ((i1898 ==  (int64_t)1152)) {
i1898 =  (int64_t)0;
i1897 = (i1897 +  (int64_t)1);
if ((i1897 ==  (int64_t)7)) {
i1897 =  (int64_t)0;
i1896 = (i1896 +  (int64_t)1);
if ((i1896 ==  (int64_t)7)) {
i1896 =  (int64_t)0;
i1895 = (i1895 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp942);

uint64_t* tmp946 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);

int64_t i1910;

int64_t i1909;

int64_t i1908;

int64_t i1907;

int64_t i1906;

int64_t i1905;

int64_t i1904;

int64_t i1903;
i1903 =  (int64_t)0;
i1904 =  (int64_t)0;
i1905 =  (int64_t)0;
i1906 =  (int64_t)0;
for (uint32_t i1907 =  (int32_t)0; i1907 <  (int32_t)1; i1907++){
for (uint32_t i1910 =  (int32_t)0; i1910 <  (int32_t)1152; i1910++){
for (uint32_t i1908 =  (int32_t)0; i1908 <  (int32_t)7; i1908++){
for (uint32_t i1909 =  (int32_t)0; i1909 <  (int32_t)7; i1909++){
Arr4DIdxRowM(tmp946, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i1907,i1908,i1909,i1910) = Arr4DIdxRowM(tmp944, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i1903,i1904,i1905,i1906);
i1906 = (i1906 +  (int64_t)1);
if ((i1906 ==  (int64_t)7)) {
i1906 =  (int64_t)0;
i1905 = (i1905 +  (int64_t)1);
if ((i1905 ==  (int64_t)7)) {
i1905 =  (int64_t)0;
i1904 = (i1904 +  (int64_t)1);
if ((i1904 ==  (int64_t)1152)) {
i1904 =  (int64_t)0;
i1903 = (i1903 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7, tmp944);

uint64_t* tmp948 = make_array<uint64_t>( (int32_t)5,  (int32_t)5,  (int32_t)1,  (int32_t)1152);

int64_t i1918;

int64_t i1917;

int64_t i1916;

int64_t i1915;

int64_t i1914;

int64_t i1913;

int64_t i1912;

int64_t i1911;
i1911 =  (int64_t)0;
i1912 =  (int64_t)0;
i1913 =  (int64_t)0;
i1914 =  (int64_t)0;
for (uint32_t i1918 =  (int32_t)0; i1918 <  (int32_t)1152; i1918++){
for (uint32_t i1917 =  (int32_t)0; i1917 <  (int32_t)1; i1917++){
for (uint32_t i1915 =  (int32_t)0; i1915 <  (int32_t)5; i1915++){
for (uint32_t i1916 =  (int32_t)0; i1916 <  (int32_t)5; i1916++){
Arr4DIdxRowM(tmp948, (int32_t)5, (int32_t)5, (int32_t)1, (int32_t)1152,i1915,i1916,i1917,i1918) = Arr4DIdxRowM(tmp89, (int32_t)1152, (int32_t)1, (int32_t)5, (int32_t)5,i1911,i1912,i1913,i1914);
i1914 = (i1914 +  (int64_t)1);
if ((i1914 ==  (int64_t)5)) {
i1914 =  (int64_t)0;
i1913 = (i1913 +  (int64_t)1);
if ((i1913 ==  (int64_t)5)) {
i1913 =  (int64_t)0;
i1912 = (i1912 +  (int64_t)1);
if ((i1912 ==  (int64_t)1)) {
i1912 =  (int64_t)0;
i1911 = (i1911 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1152,  (int32_t)1,  (int32_t)5,  (int32_t)5, tmp89);

uint64_t* tmp950 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152,  (int32_t)5,  (int32_t)5,  (int32_t)1152,  (int32_t)2,  (int32_t)2,  (int32_t)2,  (int32_t)2,  (int32_t)1,  (int32_t)1,  (int32_t)1152, tmp946, tmp948, tmp950);
ClearMemSecret4( (int32_t)5,  (int32_t)5,  (int32_t)1,  (int32_t)1152, tmp948);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp946);

uint64_t* tmp953 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1152);

int64_t i1923;

int64_t i1922;

int64_t i1921;

int64_t i1920;

int64_t i1919;
i1919 =  (int64_t)0;
for (uint32_t i1920 =  (int32_t)0; i1920 <  (int32_t)1; i1920++){
for (uint32_t i1921 =  (int32_t)0; i1921 <  (int32_t)1; i1921++){
for (uint32_t i1922 =  (int32_t)0; i1922 <  (int32_t)1; i1922++){
for (uint32_t i1923 =  (int32_t)0; i1923 <  (int32_t)1152; i1923++){
Arr4DIdxRowM(tmp953, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1152,i1920,i1921,i1922,i1923) = Arr1DIdxRowM(tmp90, (int32_t)1152,i1919);
i1919 = (i1919 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)1152, tmp90);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1152, tmp953,  kScale);

uint64_t* tmp955 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)7; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)7; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)1152; i3++){
Arr4DIdxRowM(tmp955, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp950, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i0,i1,i2,i3), Arr4DIdxRowM(tmp953, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1152,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1152, tmp953);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp950);

uint64_t* tmp958 = make_array<uint64_t>( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7);

int64_t i1931;

int64_t i1930;

int64_t i1929;

int64_t i1928;

int64_t i1927;

int64_t i1926;

int64_t i1925;

int64_t i1924;
i1924 =  (int64_t)0;
i1925 =  (int64_t)0;
i1926 =  (int64_t)0;
i1927 =  (int64_t)0;
for (uint32_t i1928 =  (int32_t)0; i1928 <  (int32_t)1; i1928++){
for (uint32_t i1930 =  (int32_t)0; i1930 <  (int32_t)7; i1930++){
for (uint32_t i1931 =  (int32_t)0; i1931 <  (int32_t)7; i1931++){
for (uint32_t i1929 =  (int32_t)0; i1929 <  (int32_t)1152; i1929++){
Arr4DIdxRowM(tmp958, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i1928,i1929,i1930,i1931) = Arr4DIdxRowM(tmp955, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i1924,i1925,i1926,i1927);
i1927 = (i1927 +  (int64_t)1);
if ((i1927 ==  (int64_t)1152)) {
i1927 =  (int64_t)0;
i1926 = (i1926 +  (int64_t)1);
if ((i1926 ==  (int64_t)7)) {
i1926 =  (int64_t)0;
i1925 = (i1925 +  (int64_t)1);
if ((i1925 ==  (int64_t)7)) {
i1925 =  (int64_t)0;
i1924 = (i1924 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp955);

uint64_t* tmp960 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);

int64_t i1939;

int64_t i1938;

int64_t i1937;

int64_t i1936;

int64_t i1935;

int64_t i1934;

int64_t i1933;

int64_t i1932;
i1932 =  (int64_t)0;
i1933 =  (int64_t)0;
i1934 =  (int64_t)0;
i1935 =  (int64_t)0;
for (uint32_t i1936 =  (int32_t)0; i1936 <  (int32_t)1; i1936++){
for (uint32_t i1939 =  (int32_t)0; i1939 <  (int32_t)1152; i1939++){
for (uint32_t i1937 =  (int32_t)0; i1937 <  (int32_t)7; i1937++){
for (uint32_t i1938 =  (int32_t)0; i1938 <  (int32_t)7; i1938++){
Arr4DIdxRowM(tmp960, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i1936,i1937,i1938,i1939) = Arr4DIdxRowM(tmp958, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i1932,i1933,i1934,i1935);
i1935 = (i1935 +  (int64_t)1);
if ((i1935 ==  (int64_t)7)) {
i1935 =  (int64_t)0;
i1934 = (i1934 +  (int64_t)1);
if ((i1934 ==  (int64_t)7)) {
i1934 =  (int64_t)0;
i1933 = (i1933 +  (int64_t)1);
if ((i1933 ==  (int64_t)1152)) {
i1933 =  (int64_t)0;
i1932 = (i1932 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7, tmp958);

uint64_t* tmp962 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp960, tmp962,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp960);

uint64_t* tmp964 = make_array<uint64_t>( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7);

int64_t i1947;

int64_t i1946;

int64_t i1945;

int64_t i1944;

int64_t i1943;

int64_t i1942;

int64_t i1941;

int64_t i1940;
i1940 =  (int64_t)0;
i1941 =  (int64_t)0;
i1942 =  (int64_t)0;
i1943 =  (int64_t)0;
for (uint32_t i1944 =  (int32_t)0; i1944 <  (int32_t)1; i1944++){
for (uint32_t i1946 =  (int32_t)0; i1946 <  (int32_t)7; i1946++){
for (uint32_t i1947 =  (int32_t)0; i1947 <  (int32_t)7; i1947++){
for (uint32_t i1945 =  (int32_t)0; i1945 <  (int32_t)1152; i1945++){
Arr4DIdxRowM(tmp964, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i1944,i1945,i1946,i1947) = Arr4DIdxRowM(tmp962, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i1940,i1941,i1942,i1943);
i1943 = (i1943 +  (int64_t)1);
if ((i1943 ==  (int64_t)1152)) {
i1943 =  (int64_t)0;
i1942 = (i1942 +  (int64_t)1);
if ((i1942 ==  (int64_t)7)) {
i1942 =  (int64_t)0;
i1941 = (i1941 +  (int64_t)1);
if ((i1941 ==  (int64_t)7)) {
i1941 =  (int64_t)0;
i1940 = (i1940 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp962);

uint64_t* tmp966 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);

int64_t i1955;

int64_t i1954;

int64_t i1953;

int64_t i1952;

int64_t i1951;

int64_t i1950;

int64_t i1949;

int64_t i1948;
i1948 =  (int64_t)0;
i1949 =  (int64_t)0;
i1950 =  (int64_t)0;
i1951 =  (int64_t)0;
for (uint32_t i1952 =  (int32_t)0; i1952 <  (int32_t)1; i1952++){
for (uint32_t i1955 =  (int32_t)0; i1955 <  (int32_t)1152; i1955++){
for (uint32_t i1953 =  (int32_t)0; i1953 <  (int32_t)7; i1953++){
for (uint32_t i1954 =  (int32_t)0; i1954 <  (int32_t)7; i1954++){
Arr4DIdxRowM(tmp966, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i1952,i1953,i1954,i1955) = Arr4DIdxRowM(tmp964, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i1948,i1949,i1950,i1951);
i1951 = (i1951 +  (int64_t)1);
if ((i1951 ==  (int64_t)7)) {
i1951 =  (int64_t)0;
i1950 = (i1950 +  (int64_t)1);
if ((i1950 ==  (int64_t)7)) {
i1950 =  (int64_t)0;
i1949 = (i1949 +  (int64_t)1);
if ((i1949 ==  (int64_t)1152)) {
i1949 =  (int64_t)0;
i1948 = (i1948 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7, tmp964);

uint64_t* tmp968 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1152,  (int32_t)192);

int64_t i1963;

int64_t i1962;

int64_t i1961;

int64_t i1960;

int64_t i1959;

int64_t i1958;

int64_t i1957;

int64_t i1956;
i1956 =  (int64_t)0;
i1957 =  (int64_t)0;
i1958 =  (int64_t)0;
i1959 =  (int64_t)0;
for (uint32_t i1963 =  (int32_t)0; i1963 <  (int32_t)192; i1963++){
for (uint32_t i1962 =  (int32_t)0; i1962 <  (int32_t)1152; i1962++){
for (uint32_t i1960 =  (int32_t)0; i1960 <  (int32_t)1; i1960++){
for (uint32_t i1961 =  (int32_t)0; i1961 <  (int32_t)1; i1961++){
Arr4DIdxRowM(tmp968, (int32_t)1, (int32_t)1, (int32_t)1152, (int32_t)192,i1960,i1961,i1962,i1963) = Arr4DIdxRowM(tmp91, (int32_t)192, (int32_t)1152, (int32_t)1, (int32_t)1,i1956,i1957,i1958,i1959);
i1959 = (i1959 +  (int64_t)1);
if ((i1959 ==  (int64_t)1)) {
i1959 =  (int64_t)0;
i1958 = (i1958 +  (int64_t)1);
if ((i1958 ==  (int64_t)1)) {
i1958 =  (int64_t)0;
i1957 = (i1957 +  (int64_t)1);
if ((i1957 ==  (int64_t)1152)) {
i1957 =  (int64_t)0;
i1956 = (i1956 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)192,  (int32_t)1152,  (int32_t)1,  (int32_t)1, tmp91);

uint64_t* tmp970 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152,  (int32_t)1,  (int32_t)1,  (int32_t)192,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp966, tmp968, tmp970);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1152,  (int32_t)192, tmp968);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp966);

uint64_t* tmp973 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)192);

int64_t i1968;

int64_t i1967;

int64_t i1966;

int64_t i1965;

int64_t i1964;
i1964 =  (int64_t)0;
for (uint32_t i1965 =  (int32_t)0; i1965 <  (int32_t)1; i1965++){
for (uint32_t i1966 =  (int32_t)0; i1966 <  (int32_t)1; i1966++){
for (uint32_t i1967 =  (int32_t)0; i1967 <  (int32_t)1; i1967++){
for (uint32_t i1968 =  (int32_t)0; i1968 <  (int32_t)192; i1968++){
Arr4DIdxRowM(tmp973, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)192,i1965,i1966,i1967,i1968) = Arr1DIdxRowM(tmp92, (int32_t)192,i1964);
i1964 = (i1964 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)192, tmp92);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)192, tmp973,  kScale);

uint64_t* tmp975 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)7; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)7; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)192; i3++){
Arr4DIdxRowM(tmp975, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp970, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i0,i1,i2,i3), Arr4DIdxRowM(tmp973, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)192,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)192, tmp973);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192, tmp970);

uint64_t* tmp978 = make_array<uint64_t>( (int32_t)1,  (int32_t)192,  (int32_t)7,  (int32_t)7);

int64_t i1976;

int64_t i1975;

int64_t i1974;

int64_t i1973;

int64_t i1972;

int64_t i1971;

int64_t i1970;

int64_t i1969;
i1969 =  (int64_t)0;
i1970 =  (int64_t)0;
i1971 =  (int64_t)0;
i1972 =  (int64_t)0;
for (uint32_t i1973 =  (int32_t)0; i1973 <  (int32_t)1; i1973++){
for (uint32_t i1975 =  (int32_t)0; i1975 <  (int32_t)7; i1975++){
for (uint32_t i1976 =  (int32_t)0; i1976 <  (int32_t)7; i1976++){
for (uint32_t i1974 =  (int32_t)0; i1974 <  (int32_t)192; i1974++){
Arr4DIdxRowM(tmp978, (int32_t)1, (int32_t)192, (int32_t)7, (int32_t)7,i1973,i1974,i1975,i1976) = Arr4DIdxRowM(tmp975, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i1969,i1970,i1971,i1972);
i1972 = (i1972 +  (int64_t)1);
if ((i1972 ==  (int64_t)192)) {
i1972 =  (int64_t)0;
i1971 = (i1971 +  (int64_t)1);
if ((i1971 ==  (int64_t)7)) {
i1971 =  (int64_t)0;
i1970 = (i1970 +  (int64_t)1);
if ((i1970 ==  (int64_t)7)) {
i1970 =  (int64_t)0;
i1969 = (i1969 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192, tmp975);

uint64_t* tmp980 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192);

int64_t i1984;

int64_t i1983;

int64_t i1982;

int64_t i1981;

int64_t i1980;

int64_t i1979;

int64_t i1978;

int64_t i1977;
i1977 =  (int64_t)0;
i1978 =  (int64_t)0;
i1979 =  (int64_t)0;
i1980 =  (int64_t)0;
for (uint32_t i1981 =  (int32_t)0; i1981 <  (int32_t)1; i1981++){
for (uint32_t i1984 =  (int32_t)0; i1984 <  (int32_t)192; i1984++){
for (uint32_t i1982 =  (int32_t)0; i1982 <  (int32_t)7; i1982++){
for (uint32_t i1983 =  (int32_t)0; i1983 <  (int32_t)7; i1983++){
Arr4DIdxRowM(tmp980, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i1981,i1982,i1983,i1984) = Arr4DIdxRowM(tmp978, (int32_t)1, (int32_t)192, (int32_t)7, (int32_t)7,i1977,i1978,i1979,i1980);
i1980 = (i1980 +  (int64_t)1);
if ((i1980 ==  (int64_t)7)) {
i1980 =  (int64_t)0;
i1979 = (i1979 +  (int64_t)1);
if ((i1979 ==  (int64_t)7)) {
i1979 =  (int64_t)0;
i1978 = (i1978 +  (int64_t)1);
if ((i1978 ==  (int64_t)192)) {
i1978 =  (int64_t)0;
i1977 = (i1977 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)192,  (int32_t)7,  (int32_t)7, tmp978);

uint64_t* tmp982 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192);

int64_t i1992;

int64_t i1991;

int64_t i1990;

int64_t i1989;

int64_t i1988;

int64_t i1987;

int64_t i1986;

int64_t i1985;
i1985 =  (int64_t)0;
i1986 =  (int64_t)0;
i1987 =  (int64_t)0;
i1988 =  (int64_t)0;
for (uint32_t i1989 =  (int32_t)0; i1989 <  (int32_t)1; i1989++){
for (uint32_t i1992 =  (int32_t)0; i1992 <  (int32_t)192; i1992++){
for (uint32_t i1990 =  (int32_t)0; i1990 <  (int32_t)7; i1990++){
for (uint32_t i1991 =  (int32_t)0; i1991 <  (int32_t)7; i1991++){
Arr4DIdxRowM(tmp982, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i1989,i1990,i1991,i1992) = Arr4DIdxRowM(tmp925, (int32_t)1, (int32_t)192, (int32_t)7, (int32_t)7,i1985,i1986,i1987,i1988);
i1988 = (i1988 +  (int64_t)1);
if ((i1988 ==  (int64_t)7)) {
i1988 =  (int64_t)0;
i1987 = (i1987 +  (int64_t)1);
if ((i1987 ==  (int64_t)7)) {
i1987 =  (int64_t)0;
i1986 = (i1986 +  (int64_t)1);
if ((i1986 ==  (int64_t)192)) {
i1986 =  (int64_t)0;
i1985 = (i1985 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)192,  (int32_t)7,  (int32_t)7, tmp925);

uint64_t* tmp984 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)7; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)7; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)192; i3++){
Arr4DIdxRowM(tmp984, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp980, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i0,i1,i2,i3), Arr4DIdxRowM(tmp982, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i0,i1,i2,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192, tmp980);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192, tmp982);

uint64_t* tmp987 = make_array<uint64_t>( (int32_t)1,  (int32_t)192,  (int32_t)7,  (int32_t)7);

int64_t i2000;

int64_t i1999;

int64_t i1998;

int64_t i1997;

int64_t i1996;

int64_t i1995;

int64_t i1994;

int64_t i1993;
i1993 =  (int64_t)0;
i1994 =  (int64_t)0;
i1995 =  (int64_t)0;
i1996 =  (int64_t)0;
for (uint32_t i1997 =  (int32_t)0; i1997 <  (int32_t)1; i1997++){
for (uint32_t i1999 =  (int32_t)0; i1999 <  (int32_t)7; i1999++){
for (uint32_t i2000 =  (int32_t)0; i2000 <  (int32_t)7; i2000++){
for (uint32_t i1998 =  (int32_t)0; i1998 <  (int32_t)192; i1998++){
Arr4DIdxRowM(tmp987, (int32_t)1, (int32_t)192, (int32_t)7, (int32_t)7,i1997,i1998,i1999,i2000) = Arr4DIdxRowM(tmp984, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i1993,i1994,i1995,i1996);
i1996 = (i1996 +  (int64_t)1);
if ((i1996 ==  (int64_t)192)) {
i1996 =  (int64_t)0;
i1995 = (i1995 +  (int64_t)1);
if ((i1995 ==  (int64_t)7)) {
i1995 =  (int64_t)0;
i1994 = (i1994 +  (int64_t)1);
if ((i1994 ==  (int64_t)7)) {
i1994 =  (int64_t)0;
i1993 = (i1993 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192, tmp984);

uint64_t* tmp989 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192);

int64_t i2008;

int64_t i2007;

int64_t i2006;

int64_t i2005;

int64_t i2004;

int64_t i2003;

int64_t i2002;

int64_t i2001;
i2001 =  (int64_t)0;
i2002 =  (int64_t)0;
i2003 =  (int64_t)0;
i2004 =  (int64_t)0;
for (uint32_t i2005 =  (int32_t)0; i2005 <  (int32_t)1; i2005++){
for (uint32_t i2008 =  (int32_t)0; i2008 <  (int32_t)192; i2008++){
for (uint32_t i2006 =  (int32_t)0; i2006 <  (int32_t)7; i2006++){
for (uint32_t i2007 =  (int32_t)0; i2007 <  (int32_t)7; i2007++){
Arr4DIdxRowM(tmp989, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i2005,i2006,i2007,i2008) = Arr4DIdxRowM(tmp987, (int32_t)1, (int32_t)192, (int32_t)7, (int32_t)7,i2001,i2002,i2003,i2004);
i2004 = (i2004 +  (int64_t)1);
if ((i2004 ==  (int64_t)7)) {
i2004 =  (int64_t)0;
i2003 = (i2003 +  (int64_t)1);
if ((i2003 ==  (int64_t)7)) {
i2003 =  (int64_t)0;
i2002 = (i2002 +  (int64_t)1);
if ((i2002 ==  (int64_t)192)) {
i2002 =  (int64_t)0;
i2001 = (i2001 +  (int64_t)1);
}
}
}
}
}
}
}

uint64_t* tmp990 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)192,  (int32_t)1152);

int64_t i2016;

int64_t i2015;

int64_t i2014;

int64_t i2013;

int64_t i2012;

int64_t i2011;

int64_t i2010;

int64_t i2009;
i2009 =  (int64_t)0;
i2010 =  (int64_t)0;
i2011 =  (int64_t)0;
i2012 =  (int64_t)0;
for (uint32_t i2016 =  (int32_t)0; i2016 <  (int32_t)1152; i2016++){
for (uint32_t i2015 =  (int32_t)0; i2015 <  (int32_t)192; i2015++){
for (uint32_t i2013 =  (int32_t)0; i2013 <  (int32_t)1; i2013++){
for (uint32_t i2014 =  (int32_t)0; i2014 <  (int32_t)1; i2014++){
Arr4DIdxRowM(tmp990, (int32_t)1, (int32_t)1, (int32_t)192, (int32_t)1152,i2013,i2014,i2015,i2016) = Arr4DIdxRowM(tmp93, (int32_t)1152, (int32_t)192, (int32_t)1, (int32_t)1,i2009,i2010,i2011,i2012);
i2012 = (i2012 +  (int64_t)1);
if ((i2012 ==  (int64_t)1)) {
i2012 =  (int64_t)0;
i2011 = (i2011 +  (int64_t)1);
if ((i2011 ==  (int64_t)1)) {
i2011 =  (int64_t)0;
i2010 = (i2010 +  (int64_t)1);
if ((i2010 ==  (int64_t)192)) {
i2010 =  (int64_t)0;
i2009 = (i2009 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1152,  (int32_t)192,  (int32_t)1,  (int32_t)1, tmp93);

uint64_t* tmp992 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192, tmp989,  kScale);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192,  (int32_t)1,  (int32_t)1,  (int32_t)1152,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp989, tmp990, tmp992);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192, tmp989);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)192,  (int32_t)1152, tmp990);

uint64_t* tmp995 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1152);

int64_t i2021;

int64_t i2020;

int64_t i2019;

int64_t i2018;

int64_t i2017;
i2017 =  (int64_t)0;
for (uint32_t i2018 =  (int32_t)0; i2018 <  (int32_t)1; i2018++){
for (uint32_t i2019 =  (int32_t)0; i2019 <  (int32_t)1; i2019++){
for (uint32_t i2020 =  (int32_t)0; i2020 <  (int32_t)1; i2020++){
for (uint32_t i2021 =  (int32_t)0; i2021 <  (int32_t)1152; i2021++){
Arr4DIdxRowM(tmp995, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1152,i2018,i2019,i2020,i2021) = Arr1DIdxRowM(tmp94, (int32_t)1152,i2017);
i2017 = (i2017 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)1152, tmp94);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1152, tmp995,  kScale);

uint64_t* tmp997 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)7; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)7; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)1152; i3++){
Arr4DIdxRowM(tmp997, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp992, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i0,i1,i2,i3), Arr4DIdxRowM(tmp995, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1152,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1152, tmp995);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp992);

uint64_t* tmp1000 = make_array<uint64_t>( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7);

int64_t i2029;

int64_t i2028;

int64_t i2027;

int64_t i2026;

int64_t i2025;

int64_t i2024;

int64_t i2023;

int64_t i2022;
i2022 =  (int64_t)0;
i2023 =  (int64_t)0;
i2024 =  (int64_t)0;
i2025 =  (int64_t)0;
for (uint32_t i2026 =  (int32_t)0; i2026 <  (int32_t)1; i2026++){
for (uint32_t i2028 =  (int32_t)0; i2028 <  (int32_t)7; i2028++){
for (uint32_t i2029 =  (int32_t)0; i2029 <  (int32_t)7; i2029++){
for (uint32_t i2027 =  (int32_t)0; i2027 <  (int32_t)1152; i2027++){
Arr4DIdxRowM(tmp1000, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i2026,i2027,i2028,i2029) = Arr4DIdxRowM(tmp997, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i2022,i2023,i2024,i2025);
i2025 = (i2025 +  (int64_t)1);
if ((i2025 ==  (int64_t)1152)) {
i2025 =  (int64_t)0;
i2024 = (i2024 +  (int64_t)1);
if ((i2024 ==  (int64_t)7)) {
i2024 =  (int64_t)0;
i2023 = (i2023 +  (int64_t)1);
if ((i2023 ==  (int64_t)7)) {
i2023 =  (int64_t)0;
i2022 = (i2022 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp997);

uint64_t* tmp1002 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);

int64_t i2037;

int64_t i2036;

int64_t i2035;

int64_t i2034;

int64_t i2033;

int64_t i2032;

int64_t i2031;

int64_t i2030;
i2030 =  (int64_t)0;
i2031 =  (int64_t)0;
i2032 =  (int64_t)0;
i2033 =  (int64_t)0;
for (uint32_t i2034 =  (int32_t)0; i2034 <  (int32_t)1; i2034++){
for (uint32_t i2037 =  (int32_t)0; i2037 <  (int32_t)1152; i2037++){
for (uint32_t i2035 =  (int32_t)0; i2035 <  (int32_t)7; i2035++){
for (uint32_t i2036 =  (int32_t)0; i2036 <  (int32_t)7; i2036++){
Arr4DIdxRowM(tmp1002, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i2034,i2035,i2036,i2037) = Arr4DIdxRowM(tmp1000, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i2030,i2031,i2032,i2033);
i2033 = (i2033 +  (int64_t)1);
if ((i2033 ==  (int64_t)7)) {
i2033 =  (int64_t)0;
i2032 = (i2032 +  (int64_t)1);
if ((i2032 ==  (int64_t)7)) {
i2032 =  (int64_t)0;
i2031 = (i2031 +  (int64_t)1);
if ((i2031 ==  (int64_t)1152)) {
i2031 =  (int64_t)0;
i2030 = (i2030 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7, tmp1000);

uint64_t* tmp1004 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp1002, tmp1004,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp1002);

uint64_t* tmp1006 = make_array<uint64_t>( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7);

int64_t i2045;

int64_t i2044;

int64_t i2043;

int64_t i2042;

int64_t i2041;

int64_t i2040;

int64_t i2039;

int64_t i2038;
i2038 =  (int64_t)0;
i2039 =  (int64_t)0;
i2040 =  (int64_t)0;
i2041 =  (int64_t)0;
for (uint32_t i2042 =  (int32_t)0; i2042 <  (int32_t)1; i2042++){
for (uint32_t i2044 =  (int32_t)0; i2044 <  (int32_t)7; i2044++){
for (uint32_t i2045 =  (int32_t)0; i2045 <  (int32_t)7; i2045++){
for (uint32_t i2043 =  (int32_t)0; i2043 <  (int32_t)1152; i2043++){
Arr4DIdxRowM(tmp1006, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i2042,i2043,i2044,i2045) = Arr4DIdxRowM(tmp1004, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i2038,i2039,i2040,i2041);
i2041 = (i2041 +  (int64_t)1);
if ((i2041 ==  (int64_t)1152)) {
i2041 =  (int64_t)0;
i2040 = (i2040 +  (int64_t)1);
if ((i2040 ==  (int64_t)7)) {
i2040 =  (int64_t)0;
i2039 = (i2039 +  (int64_t)1);
if ((i2039 ==  (int64_t)7)) {
i2039 =  (int64_t)0;
i2038 = (i2038 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp1004);

uint64_t* tmp1008 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);

int64_t i2053;

int64_t i2052;

int64_t i2051;

int64_t i2050;

int64_t i2049;

int64_t i2048;

int64_t i2047;

int64_t i2046;
i2046 =  (int64_t)0;
i2047 =  (int64_t)0;
i2048 =  (int64_t)0;
i2049 =  (int64_t)0;
for (uint32_t i2050 =  (int32_t)0; i2050 <  (int32_t)1; i2050++){
for (uint32_t i2053 =  (int32_t)0; i2053 <  (int32_t)1152; i2053++){
for (uint32_t i2051 =  (int32_t)0; i2051 <  (int32_t)7; i2051++){
for (uint32_t i2052 =  (int32_t)0; i2052 <  (int32_t)7; i2052++){
Arr4DIdxRowM(tmp1008, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i2050,i2051,i2052,i2053) = Arr4DIdxRowM(tmp1006, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i2046,i2047,i2048,i2049);
i2049 = (i2049 +  (int64_t)1);
if ((i2049 ==  (int64_t)7)) {
i2049 =  (int64_t)0;
i2048 = (i2048 +  (int64_t)1);
if ((i2048 ==  (int64_t)7)) {
i2048 =  (int64_t)0;
i2047 = (i2047 +  (int64_t)1);
if ((i2047 ==  (int64_t)1152)) {
i2047 =  (int64_t)0;
i2046 = (i2046 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7, tmp1006);

uint64_t* tmp1010 = make_array<uint64_t>( (int32_t)5,  (int32_t)5,  (int32_t)1,  (int32_t)1152);

int64_t i2061;

int64_t i2060;

int64_t i2059;

int64_t i2058;

int64_t i2057;

int64_t i2056;

int64_t i2055;

int64_t i2054;
i2054 =  (int64_t)0;
i2055 =  (int64_t)0;
i2056 =  (int64_t)0;
i2057 =  (int64_t)0;
for (uint32_t i2061 =  (int32_t)0; i2061 <  (int32_t)1152; i2061++){
for (uint32_t i2060 =  (int32_t)0; i2060 <  (int32_t)1; i2060++){
for (uint32_t i2058 =  (int32_t)0; i2058 <  (int32_t)5; i2058++){
for (uint32_t i2059 =  (int32_t)0; i2059 <  (int32_t)5; i2059++){
Arr4DIdxRowM(tmp1010, (int32_t)5, (int32_t)5, (int32_t)1, (int32_t)1152,i2058,i2059,i2060,i2061) = Arr4DIdxRowM(tmp95, (int32_t)1152, (int32_t)1, (int32_t)5, (int32_t)5,i2054,i2055,i2056,i2057);
i2057 = (i2057 +  (int64_t)1);
if ((i2057 ==  (int64_t)5)) {
i2057 =  (int64_t)0;
i2056 = (i2056 +  (int64_t)1);
if ((i2056 ==  (int64_t)5)) {
i2056 =  (int64_t)0;
i2055 = (i2055 +  (int64_t)1);
if ((i2055 ==  (int64_t)1)) {
i2055 =  (int64_t)0;
i2054 = (i2054 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1152,  (int32_t)1,  (int32_t)5,  (int32_t)5, tmp95);

uint64_t* tmp1012 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152,  (int32_t)5,  (int32_t)5,  (int32_t)1152,  (int32_t)2,  (int32_t)2,  (int32_t)2,  (int32_t)2,  (int32_t)1,  (int32_t)1,  (int32_t)1152, tmp1008, tmp1010, tmp1012);
ClearMemSecret4( (int32_t)5,  (int32_t)5,  (int32_t)1,  (int32_t)1152, tmp1010);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp1008);

uint64_t* tmp1015 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1152);

int64_t i2066;

int64_t i2065;

int64_t i2064;

int64_t i2063;

int64_t i2062;
i2062 =  (int64_t)0;
for (uint32_t i2063 =  (int32_t)0; i2063 <  (int32_t)1; i2063++){
for (uint32_t i2064 =  (int32_t)0; i2064 <  (int32_t)1; i2064++){
for (uint32_t i2065 =  (int32_t)0; i2065 <  (int32_t)1; i2065++){
for (uint32_t i2066 =  (int32_t)0; i2066 <  (int32_t)1152; i2066++){
Arr4DIdxRowM(tmp1015, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1152,i2063,i2064,i2065,i2066) = Arr1DIdxRowM(tmp96, (int32_t)1152,i2062);
i2062 = (i2062 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)1152, tmp96);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1152, tmp1015,  kScale);

uint64_t* tmp1017 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)7; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)7; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)1152; i3++){
Arr4DIdxRowM(tmp1017, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp1012, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i0,i1,i2,i3), Arr4DIdxRowM(tmp1015, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1152,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1152, tmp1015);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp1012);

uint64_t* tmp1020 = make_array<uint64_t>( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7);

int64_t i2074;

int64_t i2073;

int64_t i2072;

int64_t i2071;

int64_t i2070;

int64_t i2069;

int64_t i2068;

int64_t i2067;
i2067 =  (int64_t)0;
i2068 =  (int64_t)0;
i2069 =  (int64_t)0;
i2070 =  (int64_t)0;
for (uint32_t i2071 =  (int32_t)0; i2071 <  (int32_t)1; i2071++){
for (uint32_t i2073 =  (int32_t)0; i2073 <  (int32_t)7; i2073++){
for (uint32_t i2074 =  (int32_t)0; i2074 <  (int32_t)7; i2074++){
for (uint32_t i2072 =  (int32_t)0; i2072 <  (int32_t)1152; i2072++){
Arr4DIdxRowM(tmp1020, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i2071,i2072,i2073,i2074) = Arr4DIdxRowM(tmp1017, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i2067,i2068,i2069,i2070);
i2070 = (i2070 +  (int64_t)1);
if ((i2070 ==  (int64_t)1152)) {
i2070 =  (int64_t)0;
i2069 = (i2069 +  (int64_t)1);
if ((i2069 ==  (int64_t)7)) {
i2069 =  (int64_t)0;
i2068 = (i2068 +  (int64_t)1);
if ((i2068 ==  (int64_t)7)) {
i2068 =  (int64_t)0;
i2067 = (i2067 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp1017);

uint64_t* tmp1022 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);

int64_t i2082;

int64_t i2081;

int64_t i2080;

int64_t i2079;

int64_t i2078;

int64_t i2077;

int64_t i2076;

int64_t i2075;
i2075 =  (int64_t)0;
i2076 =  (int64_t)0;
i2077 =  (int64_t)0;
i2078 =  (int64_t)0;
for (uint32_t i2079 =  (int32_t)0; i2079 <  (int32_t)1; i2079++){
for (uint32_t i2082 =  (int32_t)0; i2082 <  (int32_t)1152; i2082++){
for (uint32_t i2080 =  (int32_t)0; i2080 <  (int32_t)7; i2080++){
for (uint32_t i2081 =  (int32_t)0; i2081 <  (int32_t)7; i2081++){
Arr4DIdxRowM(tmp1022, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i2079,i2080,i2081,i2082) = Arr4DIdxRowM(tmp1020, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i2075,i2076,i2077,i2078);
i2078 = (i2078 +  (int64_t)1);
if ((i2078 ==  (int64_t)7)) {
i2078 =  (int64_t)0;
i2077 = (i2077 +  (int64_t)1);
if ((i2077 ==  (int64_t)7)) {
i2077 =  (int64_t)0;
i2076 = (i2076 +  (int64_t)1);
if ((i2076 ==  (int64_t)1152)) {
i2076 =  (int64_t)0;
i2075 = (i2075 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7, tmp1020);

uint64_t* tmp1024 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp1022, tmp1024,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp1022);

uint64_t* tmp1026 = make_array<uint64_t>( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7);

int64_t i2090;

int64_t i2089;

int64_t i2088;

int64_t i2087;

int64_t i2086;

int64_t i2085;

int64_t i2084;

int64_t i2083;
i2083 =  (int64_t)0;
i2084 =  (int64_t)0;
i2085 =  (int64_t)0;
i2086 =  (int64_t)0;
for (uint32_t i2087 =  (int32_t)0; i2087 <  (int32_t)1; i2087++){
for (uint32_t i2089 =  (int32_t)0; i2089 <  (int32_t)7; i2089++){
for (uint32_t i2090 =  (int32_t)0; i2090 <  (int32_t)7; i2090++){
for (uint32_t i2088 =  (int32_t)0; i2088 <  (int32_t)1152; i2088++){
Arr4DIdxRowM(tmp1026, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i2087,i2088,i2089,i2090) = Arr4DIdxRowM(tmp1024, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i2083,i2084,i2085,i2086);
i2086 = (i2086 +  (int64_t)1);
if ((i2086 ==  (int64_t)1152)) {
i2086 =  (int64_t)0;
i2085 = (i2085 +  (int64_t)1);
if ((i2085 ==  (int64_t)7)) {
i2085 =  (int64_t)0;
i2084 = (i2084 +  (int64_t)1);
if ((i2084 ==  (int64_t)7)) {
i2084 =  (int64_t)0;
i2083 = (i2083 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp1024);

uint64_t* tmp1028 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);

int64_t i2098;

int64_t i2097;

int64_t i2096;

int64_t i2095;

int64_t i2094;

int64_t i2093;

int64_t i2092;

int64_t i2091;
i2091 =  (int64_t)0;
i2092 =  (int64_t)0;
i2093 =  (int64_t)0;
i2094 =  (int64_t)0;
for (uint32_t i2095 =  (int32_t)0; i2095 <  (int32_t)1; i2095++){
for (uint32_t i2098 =  (int32_t)0; i2098 <  (int32_t)1152; i2098++){
for (uint32_t i2096 =  (int32_t)0; i2096 <  (int32_t)7; i2096++){
for (uint32_t i2097 =  (int32_t)0; i2097 <  (int32_t)7; i2097++){
Arr4DIdxRowM(tmp1028, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i2095,i2096,i2097,i2098) = Arr4DIdxRowM(tmp1026, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i2091,i2092,i2093,i2094);
i2094 = (i2094 +  (int64_t)1);
if ((i2094 ==  (int64_t)7)) {
i2094 =  (int64_t)0;
i2093 = (i2093 +  (int64_t)1);
if ((i2093 ==  (int64_t)7)) {
i2093 =  (int64_t)0;
i2092 = (i2092 +  (int64_t)1);
if ((i2092 ==  (int64_t)1152)) {
i2092 =  (int64_t)0;
i2091 = (i2091 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7, tmp1026);

uint64_t* tmp1030 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1152,  (int32_t)192);

int64_t i2106;

int64_t i2105;

int64_t i2104;

int64_t i2103;

int64_t i2102;

int64_t i2101;

int64_t i2100;

int64_t i2099;
i2099 =  (int64_t)0;
i2100 =  (int64_t)0;
i2101 =  (int64_t)0;
i2102 =  (int64_t)0;
for (uint32_t i2106 =  (int32_t)0; i2106 <  (int32_t)192; i2106++){
for (uint32_t i2105 =  (int32_t)0; i2105 <  (int32_t)1152; i2105++){
for (uint32_t i2103 =  (int32_t)0; i2103 <  (int32_t)1; i2103++){
for (uint32_t i2104 =  (int32_t)0; i2104 <  (int32_t)1; i2104++){
Arr4DIdxRowM(tmp1030, (int32_t)1, (int32_t)1, (int32_t)1152, (int32_t)192,i2103,i2104,i2105,i2106) = Arr4DIdxRowM(tmp97, (int32_t)192, (int32_t)1152, (int32_t)1, (int32_t)1,i2099,i2100,i2101,i2102);
i2102 = (i2102 +  (int64_t)1);
if ((i2102 ==  (int64_t)1)) {
i2102 =  (int64_t)0;
i2101 = (i2101 +  (int64_t)1);
if ((i2101 ==  (int64_t)1)) {
i2101 =  (int64_t)0;
i2100 = (i2100 +  (int64_t)1);
if ((i2100 ==  (int64_t)1152)) {
i2100 =  (int64_t)0;
i2099 = (i2099 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)192,  (int32_t)1152,  (int32_t)1,  (int32_t)1, tmp97);

uint64_t* tmp1032 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152,  (int32_t)1,  (int32_t)1,  (int32_t)192,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1028, tmp1030, tmp1032);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp1028);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1152,  (int32_t)192, tmp1030);

uint64_t* tmp1035 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)192);

int64_t i2111;

int64_t i2110;

int64_t i2109;

int64_t i2108;

int64_t i2107;
i2107 =  (int64_t)0;
for (uint32_t i2108 =  (int32_t)0; i2108 <  (int32_t)1; i2108++){
for (uint32_t i2109 =  (int32_t)0; i2109 <  (int32_t)1; i2109++){
for (uint32_t i2110 =  (int32_t)0; i2110 <  (int32_t)1; i2110++){
for (uint32_t i2111 =  (int32_t)0; i2111 <  (int32_t)192; i2111++){
Arr4DIdxRowM(tmp1035, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)192,i2108,i2109,i2110,i2111) = Arr1DIdxRowM(tmp98, (int32_t)192,i2107);
i2107 = (i2107 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)192, tmp98);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)192, tmp1035,  kScale);

uint64_t* tmp1037 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)7; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)7; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)192; i3++){
Arr4DIdxRowM(tmp1037, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp1032, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i0,i1,i2,i3), Arr4DIdxRowM(tmp1035, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)192,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)192, tmp1035);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192, tmp1032);

uint64_t* tmp1040 = make_array<uint64_t>( (int32_t)1,  (int32_t)192,  (int32_t)7,  (int32_t)7);

int64_t i2119;

int64_t i2118;

int64_t i2117;

int64_t i2116;

int64_t i2115;

int64_t i2114;

int64_t i2113;

int64_t i2112;
i2112 =  (int64_t)0;
i2113 =  (int64_t)0;
i2114 =  (int64_t)0;
i2115 =  (int64_t)0;
for (uint32_t i2116 =  (int32_t)0; i2116 <  (int32_t)1; i2116++){
for (uint32_t i2118 =  (int32_t)0; i2118 <  (int32_t)7; i2118++){
for (uint32_t i2119 =  (int32_t)0; i2119 <  (int32_t)7; i2119++){
for (uint32_t i2117 =  (int32_t)0; i2117 <  (int32_t)192; i2117++){
Arr4DIdxRowM(tmp1040, (int32_t)1, (int32_t)192, (int32_t)7, (int32_t)7,i2116,i2117,i2118,i2119) = Arr4DIdxRowM(tmp1037, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i2112,i2113,i2114,i2115);
i2115 = (i2115 +  (int64_t)1);
if ((i2115 ==  (int64_t)192)) {
i2115 =  (int64_t)0;
i2114 = (i2114 +  (int64_t)1);
if ((i2114 ==  (int64_t)7)) {
i2114 =  (int64_t)0;
i2113 = (i2113 +  (int64_t)1);
if ((i2113 ==  (int64_t)7)) {
i2113 =  (int64_t)0;
i2112 = (i2112 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192, tmp1037);

uint64_t* tmp1042 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192);

int64_t i2127;

int64_t i2126;

int64_t i2125;

int64_t i2124;

int64_t i2123;

int64_t i2122;

int64_t i2121;

int64_t i2120;
i2120 =  (int64_t)0;
i2121 =  (int64_t)0;
i2122 =  (int64_t)0;
i2123 =  (int64_t)0;
for (uint32_t i2124 =  (int32_t)0; i2124 <  (int32_t)1; i2124++){
for (uint32_t i2127 =  (int32_t)0; i2127 <  (int32_t)192; i2127++){
for (uint32_t i2125 =  (int32_t)0; i2125 <  (int32_t)7; i2125++){
for (uint32_t i2126 =  (int32_t)0; i2126 <  (int32_t)7; i2126++){
Arr4DIdxRowM(tmp1042, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i2124,i2125,i2126,i2127) = Arr4DIdxRowM(tmp1040, (int32_t)1, (int32_t)192, (int32_t)7, (int32_t)7,i2120,i2121,i2122,i2123);
i2123 = (i2123 +  (int64_t)1);
if ((i2123 ==  (int64_t)7)) {
i2123 =  (int64_t)0;
i2122 = (i2122 +  (int64_t)1);
if ((i2122 ==  (int64_t)7)) {
i2122 =  (int64_t)0;
i2121 = (i2121 +  (int64_t)1);
if ((i2121 ==  (int64_t)192)) {
i2121 =  (int64_t)0;
i2120 = (i2120 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)192,  (int32_t)7,  (int32_t)7, tmp1040);

uint64_t* tmp1044 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192);

int64_t i2135;

int64_t i2134;

int64_t i2133;

int64_t i2132;

int64_t i2131;

int64_t i2130;

int64_t i2129;

int64_t i2128;
i2128 =  (int64_t)0;
i2129 =  (int64_t)0;
i2130 =  (int64_t)0;
i2131 =  (int64_t)0;
for (uint32_t i2132 =  (int32_t)0; i2132 <  (int32_t)1; i2132++){
for (uint32_t i2135 =  (int32_t)0; i2135 <  (int32_t)192; i2135++){
for (uint32_t i2133 =  (int32_t)0; i2133 <  (int32_t)7; i2133++){
for (uint32_t i2134 =  (int32_t)0; i2134 <  (int32_t)7; i2134++){
Arr4DIdxRowM(tmp1044, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i2132,i2133,i2134,i2135) = Arr4DIdxRowM(tmp987, (int32_t)1, (int32_t)192, (int32_t)7, (int32_t)7,i2128,i2129,i2130,i2131);
i2131 = (i2131 +  (int64_t)1);
if ((i2131 ==  (int64_t)7)) {
i2131 =  (int64_t)0;
i2130 = (i2130 +  (int64_t)1);
if ((i2130 ==  (int64_t)7)) {
i2130 =  (int64_t)0;
i2129 = (i2129 +  (int64_t)1);
if ((i2129 ==  (int64_t)192)) {
i2129 =  (int64_t)0;
i2128 = (i2128 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)192,  (int32_t)7,  (int32_t)7, tmp987);

uint64_t* tmp1046 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)7; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)7; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)192; i3++){
Arr4DIdxRowM(tmp1046, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp1042, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i0,i1,i2,i3), Arr4DIdxRowM(tmp1044, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i0,i1,i2,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192, tmp1042);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192, tmp1044);

uint64_t* tmp1049 = make_array<uint64_t>( (int32_t)1,  (int32_t)192,  (int32_t)7,  (int32_t)7);

int64_t i2143;

int64_t i2142;

int64_t i2141;

int64_t i2140;

int64_t i2139;

int64_t i2138;

int64_t i2137;

int64_t i2136;
i2136 =  (int64_t)0;
i2137 =  (int64_t)0;
i2138 =  (int64_t)0;
i2139 =  (int64_t)0;
for (uint32_t i2140 =  (int32_t)0; i2140 <  (int32_t)1; i2140++){
for (uint32_t i2142 =  (int32_t)0; i2142 <  (int32_t)7; i2142++){
for (uint32_t i2143 =  (int32_t)0; i2143 <  (int32_t)7; i2143++){
for (uint32_t i2141 =  (int32_t)0; i2141 <  (int32_t)192; i2141++){
Arr4DIdxRowM(tmp1049, (int32_t)1, (int32_t)192, (int32_t)7, (int32_t)7,i2140,i2141,i2142,i2143) = Arr4DIdxRowM(tmp1046, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i2136,i2137,i2138,i2139);
i2139 = (i2139 +  (int64_t)1);
if ((i2139 ==  (int64_t)192)) {
i2139 =  (int64_t)0;
i2138 = (i2138 +  (int64_t)1);
if ((i2138 ==  (int64_t)7)) {
i2138 =  (int64_t)0;
i2137 = (i2137 +  (int64_t)1);
if ((i2137 ==  (int64_t)7)) {
i2137 =  (int64_t)0;
i2136 = (i2136 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192, tmp1046);

uint64_t* tmp1051 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192);

int64_t i2151;

int64_t i2150;

int64_t i2149;

int64_t i2148;

int64_t i2147;

int64_t i2146;

int64_t i2145;

int64_t i2144;
i2144 =  (int64_t)0;
i2145 =  (int64_t)0;
i2146 =  (int64_t)0;
i2147 =  (int64_t)0;
for (uint32_t i2148 =  (int32_t)0; i2148 <  (int32_t)1; i2148++){
for (uint32_t i2151 =  (int32_t)0; i2151 <  (int32_t)192; i2151++){
for (uint32_t i2149 =  (int32_t)0; i2149 <  (int32_t)7; i2149++){
for (uint32_t i2150 =  (int32_t)0; i2150 <  (int32_t)7; i2150++){
Arr4DIdxRowM(tmp1051, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)192,i2148,i2149,i2150,i2151) = Arr4DIdxRowM(tmp1049, (int32_t)1, (int32_t)192, (int32_t)7, (int32_t)7,i2144,i2145,i2146,i2147);
i2147 = (i2147 +  (int64_t)1);
if ((i2147 ==  (int64_t)7)) {
i2147 =  (int64_t)0;
i2146 = (i2146 +  (int64_t)1);
if ((i2146 ==  (int64_t)7)) {
i2146 =  (int64_t)0;
i2145 = (i2145 +  (int64_t)1);
if ((i2145 ==  (int64_t)192)) {
i2145 =  (int64_t)0;
i2144 = (i2144 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)192,  (int32_t)7,  (int32_t)7, tmp1049);

uint64_t* tmp1053 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)192,  (int32_t)1152);

int64_t i2159;

int64_t i2158;

int64_t i2157;

int64_t i2156;

int64_t i2155;

int64_t i2154;

int64_t i2153;

int64_t i2152;
i2152 =  (int64_t)0;
i2153 =  (int64_t)0;
i2154 =  (int64_t)0;
i2155 =  (int64_t)0;
for (uint32_t i2159 =  (int32_t)0; i2159 <  (int32_t)1152; i2159++){
for (uint32_t i2158 =  (int32_t)0; i2158 <  (int32_t)192; i2158++){
for (uint32_t i2156 =  (int32_t)0; i2156 <  (int32_t)1; i2156++){
for (uint32_t i2157 =  (int32_t)0; i2157 <  (int32_t)1; i2157++){
Arr4DIdxRowM(tmp1053, (int32_t)1, (int32_t)1, (int32_t)192, (int32_t)1152,i2156,i2157,i2158,i2159) = Arr4DIdxRowM(tmp99, (int32_t)1152, (int32_t)192, (int32_t)1, (int32_t)1,i2152,i2153,i2154,i2155);
i2155 = (i2155 +  (int64_t)1);
if ((i2155 ==  (int64_t)1)) {
i2155 =  (int64_t)0;
i2154 = (i2154 +  (int64_t)1);
if ((i2154 ==  (int64_t)1)) {
i2154 =  (int64_t)0;
i2153 = (i2153 +  (int64_t)1);
if ((i2153 ==  (int64_t)192)) {
i2153 =  (int64_t)0;
i2152 = (i2152 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1152,  (int32_t)192,  (int32_t)1,  (int32_t)1, tmp99);

uint64_t* tmp1055 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192, tmp1051,  kScale);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192,  (int32_t)1,  (int32_t)1,  (int32_t)1152,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1051, tmp1053, tmp1055);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)192, tmp1051);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)192,  (int32_t)1152, tmp1053);

uint64_t* tmp1058 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1152);

int64_t i2164;

int64_t i2163;

int64_t i2162;

int64_t i2161;

int64_t i2160;
i2160 =  (int64_t)0;
for (uint32_t i2161 =  (int32_t)0; i2161 <  (int32_t)1; i2161++){
for (uint32_t i2162 =  (int32_t)0; i2162 <  (int32_t)1; i2162++){
for (uint32_t i2163 =  (int32_t)0; i2163 <  (int32_t)1; i2163++){
for (uint32_t i2164 =  (int32_t)0; i2164 <  (int32_t)1152; i2164++){
Arr4DIdxRowM(tmp1058, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1152,i2161,i2162,i2163,i2164) = Arr1DIdxRowM(tmp100, (int32_t)1152,i2160);
i2160 = (i2160 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)1152, tmp100);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1152, tmp1058,  kScale);

uint64_t* tmp1060 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)7; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)7; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)1152; i3++){
Arr4DIdxRowM(tmp1060, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp1055, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i0,i1,i2,i3), Arr4DIdxRowM(tmp1058, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1152,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1152, tmp1058);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp1055);

uint64_t* tmp1063 = make_array<uint64_t>( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7);

int64_t i2172;

int64_t i2171;

int64_t i2170;

int64_t i2169;

int64_t i2168;

int64_t i2167;

int64_t i2166;

int64_t i2165;
i2165 =  (int64_t)0;
i2166 =  (int64_t)0;
i2167 =  (int64_t)0;
i2168 =  (int64_t)0;
for (uint32_t i2169 =  (int32_t)0; i2169 <  (int32_t)1; i2169++){
for (uint32_t i2171 =  (int32_t)0; i2171 <  (int32_t)7; i2171++){
for (uint32_t i2172 =  (int32_t)0; i2172 <  (int32_t)7; i2172++){
for (uint32_t i2170 =  (int32_t)0; i2170 <  (int32_t)1152; i2170++){
Arr4DIdxRowM(tmp1063, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i2169,i2170,i2171,i2172) = Arr4DIdxRowM(tmp1060, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i2165,i2166,i2167,i2168);
i2168 = (i2168 +  (int64_t)1);
if ((i2168 ==  (int64_t)1152)) {
i2168 =  (int64_t)0;
i2167 = (i2167 +  (int64_t)1);
if ((i2167 ==  (int64_t)7)) {
i2167 =  (int64_t)0;
i2166 = (i2166 +  (int64_t)1);
if ((i2166 ==  (int64_t)7)) {
i2166 =  (int64_t)0;
i2165 = (i2165 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp1060);

uint64_t* tmp1065 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);

int64_t i2180;

int64_t i2179;

int64_t i2178;

int64_t i2177;

int64_t i2176;

int64_t i2175;

int64_t i2174;

int64_t i2173;
i2173 =  (int64_t)0;
i2174 =  (int64_t)0;
i2175 =  (int64_t)0;
i2176 =  (int64_t)0;
for (uint32_t i2177 =  (int32_t)0; i2177 <  (int32_t)1; i2177++){
for (uint32_t i2180 =  (int32_t)0; i2180 <  (int32_t)1152; i2180++){
for (uint32_t i2178 =  (int32_t)0; i2178 <  (int32_t)7; i2178++){
for (uint32_t i2179 =  (int32_t)0; i2179 <  (int32_t)7; i2179++){
Arr4DIdxRowM(tmp1065, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i2177,i2178,i2179,i2180) = Arr4DIdxRowM(tmp1063, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i2173,i2174,i2175,i2176);
i2176 = (i2176 +  (int64_t)1);
if ((i2176 ==  (int64_t)7)) {
i2176 =  (int64_t)0;
i2175 = (i2175 +  (int64_t)1);
if ((i2175 ==  (int64_t)7)) {
i2175 =  (int64_t)0;
i2174 = (i2174 +  (int64_t)1);
if ((i2174 ==  (int64_t)1152)) {
i2174 =  (int64_t)0;
i2173 = (i2173 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7, tmp1063);

uint64_t* tmp1067 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp1065, tmp1067,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp1065);

uint64_t* tmp1069 = make_array<uint64_t>( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7);

int64_t i2188;

int64_t i2187;

int64_t i2186;

int64_t i2185;

int64_t i2184;

int64_t i2183;

int64_t i2182;

int64_t i2181;
i2181 =  (int64_t)0;
i2182 =  (int64_t)0;
i2183 =  (int64_t)0;
i2184 =  (int64_t)0;
for (uint32_t i2185 =  (int32_t)0; i2185 <  (int32_t)1; i2185++){
for (uint32_t i2187 =  (int32_t)0; i2187 <  (int32_t)7; i2187++){
for (uint32_t i2188 =  (int32_t)0; i2188 <  (int32_t)7; i2188++){
for (uint32_t i2186 =  (int32_t)0; i2186 <  (int32_t)1152; i2186++){
Arr4DIdxRowM(tmp1069, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i2185,i2186,i2187,i2188) = Arr4DIdxRowM(tmp1067, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i2181,i2182,i2183,i2184);
i2184 = (i2184 +  (int64_t)1);
if ((i2184 ==  (int64_t)1152)) {
i2184 =  (int64_t)0;
i2183 = (i2183 +  (int64_t)1);
if ((i2183 ==  (int64_t)7)) {
i2183 =  (int64_t)0;
i2182 = (i2182 +  (int64_t)1);
if ((i2182 ==  (int64_t)7)) {
i2182 =  (int64_t)0;
i2181 = (i2181 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp1067);

uint64_t* tmp1071 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);

int64_t i2196;

int64_t i2195;

int64_t i2194;

int64_t i2193;

int64_t i2192;

int64_t i2191;

int64_t i2190;

int64_t i2189;
i2189 =  (int64_t)0;
i2190 =  (int64_t)0;
i2191 =  (int64_t)0;
i2192 =  (int64_t)0;
for (uint32_t i2193 =  (int32_t)0; i2193 <  (int32_t)1; i2193++){
for (uint32_t i2196 =  (int32_t)0; i2196 <  (int32_t)1152; i2196++){
for (uint32_t i2194 =  (int32_t)0; i2194 <  (int32_t)7; i2194++){
for (uint32_t i2195 =  (int32_t)0; i2195 <  (int32_t)7; i2195++){
Arr4DIdxRowM(tmp1071, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i2193,i2194,i2195,i2196) = Arr4DIdxRowM(tmp1069, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i2189,i2190,i2191,i2192);
i2192 = (i2192 +  (int64_t)1);
if ((i2192 ==  (int64_t)7)) {
i2192 =  (int64_t)0;
i2191 = (i2191 +  (int64_t)1);
if ((i2191 ==  (int64_t)7)) {
i2191 =  (int64_t)0;
i2190 = (i2190 +  (int64_t)1);
if ((i2190 ==  (int64_t)1152)) {
i2190 =  (int64_t)0;
i2189 = (i2189 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7, tmp1069);

uint64_t* tmp1073 = make_array<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)1,  (int32_t)1152);

int64_t i2204;

int64_t i2203;

int64_t i2202;

int64_t i2201;

int64_t i2200;

int64_t i2199;

int64_t i2198;

int64_t i2197;
i2197 =  (int64_t)0;
i2198 =  (int64_t)0;
i2199 =  (int64_t)0;
i2200 =  (int64_t)0;
for (uint32_t i2204 =  (int32_t)0; i2204 <  (int32_t)1152; i2204++){
for (uint32_t i2203 =  (int32_t)0; i2203 <  (int32_t)1; i2203++){
for (uint32_t i2201 =  (int32_t)0; i2201 <  (int32_t)3; i2201++){
for (uint32_t i2202 =  (int32_t)0; i2202 <  (int32_t)3; i2202++){
Arr4DIdxRowM(tmp1073, (int32_t)3, (int32_t)3, (int32_t)1, (int32_t)1152,i2201,i2202,i2203,i2204) = Arr4DIdxRowM(tmp101, (int32_t)1152, (int32_t)1, (int32_t)3, (int32_t)3,i2197,i2198,i2199,i2200);
i2200 = (i2200 +  (int64_t)1);
if ((i2200 ==  (int64_t)3)) {
i2200 =  (int64_t)0;
i2199 = (i2199 +  (int64_t)1);
if ((i2199 ==  (int64_t)3)) {
i2199 =  (int64_t)0;
i2198 = (i2198 +  (int64_t)1);
if ((i2198 ==  (int64_t)1)) {
i2198 =  (int64_t)0;
i2197 = (i2197 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1152,  (int32_t)1,  (int32_t)3,  (int32_t)3, tmp101);

uint64_t* tmp1075 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152,  (int32_t)3,  (int32_t)3,  (int32_t)1152,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1152, tmp1071, tmp1073, tmp1075);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)1,  (int32_t)1152, tmp1073);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp1071);

uint64_t* tmp1078 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1152);

int64_t i2209;

int64_t i2208;

int64_t i2207;

int64_t i2206;

int64_t i2205;
i2205 =  (int64_t)0;
for (uint32_t i2206 =  (int32_t)0; i2206 <  (int32_t)1; i2206++){
for (uint32_t i2207 =  (int32_t)0; i2207 <  (int32_t)1; i2207++){
for (uint32_t i2208 =  (int32_t)0; i2208 <  (int32_t)1; i2208++){
for (uint32_t i2209 =  (int32_t)0; i2209 <  (int32_t)1152; i2209++){
Arr4DIdxRowM(tmp1078, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1152,i2206,i2207,i2208,i2209) = Arr1DIdxRowM(tmp102, (int32_t)1152,i2205);
i2205 = (i2205 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)1152, tmp102);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1152, tmp1078,  kScale);

uint64_t* tmp1080 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)7; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)7; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)1152; i3++){
Arr4DIdxRowM(tmp1080, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp1075, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i0,i1,i2,i3), Arr4DIdxRowM(tmp1078, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1152,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1152, tmp1078);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp1075);

uint64_t* tmp1083 = make_array<uint64_t>( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7);

int64_t i2217;

int64_t i2216;

int64_t i2215;

int64_t i2214;

int64_t i2213;

int64_t i2212;

int64_t i2211;

int64_t i2210;
i2210 =  (int64_t)0;
i2211 =  (int64_t)0;
i2212 =  (int64_t)0;
i2213 =  (int64_t)0;
for (uint32_t i2214 =  (int32_t)0; i2214 <  (int32_t)1; i2214++){
for (uint32_t i2216 =  (int32_t)0; i2216 <  (int32_t)7; i2216++){
for (uint32_t i2217 =  (int32_t)0; i2217 <  (int32_t)7; i2217++){
for (uint32_t i2215 =  (int32_t)0; i2215 <  (int32_t)1152; i2215++){
Arr4DIdxRowM(tmp1083, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i2214,i2215,i2216,i2217) = Arr4DIdxRowM(tmp1080, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i2210,i2211,i2212,i2213);
i2213 = (i2213 +  (int64_t)1);
if ((i2213 ==  (int64_t)1152)) {
i2213 =  (int64_t)0;
i2212 = (i2212 +  (int64_t)1);
if ((i2212 ==  (int64_t)7)) {
i2212 =  (int64_t)0;
i2211 = (i2211 +  (int64_t)1);
if ((i2211 ==  (int64_t)7)) {
i2211 =  (int64_t)0;
i2210 = (i2210 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp1080);

uint64_t* tmp1085 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);

int64_t i2225;

int64_t i2224;

int64_t i2223;

int64_t i2222;

int64_t i2221;

int64_t i2220;

int64_t i2219;

int64_t i2218;
i2218 =  (int64_t)0;
i2219 =  (int64_t)0;
i2220 =  (int64_t)0;
i2221 =  (int64_t)0;
for (uint32_t i2222 =  (int32_t)0; i2222 <  (int32_t)1; i2222++){
for (uint32_t i2225 =  (int32_t)0; i2225 <  (int32_t)1152; i2225++){
for (uint32_t i2223 =  (int32_t)0; i2223 <  (int32_t)7; i2223++){
for (uint32_t i2224 =  (int32_t)0; i2224 <  (int32_t)7; i2224++){
Arr4DIdxRowM(tmp1085, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i2222,i2223,i2224,i2225) = Arr4DIdxRowM(tmp1083, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i2218,i2219,i2220,i2221);
i2221 = (i2221 +  (int64_t)1);
if ((i2221 ==  (int64_t)7)) {
i2221 =  (int64_t)0;
i2220 = (i2220 +  (int64_t)1);
if ((i2220 ==  (int64_t)7)) {
i2220 =  (int64_t)0;
i2219 = (i2219 +  (int64_t)1);
if ((i2219 ==  (int64_t)1152)) {
i2219 =  (int64_t)0;
i2218 = (i2218 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7, tmp1083);

uint64_t* tmp1087 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp1085, tmp1087,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp1085);

uint64_t* tmp1089 = make_array<uint64_t>( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7);

int64_t i2233;

int64_t i2232;

int64_t i2231;

int64_t i2230;

int64_t i2229;

int64_t i2228;

int64_t i2227;

int64_t i2226;
i2226 =  (int64_t)0;
i2227 =  (int64_t)0;
i2228 =  (int64_t)0;
i2229 =  (int64_t)0;
for (uint32_t i2230 =  (int32_t)0; i2230 <  (int32_t)1; i2230++){
for (uint32_t i2232 =  (int32_t)0; i2232 <  (int32_t)7; i2232++){
for (uint32_t i2233 =  (int32_t)0; i2233 <  (int32_t)7; i2233++){
for (uint32_t i2231 =  (int32_t)0; i2231 <  (int32_t)1152; i2231++){
Arr4DIdxRowM(tmp1089, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i2230,i2231,i2232,i2233) = Arr4DIdxRowM(tmp1087, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i2226,i2227,i2228,i2229);
i2229 = (i2229 +  (int64_t)1);
if ((i2229 ==  (int64_t)1152)) {
i2229 =  (int64_t)0;
i2228 = (i2228 +  (int64_t)1);
if ((i2228 ==  (int64_t)7)) {
i2228 =  (int64_t)0;
i2227 = (i2227 +  (int64_t)1);
if ((i2227 ==  (int64_t)7)) {
i2227 =  (int64_t)0;
i2226 = (i2226 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp1087);

uint64_t* tmp1091 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152);

int64_t i2241;

int64_t i2240;

int64_t i2239;

int64_t i2238;

int64_t i2237;

int64_t i2236;

int64_t i2235;

int64_t i2234;
i2234 =  (int64_t)0;
i2235 =  (int64_t)0;
i2236 =  (int64_t)0;
i2237 =  (int64_t)0;
for (uint32_t i2238 =  (int32_t)0; i2238 <  (int32_t)1; i2238++){
for (uint32_t i2241 =  (int32_t)0; i2241 <  (int32_t)1152; i2241++){
for (uint32_t i2239 =  (int32_t)0; i2239 <  (int32_t)7; i2239++){
for (uint32_t i2240 =  (int32_t)0; i2240 <  (int32_t)7; i2240++){
Arr4DIdxRowM(tmp1091, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1152,i2238,i2239,i2240,i2241) = Arr4DIdxRowM(tmp1089, (int32_t)1, (int32_t)1152, (int32_t)7, (int32_t)7,i2234,i2235,i2236,i2237);
i2237 = (i2237 +  (int64_t)1);
if ((i2237 ==  (int64_t)7)) {
i2237 =  (int64_t)0;
i2236 = (i2236 +  (int64_t)1);
if ((i2236 ==  (int64_t)7)) {
i2236 =  (int64_t)0;
i2235 = (i2235 +  (int64_t)1);
if ((i2235 ==  (int64_t)1152)) {
i2235 =  (int64_t)0;
i2234 = (i2234 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1152,  (int32_t)7,  (int32_t)7, tmp1089);

uint64_t* tmp1093 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1152,  (int32_t)320);

int64_t i2249;

int64_t i2248;

int64_t i2247;

int64_t i2246;

int64_t i2245;

int64_t i2244;

int64_t i2243;

int64_t i2242;
i2242 =  (int64_t)0;
i2243 =  (int64_t)0;
i2244 =  (int64_t)0;
i2245 =  (int64_t)0;
for (uint32_t i2249 =  (int32_t)0; i2249 <  (int32_t)320; i2249++){
for (uint32_t i2248 =  (int32_t)0; i2248 <  (int32_t)1152; i2248++){
for (uint32_t i2246 =  (int32_t)0; i2246 <  (int32_t)1; i2246++){
for (uint32_t i2247 =  (int32_t)0; i2247 <  (int32_t)1; i2247++){
Arr4DIdxRowM(tmp1093, (int32_t)1, (int32_t)1, (int32_t)1152, (int32_t)320,i2246,i2247,i2248,i2249) = Arr4DIdxRowM(tmp103, (int32_t)320, (int32_t)1152, (int32_t)1, (int32_t)1,i2242,i2243,i2244,i2245);
i2245 = (i2245 +  (int64_t)1);
if ((i2245 ==  (int64_t)1)) {
i2245 =  (int64_t)0;
i2244 = (i2244 +  (int64_t)1);
if ((i2244 ==  (int64_t)1)) {
i2244 =  (int64_t)0;
i2243 = (i2243 +  (int64_t)1);
if ((i2243 ==  (int64_t)1152)) {
i2243 =  (int64_t)0;
i2242 = (i2242 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)320,  (int32_t)1152,  (int32_t)1,  (int32_t)1, tmp103);

uint64_t* tmp1095 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)320);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152,  (int32_t)1,  (int32_t)1,  (int32_t)320,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1091, tmp1093, tmp1095);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1152, tmp1091);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1152,  (int32_t)320, tmp1093);

uint64_t* tmp1098 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)320);

int64_t i2254;

int64_t i2253;

int64_t i2252;

int64_t i2251;

int64_t i2250;
i2250 =  (int64_t)0;
for (uint32_t i2251 =  (int32_t)0; i2251 <  (int32_t)1; i2251++){
for (uint32_t i2252 =  (int32_t)0; i2252 <  (int32_t)1; i2252++){
for (uint32_t i2253 =  (int32_t)0; i2253 <  (int32_t)1; i2253++){
for (uint32_t i2254 =  (int32_t)0; i2254 <  (int32_t)320; i2254++){
Arr4DIdxRowM(tmp1098, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)320,i2251,i2252,i2253,i2254) = Arr1DIdxRowM(tmp104, (int32_t)320,i2250);
i2250 = (i2250 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)320, tmp104);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)320, tmp1098,  kScale);

uint64_t* tmp1100 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)320);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)7; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)7; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)320; i3++){
Arr4DIdxRowM(tmp1100, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)320,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp1095, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)320,i0,i1,i2,i3), Arr4DIdxRowM(tmp1098, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)320,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)320, tmp1098);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)320, tmp1095);

uint64_t* tmp1103 = make_array<uint64_t>( (int32_t)1,  (int32_t)320,  (int32_t)7,  (int32_t)7);

int64_t i2262;

int64_t i2261;

int64_t i2260;

int64_t i2259;

int64_t i2258;

int64_t i2257;

int64_t i2256;

int64_t i2255;
i2255 =  (int64_t)0;
i2256 =  (int64_t)0;
i2257 =  (int64_t)0;
i2258 =  (int64_t)0;
for (uint32_t i2259 =  (int32_t)0; i2259 <  (int32_t)1; i2259++){
for (uint32_t i2261 =  (int32_t)0; i2261 <  (int32_t)7; i2261++){
for (uint32_t i2262 =  (int32_t)0; i2262 <  (int32_t)7; i2262++){
for (uint32_t i2260 =  (int32_t)0; i2260 <  (int32_t)320; i2260++){
Arr4DIdxRowM(tmp1103, (int32_t)1, (int32_t)320, (int32_t)7, (int32_t)7,i2259,i2260,i2261,i2262) = Arr4DIdxRowM(tmp1100, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)320,i2255,i2256,i2257,i2258);
i2258 = (i2258 +  (int64_t)1);
if ((i2258 ==  (int64_t)320)) {
i2258 =  (int64_t)0;
i2257 = (i2257 +  (int64_t)1);
if ((i2257 ==  (int64_t)7)) {
i2257 =  (int64_t)0;
i2256 = (i2256 +  (int64_t)1);
if ((i2256 ==  (int64_t)7)) {
i2256 =  (int64_t)0;
i2255 = (i2255 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)320, tmp1100);

uint64_t* tmp1105 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)320);

int64_t i2270;

int64_t i2269;

int64_t i2268;

int64_t i2267;

int64_t i2266;

int64_t i2265;

int64_t i2264;

int64_t i2263;
i2263 =  (int64_t)0;
i2264 =  (int64_t)0;
i2265 =  (int64_t)0;
i2266 =  (int64_t)0;
for (uint32_t i2267 =  (int32_t)0; i2267 <  (int32_t)1; i2267++){
for (uint32_t i2270 =  (int32_t)0; i2270 <  (int32_t)320; i2270++){
for (uint32_t i2268 =  (int32_t)0; i2268 <  (int32_t)7; i2268++){
for (uint32_t i2269 =  (int32_t)0; i2269 <  (int32_t)7; i2269++){
Arr4DIdxRowM(tmp1105, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)320,i2267,i2268,i2269,i2270) = Arr4DIdxRowM(tmp1103, (int32_t)1, (int32_t)320, (int32_t)7, (int32_t)7,i2263,i2264,i2265,i2266);
i2266 = (i2266 +  (int64_t)1);
if ((i2266 ==  (int64_t)7)) {
i2266 =  (int64_t)0;
i2265 = (i2265 +  (int64_t)1);
if ((i2265 ==  (int64_t)7)) {
i2265 =  (int64_t)0;
i2264 = (i2264 +  (int64_t)1);
if ((i2264 ==  (int64_t)320)) {
i2264 =  (int64_t)0;
i2263 = (i2263 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)320,  (int32_t)7,  (int32_t)7, tmp1103);

uint64_t* tmp1107 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)320,  (int32_t)1280);

int64_t i2278;

int64_t i2277;

int64_t i2276;

int64_t i2275;

int64_t i2274;

int64_t i2273;

int64_t i2272;

int64_t i2271;
i2271 =  (int64_t)0;
i2272 =  (int64_t)0;
i2273 =  (int64_t)0;
i2274 =  (int64_t)0;
for (uint32_t i2278 =  (int32_t)0; i2278 <  (int32_t)1280; i2278++){
for (uint32_t i2277 =  (int32_t)0; i2277 <  (int32_t)320; i2277++){
for (uint32_t i2275 =  (int32_t)0; i2275 <  (int32_t)1; i2275++){
for (uint32_t i2276 =  (int32_t)0; i2276 <  (int32_t)1; i2276++){
Arr4DIdxRowM(tmp1107, (int32_t)1, (int32_t)1, (int32_t)320, (int32_t)1280,i2275,i2276,i2277,i2278) = Arr4DIdxRowM(tmp105, (int32_t)1280, (int32_t)320, (int32_t)1, (int32_t)1,i2271,i2272,i2273,i2274);
i2274 = (i2274 +  (int64_t)1);
if ((i2274 ==  (int64_t)1)) {
i2274 =  (int64_t)0;
i2273 = (i2273 +  (int64_t)1);
if ((i2273 ==  (int64_t)1)) {
i2273 =  (int64_t)0;
i2272 = (i2272 +  (int64_t)1);
if ((i2272 ==  (int64_t)320)) {
i2272 =  (int64_t)0;
i2271 = (i2271 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1280,  (int32_t)320,  (int32_t)1,  (int32_t)1, tmp105);

uint64_t* tmp1109 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1280);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)320, tmp1105,  kScale);
Conv2DGroupWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)320,  (int32_t)1,  (int32_t)1,  (int32_t)1280,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp1105, tmp1107, tmp1109);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)320, tmp1105);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)320,  (int32_t)1280, tmp1107);

uint64_t* tmp1112 = make_array<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1280);

int64_t i2283;

int64_t i2282;

int64_t i2281;

int64_t i2280;

int64_t i2279;
i2279 =  (int64_t)0;
for (uint32_t i2280 =  (int32_t)0; i2280 <  (int32_t)1; i2280++){
for (uint32_t i2281 =  (int32_t)0; i2281 <  (int32_t)1; i2281++){
for (uint32_t i2282 =  (int32_t)0; i2282 <  (int32_t)1; i2282++){
for (uint32_t i2283 =  (int32_t)0; i2283 <  (int32_t)1280; i2283++){
Arr4DIdxRowM(tmp1112, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1280,i2280,i2281,i2282,i2283) = Arr1DIdxRowM(tmp106, (int32_t)1280,i2279);
i2279 = (i2279 +  (int64_t)1);
}
}
}
}
ClearMemSecret1( (int32_t)1280, tmp106);
ScaleUp4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1280, tmp1112,  kScale);

uint64_t* tmp1114 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1280);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)7; i1++){
for (uint32_t i2 =  (int32_t)0; i2 <  (int32_t)7; i2++){
for (uint32_t i3 =  (int32_t)0; i3 <  (int32_t)1280; i3++){
Arr4DIdxRowM(tmp1114, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1280,i0,i1,i2,i3) = SecretAdd(Arr4DIdxRowM(tmp1109, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1280,i0,i1,i2,i3), Arr4DIdxRowM(tmp1112, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1280,i0, (int32_t)0, (int32_t)0,i3));
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1280, tmp1109);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1280, tmp1112);

uint64_t* tmp1117 = make_array<uint64_t>( (int32_t)1,  (int32_t)1280,  (int32_t)7,  (int32_t)7);

int64_t i2291;

int64_t i2290;

int64_t i2289;

int64_t i2288;

int64_t i2287;

int64_t i2286;

int64_t i2285;

int64_t i2284;
i2284 =  (int64_t)0;
i2285 =  (int64_t)0;
i2286 =  (int64_t)0;
i2287 =  (int64_t)0;
for (uint32_t i2288 =  (int32_t)0; i2288 <  (int32_t)1; i2288++){
for (uint32_t i2290 =  (int32_t)0; i2290 <  (int32_t)7; i2290++){
for (uint32_t i2291 =  (int32_t)0; i2291 <  (int32_t)7; i2291++){
for (uint32_t i2289 =  (int32_t)0; i2289 <  (int32_t)1280; i2289++){
Arr4DIdxRowM(tmp1117, (int32_t)1, (int32_t)1280, (int32_t)7, (int32_t)7,i2288,i2289,i2290,i2291) = Arr4DIdxRowM(tmp1114, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1280,i2284,i2285,i2286,i2287);
i2287 = (i2287 +  (int64_t)1);
if ((i2287 ==  (int64_t)1280)) {
i2287 =  (int64_t)0;
i2286 = (i2286 +  (int64_t)1);
if ((i2286 ==  (int64_t)7)) {
i2286 =  (int64_t)0;
i2285 = (i2285 +  (int64_t)1);
if ((i2285 ==  (int64_t)7)) {
i2285 =  (int64_t)0;
i2284 = (i2284 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1280, tmp1114);

uint64_t* tmp1119 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1280);

int64_t i2299;

int64_t i2298;

int64_t i2297;

int64_t i2296;

int64_t i2295;

int64_t i2294;

int64_t i2293;

int64_t i2292;
i2292 =  (int64_t)0;
i2293 =  (int64_t)0;
i2294 =  (int64_t)0;
i2295 =  (int64_t)0;
for (uint32_t i2296 =  (int32_t)0; i2296 <  (int32_t)1; i2296++){
for (uint32_t i2299 =  (int32_t)0; i2299 <  (int32_t)1280; i2299++){
for (uint32_t i2297 =  (int32_t)0; i2297 <  (int32_t)7; i2297++){
for (uint32_t i2298 =  (int32_t)0; i2298 <  (int32_t)7; i2298++){
Arr4DIdxRowM(tmp1119, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1280,i2296,i2297,i2298,i2299) = Arr4DIdxRowM(tmp1117, (int32_t)1, (int32_t)1280, (int32_t)7, (int32_t)7,i2292,i2293,i2294,i2295);
i2295 = (i2295 +  (int64_t)1);
if ((i2295 ==  (int64_t)7)) {
i2295 =  (int64_t)0;
i2294 = (i2294 +  (int64_t)1);
if ((i2294 ==  (int64_t)7)) {
i2294 =  (int64_t)0;
i2293 = (i2293 +  (int64_t)1);
if ((i2293 ==  (int64_t)1280)) {
i2293 =  (int64_t)0;
i2292 = (i2292 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)1280,  (int32_t)7,  (int32_t)7, tmp1117);

uint64_t* tmp1121 = make_array<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1280);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1280, tmp1119, tmp1121,  kScale, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1280, tmp1119);

uint64_t* tmp1123 = make_array<uint64_t>( (int32_t)1,  (int32_t)1280,  (int32_t)7,  (int32_t)7);

int64_t i2307;

int64_t i2306;

int64_t i2305;

int64_t i2304;

int64_t i2303;

int64_t i2302;

int64_t i2301;

int64_t i2300;
i2300 =  (int64_t)0;
i2301 =  (int64_t)0;
i2302 =  (int64_t)0;
i2303 =  (int64_t)0;
for (uint32_t i2304 =  (int32_t)0; i2304 <  (int32_t)1; i2304++){
for (uint32_t i2306 =  (int32_t)0; i2306 <  (int32_t)7; i2306++){
for (uint32_t i2307 =  (int32_t)0; i2307 <  (int32_t)7; i2307++){
for (uint32_t i2305 =  (int32_t)0; i2305 <  (int32_t)1280; i2305++){
Arr4DIdxRowM(tmp1123, (int32_t)1, (int32_t)1280, (int32_t)7, (int32_t)7,i2304,i2305,i2306,i2307) = Arr4DIdxRowM(tmp1121, (int32_t)1, (int32_t)7, (int32_t)7, (int32_t)1280,i2300,i2301,i2302,i2303);
i2303 = (i2303 +  (int64_t)1);
if ((i2303 ==  (int64_t)1280)) {
i2303 =  (int64_t)0;
i2302 = (i2302 +  (int64_t)1);
if ((i2302 ==  (int64_t)7)) {
i2302 =  (int64_t)0;
i2301 = (i2301 +  (int64_t)1);
if ((i2301 ==  (int64_t)7)) {
i2301 =  (int64_t)0;
i2300 = (i2300 +  (int64_t)1);
}
}
}
}
}
}
}
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)1280, tmp1121);

uint64_t* tmp1127 = make_array<uint64_t>( (int32_t)1,  (int32_t)1280);

int32_t tmp1125 =  (int32_t)2;

int32_t tmp1126 =  (int32_t)3;
ReduceMeanONNX24( (int32_t)1,  (int32_t)1280,  (int32_t)1,  (int32_t)1280,  (int32_t)7,  (int32_t)7, tmp1123, tmp1125, tmp1126, tmp1127);
ClearMemSecret4( (int32_t)1,  (int32_t)1280,  (int32_t)7,  (int32_t)7, tmp1123);
ScaleUp1( (int32_t)1000, tmp2,  kScale);

uint64_t* tmp1130 = make_array<uint64_t>( (int32_t)1,  (int32_t)1000);

uint64_t* tmp1129 = make_array<uint64_t>( (int32_t)1280,  (int32_t)1000);

int64_t i2309;

int64_t i2308;
for (uint32_t i2308 =  (int32_t)0; i2308 <  (int32_t)1000; i2308++){
for (uint32_t i2309 =  (int32_t)0; i2309 <  (int32_t)1280; i2309++){
Arr2DIdxRowM(tmp1129, (int32_t)1280, (int32_t)1000,i2309,i2308) = Arr2DIdxRowM(tmp1, (int32_t)1000, (int32_t)1280,i2308,i2309);
}
}
MatMul2D( (int32_t)1,  (int32_t)1280,  (int32_t)1000, tmp1127, tmp1129, tmp1130, 0);

uint64_t* tmp1131 = make_array<uint64_t>( (int32_t)1,  (int32_t)1000);
for (uint32_t i0 =  (int32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (int32_t)0; i1 <  (int32_t)1000; i1++){
Arr2DIdxRowM(tmp1131, (int32_t)1, (int32_t)1000,i0,i1) = SecretAdd(Arr2DIdxRowM(tmp1130, (int32_t)1, (int32_t)1000,i0,i1), Arr1DIdxRowM(tmp2, (int32_t)1000,i1));
}
}
ClearMemSecret2( (int32_t)1,  (int32_t)1280, tmp1127);
ClearMemSecret1( (int32_t)1000, tmp2);
ClearMemSecret2( (int32_t)1000,  (int32_t)1280, tmp1);
ScaleDown2( (int32_t)1,  (int32_t)1000, tmp1131, kScale);
EndComputation();
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
double max_pro = -100000000000000000000000;
uint64_t yhat = -1;
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1000; i1++){
int64_t _pro = funcReconstruct2PCCons(Arr2DIdxRowM(tmp1131, (int32_t)1, (int32_t)1000,i0,i1), 2);
//double pro = _pro / std::pow(2., kScale);
if (_pro > max_pro) {
        max_pro = _pro;
        yhat = i1;
      }
if (party == CLIENT) std::cout << _pro << " ";
}
if (party == CLIENT) std::cout << std::endl;
  if (party == CLIENT) {
      std::cout << "image " << i0 << " is predicted to class " << yhat << std::endl;
    }
}
}

